{
	// The path of the default solution to be opened in the workspace, or set to 'disable' to skip it. (Previously `omnisharp.defaultLaunchSolution`)
	"dotnet.defaultSolution": "",

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Enable crash reports to be collected. This helps us improve stability. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=521839) about what we collect and our privacy statement.
	"telemetry.enableTelemetry": true,

	// Enable feedback mechanisms such as the issue reporter, surveys, and feedback options in features like Copilot Chat.
	"telemetry.feedback.enabled": true,

	// 
	// Controls Visual Studio Code telemetry, first-party extension telemetry, and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=521839). A full restart of the application is necessary for crash reporting changes to take effect.
	// 
	// &nbsp;
	// 
	// The following table outlines the data sent with each setting:
	// 
	// |       | Crash Reports | Error Telemetry | Usage Data |
	// |:------|:-------------:|:---------------:|:----------:|
	// | all   |       ✓       |        ✓        |     ✓      |
	// | error |       ✓       |        ✓        |     -      |
	// | crash |       ✓       |        -        |     -      |
	// | off   |       -       |        -        |     -      |
	// 
	// 
	// &nbsp;
	// 
	// ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
	// 
	//  - all: Sends usage data, errors, and crash reports.
	//  - error: Sends general error telemetry and crash reports.
	//  - crash: Sends OS level crash reports.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "all",

	// Show hints for implicit object creation
	"csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": false,

	// Show hints for variables with inferred types
	"csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": false,

	// Show hints for lambda parameter types
	"csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": false,

	// Display inline type hints
	"csharp.inlayHints.enableInlayHintsForTypes": false,

	// Enable automatic insertion of documentation comments.
	"dotnet.autoInsert.enableAutoInsert": true,

	// Run background code analysis for: (Previously `omnisharp.enableRoslynAnalyzers`)
	//  - openFiles: Open documents
	//  - fullSolution: Entire solution
	//  - none: None
	"dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "openFiles",

	// Show compiler errors and warnings for:
	//  - openFiles: Open documents
	//  - fullSolution: Entire solution
	//  - none: None
	"dotnet.backgroundAnalysis.compilerDiagnosticsScope": "openFiles",

	// Specifies whether the references CodeLens should be shown. (Previously `csharp.referencesCodeLens.enabled`)
	"dotnet.codeLens.enableReferencesCodeLens": true,

	// Specifies whether the run and debug test CodeLens should be shown. (Previously `csharp.testsCodeLens.enabled`)
	"dotnet.codeLens.enableTestsCodeLens": true,

	// Show regular expressions in completion list.
	"dotnet.completion.provideRegexCompletions": "true",

	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. (Previously `omnisharp.enableImportCompletion`)
	"dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,

	// Perform automatic object name completion for the members that you have recently selected.
	"dotnet.completion.showNameCompletionSuggestions": "true",

	// Automatically show completion list in argument lists
	"dotnet.completion.triggerCompletionInArgumentLists": "true",

	// Enable this setting to reduce visual distractions in your editor. Information problems will be reported as hints and only be visible when the code actions popup is open.
	"dotnet.diagnostics.reportInformationAsHint": true,

	// Specifies whether 'using' directives should be grouped and sorted during document formatting. (Previously `omnisharp.organizeImportsOnFormat`)
	"dotnet.formatting.organizeImportsOnFormat": false,

	// Highlight related JSON components under cursor.
	"dotnet.highlighting.highlightRelatedJsonComponents": "true",

	// Highlight related regular expression components under cursor.
	"dotnet.highlighting.highlightRelatedRegexComponents": "true",

	// Show hints for indexers
	"dotnet.inlayHints.enableInlayHintsForIndexerParameters": false,

	// Show hints for literals
	"dotnet.inlayHints.enableInlayHintsForLiteralParameters": false,

	// Show hints for 'new' expressions
	"dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": false,

	// Show hints for everything else
	"dotnet.inlayHints.enableInlayHintsForOtherParameters": false,

	// Display inline parameter name hints
	"dotnet.inlayHints.enableInlayHintsForParameters": false,

	// Suppress hints when parameter names differ only by suffix
	"dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": false,

	// Suppress hints when argument matches parameter name
	"dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": false,

	// Suppress hints when parameter name matches the method's intent
	"dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": false,

	// Enable navigation to decomplied sources.
	"dotnet.navigation.navigateToDecompiledSources": "true",

	// Enable navigation to source link and embedded sources.
	"dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": "true",

	// Show remarks information when display symbol.
	"dotnet.quickInfo.showRemarksInQuickInfo": "true",

	// Search symbols in reference assemblies. It affects features requires symbol searching, such as add imports.
	"dotnet.symbolSearch.searchReferenceAssemblies": true,

	// The insertion location of properties, events, and methods When implement interface or abstract class.
	//  - withOtherMembersOfTheSameKind: Place them with other members of the same kind.
	//  - atTheEnd: Place them at the end.
	"dotnet.typeMembers.memberInsertionLocation": "withOtherMembersOfTheSameKind",

	// Generation behavior of properties when implement interface or abstract class.
	//  - preferThrowingProperties: Prefer throwing properties.
	//  - preferAutoProperties: Prefer auto properties.
	"dotnet.typeMembers.propertyGenerationBehavior": "preferThrowingProperties",

	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// 
	//  - legacy: Uses the legacy diffing algorithm.
	//  - advanced: Uses the advanced diffing algorithm.
	"diffEditor.diffAlgorithm": "advanced",

	// Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.
	"diffEditor.experimental.showEmptyDecorations": true,

	// Controls whether the diff editor should show detected code moves.
	"diffEditor.experimental.showMoves": false,

	// If enabled and the editor uses the inline view, word changes are rendered inline.
	"diffEditor.experimental.useTrueInlineView": false,

	// Controls how many lines are used as context when comparing unchanged regions.
	"diffEditor.hideUnchangedRegions.contextLineCount": 3,

	// Controls whether the diff editor shows unchanged regions.
	"diffEditor.hideUnchangedRegions.enabled": false,

	// Controls how many lines are used as a minimum for unchanged regions.
	"diffEditor.hideUnchangedRegions.minimumLineCount": 3,

	// Controls how many lines are used for unchanged regions.
	"diffEditor.hideUnchangedRegions.revealLineCount": 20,

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// When enabled, the diff editor shows a special gutter for revert and stage actions.
	"diffEditor.renderGutterMenu": true,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// When enabled, the diff editor shows arrows in its glyph margin to revert changes.
	"diffEditor.renderMarginRevertIcon": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// If the diff editor width is smaller than this value, the inline view is used.
	"diffEditor.renderSideBySideInlineBreakpoint": 900,

	// If enabled and the editor width is too small, the inline view is used.
	"diffEditor.useInlineViewWhenSpaceIsLimited": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 500,

	// Controls if the UI should run in a mode where it is optimized for screen readers.
	//  - auto: Use platform APIs to detect when a Screen Reader is attached.
	//  - on: Optimize for usage with a Screen Reader.
	//  - off: Assume a screen reader is not attached.
	"editor.accessibilitySupport": "auto",

	// Controls whether to allow using variable fonts in the editor.
	"editor.allowVariableFonts": true,

	// Controls whether to allow using variable fonts in the editor in the accessibility mode.
	"editor.allowVariableFontsInAccessibilityMode": false,

	// Controls whether to allow using variable line heights in the editor.
	"editor.allowVariableLineHeights": true,

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should automatically close comments after the user adds an opening comment.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose comments.
	//  - beforeWhitespace: Autoclose comments only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingComments": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically auto-indent the pasted content.
	"editor.autoIndentOnPaste": false,

	// Controls whether the editor should automatically auto-indent the pasted content when pasted within a string. This takes effect when autoIndentOnPaste is true.
	"editor.autoIndentOnPasteWithinString": true,

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
	"editor.bracketPairColorization.enabled": true,

	// Controls whether each bracket type has its own independent color pool.
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// Enable triggering `editor.codeActionsOnSave#` when `#files.autoSave` is set to `afterDelay`. Code Actions must be set to `always` to be triggered for window and focus changes.
	"editor.codeActions.triggerOnFocusChange": false,

	// Run Code Actions for the editor on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"source.organizeImports": "explicit" `
	"editor.codeActionsOnSave": {},

	// Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.
	"editor.codeActionWidget.includeNearbyQuickFixes": true,

	// Enable/disable showing group headers in the Code Action menu.
	"editor.codeActionWidget.showHeaders": true,

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to 0, 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Controls the condition to make a color picker appear from a color decorator.
	//  - clickAndHover: Make the color picker appear both on click and hover of the color decorator
	//  - hover: Make the color picker appear on hover of the color decorator
	//  - click: Make the color picker appear on click of the color decorator
	"editor.colorDecoratorsActivatedOn": "clickAndHover",

	// Controls the max number of color decorators that can be rendered in an editor at once.
	"editor.colorDecoratorsLimit": 500,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	//  - off: Smooth caret animation is disabled.
	//  - explicit: Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.
	//  - on: Smooth caret animation is always enabled.
	"editor.cursorSmoothCaretAnimation": "off",

	// Controls the cursor style in insert input mode.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `editor.cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Controls whether inline color decorations should be shown using the default document color provider.
	//  - auto: Show default color decorators only when no extension provides colors decorators.
	//  - always: Always show default color decorators.
	//  - never: Never show default color decorators.
	"editor.defaultColorDecorators": "auto",

	// Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
	//  - null: All active folding range providers
	//  - rheller.alive: Average Lisp VSCode Environment
	//  - bitlang.cobol: IntelliSense, highlighting, snippets, and code browsing for COBOL and more
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csdevkit: Official C# extension from Microsoft
	//  - ms-dotnettools.csharp: Base language support for C#
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - tamasfe.even-better-toml: Fully-featured TOML support
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - haskell.haskell: Haskell language support powered by the Haskell Language Server
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - justusadam.language-haskell: Syntax support for the Haskell programming language.
	//  - ms-vscode.makefile-tools: Provide makefile support in VS Code: C/C++ IntelliSense, build, debug/run.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - ocamllabs.ocaml-platform: Official OCaml language extension for VSCode
	//  - alefragnani.pascal: Pascal language support for Visual Studio Code
	//  - richterger.perl: Language Server and Debugger for Perl
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - mblode.twig-language-2: Snippets, Syntax Highlighting, Hover, and Formatting for Twig
	//  - arthurwang.vsc-prolog: Support for Prolog language
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - Gimly81.fortran: An extension for VS Code which provides support for the Fortran language.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - alefragnani.pascal-formatter: Source code formatter for Pascal
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
	//  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
	//  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	"editor.defaultFoldingRangeProvider": null,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - rheller.alive: Average Lisp VSCode Environment
	//  - bitlang.cobol: IntelliSense, highlighting, snippets, and code browsing for COBOL and more
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csdevkit: Official C# extension from Microsoft
	//  - ms-dotnettools.csharp: Base language support for C#
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - tamasfe.even-better-toml: Fully-featured TOML support
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - haskell.haskell: Haskell language support powered by the Haskell Language Server
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - justusadam.language-haskell: Syntax support for the Haskell programming language.
	//  - ms-vscode.makefile-tools: Provide makefile support in VS Code: C/C++ IntelliSense, build, debug/run.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - ocamllabs.ocaml-platform: Official OCaml language extension for VSCode
	//  - alefragnani.pascal: Pascal language support for Visual Studio Code
	//  - alefragnani.pascal-formatter: Source code formatter for Pascal
	//  - richterger.perl: Language Server and Debugger for Perl
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - mblode.twig-language-2: Snippets, Syntax Highlighting, Hover, and Formatting for Twig
	//  - arthurwang.vsc-prolog: Support for Prolog language
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - Gimly81.fortran: An extension for VS Code which provides support for the Fortran language.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
	//  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
	//  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).
	"editor.dropIntoEditor.enabled": true,

	// Configures the preferred type of edit to use when dropping content.
	// 
	// This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
	"editor.dropIntoEditor.preferences": [],

	// Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.
	//  - afterDrop: Show the drop selector widget after a file is dropped into the editor.
	//  - never: Never show the drop selector widget. Instead the default drop provider is always used.
	"editor.dropIntoEditor.showDropSelector": "afterDrop",

	// Sets whether the EditContext API should be used instead of the text area to power input in the editor.
	"editor.editContext": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Controls whether the tokenization should happen asynchronously on a web worker.
	"editor.experimental.asyncTokenization": true,

	// Controls whether async tokenization should be logged. For debugging only.
	"editor.experimental.asyncTokenizationLogging": false,

	// Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.
	"editor.experimental.asyncTokenizationVerification": false,

	// Controls whether tree sitter parsing should be turned on for css. This will take precedence over `editor.experimental.treeSitterTelemetry` for css.
	"editor.experimental.preferTreeSitter.css": false,

	// Controls whether tree sitter parsing should be turned on for ini. This will take precedence over `editor.experimental.treeSitterTelemetry` for ini.
	"editor.experimental.preferTreeSitter.ini": false,

	// Controls whether tree sitter parsing should be turned on for regex. This will take precedence over `editor.experimental.treeSitterTelemetry` for regex.
	"editor.experimental.preferTreeSitter.regex": false,

	// Controls whether tree sitter parsing should be turned on for typescript. This will take precedence over `editor.experimental.treeSitterTelemetry` for typescript.
	"editor.experimental.preferTreeSitter.typescript": false,

	// Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence.
	"editor.experimental.treeSitterTelemetry": false,

	// Controls whether to use the experimental GPU acceleration to render the editor.
	//  - off: Use regular DOM-based rendering.
	//  - on: Use GPU acceleration.
	"editor.experimentalGpuAcceleration": "off",

	// Controls whether whitespace is rendered with a new, experimental method.
	//  - svg: Use a new rendering method with svgs.
	//  - font: Use a new rendering method with font characters.
	//  - off: Use the stable rendering method.
	"editor.experimentalWhitespaceRendering": "svg",

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on Find in Selection automatically.
	//  - never: Never turn on Find in Selection automatically (default).
	//  - always: Always turn on Find in Selection automatically.
	//  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the Find Widget should search as you type.
	"editor.find.findOnType": true,

	// Controls how the find widget history should be stored
	//  - never: Do not store search history from the find widget.
	//  - workspace: Store search history across the active workspace
	"editor.find.history": "workspace",

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls how the replace widget history should be stored
	//  - never: Do not store history from the replace widget.
	//  - workspace: Store replace history across the active workspace
	"editor.find.replaceHistory": "workspace",

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	//  - never: Never seed search string from the editor selection.
	//  - always: Always seed search string from the editor selection, including word at cursor position.
	//  - selection: Only seed search string from the editor selection.
	"editor.find.seedSearchStringFromSelection": "always",

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls whether the editor automatically collapses import ranges.
	"editor.foldingImportsByDefault": false,

	// The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
	"editor.foldingMaximumRegions": 5000,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 14,

	// Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
	"editor.fontVariations": false,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	//  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show Peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a Peek view
	//  - goto: Go to the primary result and enable Peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	//  - true: Enables bracket pair guides.
	//  - active: Enables bracket pair guides only for the active bracket pair.
	//  - false: Disables bracket pair guides.
	"editor.guides.bracketPairs": false,

	// Controls whether horizontal bracket pair guides are enabled or not.
	//  - true: Enables horizontal guides as addition to vertical bracket pair guides.
	//  - active: Enables horizontal guides only for the active bracket pair.
	//  - false: Disables horizontal bracket pair guides.
	"editor.guides.bracketPairsHorizontal": "active",

	// Controls whether the editor should highlight the active bracket pair.
	"editor.guides.highlightActiveBracketPair": true,

	// Controls whether the editor should highlight the active indent guide.
	//  - true: Highlights the active indent guide.
	//  - always: Highlights the active indent guide even if bracket guides are highlighted.
	//  - false: Do not highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Prefer showing hovers above the line, if there's space.
	"editor.hover.above": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.
	"editor.hover.hidingDelay": 300,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// The number of spaces used for indentation or `"tabSize"` to use the value from `editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation` is on.
	"editor.indentSize": "tabSize",

	// Enables the inlay hints in the editor.
	//  - on: Inlay hints are enabled
	//  - onUnlessPressed: Inlay hints are showing by default and hide when holding Ctrl+Alt
	//  - offUnlessPressed: Inlay hints are hidden by default and show when holding Ctrl+Alt
	//  - off: Inlay hints are disabled
	"editor.inlayHints.enabled": "on",

	// Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
	"editor.inlayHints.fontFamily": "",

	// Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
	"editor.inlayHints.fontSize": 0,

	// Maximum overall length of inlay hints, for a single line, before they get truncated by the editor. Set to `0` to never truncate
	"editor.inlayHints.maximumLength": 43,

	// Enables the padding around the inlay hints in the editor.
	"editor.inlayHints.padding": false,

	// Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.
	"editor.inlineCompletionsAccessibilityVerbose": false,

	// Controls whether showing a suggestion will shift the code to make space for the suggestion inline.
	"editor.inlineSuggest.edits.allowCodeShifting": "always",

	// Controls whether larger suggestions can be shown side by side.
	//  - auto: Larger suggestions will show side by side if there is enough space, otherwise they will be shown below.
	//  - never: Larger suggestions are never shown side by side and will always be shown below.
	"editor.inlineSuggest.edits.renderSideBySide": "auto",

	// Controls whether the suggestion will show as collapsed until jumping to it.
	"editor.inlineSuggest.edits.showCollapsed": false,

	// Controls whether to automatically show inline suggestions in the editor.
	"editor.inlineSuggest.enabled": true,

	// Suppresses inline completions for specified extension IDs -- comma separated.
	"editor.inlineSuggest.experimental.suppressInlineSuggestions": "",

	// Controls whether to trigger a command when the inline suggestion provider changes.
	"editor.inlineSuggest.experimental.triggerCommandOnProviderChange": true,

	// Controls the font family of the inline suggestions.
	"editor.inlineSuggest.fontFamily": "default",

	// Controls when to show the inline suggestion toolbar.
	//  - always: Show the inline suggestion toolbar whenever an inline suggestion is shown.
	//  - onHover: Show the inline suggestion toolbar when hovering over an inline suggestion.
	//  - never: Never show the inline suggestion toolbar.
	"editor.inlineSuggest.showToolbar": "onHover",

	// Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.
	"editor.inlineSuggest.suppressSuggestions": false,

	// Controls whether to show syntax highlighting for inline suggestions in the editor.
	"editor.inlineSuggest.syntaxHighlightingEnabled": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Defines the bracket symbols that increase or decrease the indentation.
	"editor.language.brackets": null,

	// Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
	"editor.language.colorizedBracketPairs": null,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the Code Action lightbulb in the editor.
	//  - off: Disable the code action menu.
	//  - onCode: Show the code action menu when the cursor is on lines with code.
	//  - on: Show the code action menu when the cursor is on lines with code or on empty lines.
	"editor.lightbulb.enabled": "onCode",

	// Controls the line height. 
	//  - Use 0 to automatically compute the line height from the font size.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is hidden automatically.
	"editor.minimap.autohide": false,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Defines the regular expression used to find section headers in comments. The regex must contain a named match group `label` (written as `(?<label>.+)`) that encapsulates the section header, otherwise it will not work. Optionally you can include another match group named `separator`. Use \n in the pattern to match multi-line headers.
	"editor.minimap.markSectionHeaderRegex": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls the font size of section headers in the minimap.
	"editor.minimap.sectionHeaderFontSize": 9,

	// Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.
	"editor.minimap.sectionHeaderLetterSpacing": 1,

	// Controls whether MARK: comments are shown as section headers in the minimap.
	"editor.minimap.showMarkSectionHeaders": true,

	// Controls whether named regions are shown as section headers in the minimap.
	"editor.minimap.showRegionSectionHeaders": true,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Controls the max number of cursors that can be in an active editor at once.
	"editor.multiCursorLimit": 10000,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether occurrences should be highlighted across open files.
	//  - off: Does not highlight occurrences.
	//  - singleFile: Highlights occurrences only in the current file.
	//  - multiFile: Experimental: Highlights occurrences across all valid open files.
	"editor.occurrencesHighlight": "singleFile",

	// Controls the delay in milliseconds after which occurrences are highlighted.
	"editor.occurrencesHighlightDelay": 0,

	// Controls the cursor style in overtype input mode.
	"editor.overtypeCursorStyle": "block",

	// Controls whether pasting should overtype.
	"editor.overtypeOnPaste": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": true,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether you can paste content in different ways.
	"editor.pasteAs.enabled": true,

	// Configures the preferred type of edit to use when pasting content.
	// 
	// This is an ordered list of edit kinds. The first available edit of a preferred kind will be used.
	"editor.pasteAs.preferences": [],

	// Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.
	//  - afterPaste: Show the paste selector widget after content is pasted into the editor.
	//  - never: Never show the paste selector widget. Instead the default pasting behavior is always used.
	"editor.pasteAs.showPasteSelector": "afterPaste",

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the `editor.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": true,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": "on",

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Control whether inline suggestions are announced by a screen reader.
	"editor.screenReaderAnnounceInlineSuggestion": true,

	// Controls the visibility of the horizontal scrollbar.
	//  - auto: The horizontal scrollbar will be visible only when necessary.
	//  - visible: The horizontal scrollbar will always be visible.
	//  - hidden: The horizontal scrollbar will always be hidden.
	"editor.scrollbar.horizontal": "auto",

	// The height of the horizontal scrollbar.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// When set, the horizontal scrollbar will not increase the size of the editor's content.
	"editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": false,

	// Controls whether clicks scroll by page or jump to click position.
	"editor.scrollbar.scrollByPage": false,

	// Controls the visibility of the vertical scrollbar.
	//  - auto: The vertical scrollbar will be visible only when necessary.
	//  - visible: The vertical scrollbar will always be visible.
	//  - hidden: The vertical scrollbar will always be hidden.
	"editor.scrollbar.vertical": "auto",

	// The width of the vertical scrollbar.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 4,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Controls whether the editor will scroll when the middle button is pressed.
	"editor.scrollOnMiddleClick": false,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.
	"editor.smartSelect.selectSubwords": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls if surround-with-snippets or file template snippets show as Code Actions.
	"editor.snippets.codeActions.enabled": true,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double-clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.
	"editor.stickyScroll.defaultModel": "outlineModel",

	// Shows the nested current scopes during the scroll at the top of the editor.
	"editor.stickyScroll.enabled": true,

	// Defines the maximum number of sticky lines to show.
	"editor.stickyScroll.maxLineCount": 5,

	// Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.
	"editor.stickyScroll.scrollWithEditor": true,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.
	"editor.suggest.matchOnWordStartOnly": true,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether to preview the suggestion outcome in the editor.
	"editor.suggest.preview": false,

	// Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.
	//  - always: Always select a suggestion when automatically triggering IntelliSense.
	//  - never: Never select a suggestion when automatically triggering IntelliSense.
	//  - whenTriggerCharacter: Select a suggestion only when triggering IntelliSense from a trigger character.
	//  - whenQuickSuggestion: Select a suggestion only when triggering IntelliSense as you type.
	"editor.suggest.selectionMode": "always",

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `deprecated`-suggestions.
	"editor.suggest.showDeprecated": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget.
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": false,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "first",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// Controls whether the editor receives tabs or defers them to the workbench for navigation.
	"editor.tabFocusMode": false,

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Defines allowed characters that are not being highlighted.
	"editor.unicodeHighlight.allowedCharacters": {},

	// Unicode characters that are common in allowed locales are not being highlighted.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// Controls whether characters in comments should also be subject to Unicode highlighting.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// Controls whether characters in strings should also be subject to Unicode highlighting.
	"editor.unicodeHighlight.includeStrings": true,

	// Controls whether characters that just reserve space or have no width at all are highlighted.
	"editor.unicodeHighlight.invisibleCharacters": true,

	// Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Spaces and tabs are inserted and deleted in alignment with tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document and from which documents they are computed.
	//  - off: Turn off Word Based Suggestions.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestions": "matchingDocuments",

	// Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
	//  - normal: Use the default line break rule.
	//  - keepAll: Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
	"editor.wordBreak": "normal",

	// 
	"editor.wordSegmenterLocales": null,

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Whether the inline chat also renders an accessible diff viewer for its changes.
	//  - auto: The accessible diff viewer is based on screen reader mode being enabled.
	//  - on: The accessible diff viewer is always enabled.
	//  - off: The accessible diff viewer is never enabled.
	"inlineChat.accessibleDiffView": "auto",

	// Whether to use the next version of inline chat.
	"inlineChat.enableV2": false,

	// Whether to finish an inline chat session when typing outside of changed regions.
	"inlineChat.finishOnType": false,

	// Whether to hide the inline chat widget after making a request. When enabled, the widget hides after a request has been made and instead the chat overlay shows. When hidden, the widget can always be shown again with the inline chat keybinding or from the chat overlay widget. *Note* that this setting requires `inlineChat.enableV2` to be enabled.
	"inlineChat.hideOnRequest": false,

	// Whether holding the inline chat keybinding will automatically enable speech recognition.
	"inlineChat.holdToSpeech": true,

	// Whether empty lines show a hint to generate code with inline chat.
	"inlineChat.lineEmptyHint": false,

	// Whether lines that are dominated by natural language or pseudo code show a hint to continue with inline chat. For instance, `class Person with name and hobbies` would show a hint to continue with chat.
	"inlineChat.lineNaturalLanguageHint": true,

	// Run a series of Code Actions for a notebook on save. Code Actions must be specified and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, Code Actions will only be run when the file is saved explicitly. Example: `"notebook.source.organizeImports": "explicit"`
	"notebook.codeActionsOnSave": {},

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the Source Control view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the Source Control view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls whether the Source Control view should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element.
	"scm.compactFolders": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls the default Source Control repository changes sort order when viewed as a list.
	//  - name: Sort the repository changes by file name.
	//  - path: Sort the repository changes by path.
	//  - status: Sort the repository changes by Source Control status.
	"scm.defaultViewSortKey": "path",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff Peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls whether a pattern is used for the diff decorations in gutter.
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
	//  - true: Ignore leading and trailing whitespace.
	//  - false: Do not ignore leading and trailing whitespace.
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// Controls which badges are shown in the Source Control Graph view. The badges are shown on the right side of the graph indicating the names of history item groups.
	//  - all: Show badges of all history item groups in the Source Control Graph view.
	//  - filter: Show only the badges of history item groups used as a filter in the Source Control Graph view.
	"scm.graph.badges": "filter",

	// Controls whether the Source Control Graph view will load the next page of items when you scroll to the end of the list.
	"scm.graph.pageOnScroll": true,

	// The number of items to show in the Source Control Graph view by default and when loading more items.
	"scm.graph.pageSize": 50,

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the maximum number of lines that the input will auto-grow to.
	"scm.inputMaxLineCount": 10,

	// Controls the minimum number of lines that the input will auto-grow from.
	"scm.inputMinLineCount": 1,

	// Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the `scm.alwaysShowRepositories` setting is enabled, and in the Source Control Repositories view.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls the sort order of the repositories in the source control repositories view.
	//  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
	//  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
	//  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
	"scm.repositories.sortOrder": "discovery time",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the Source Control view.
	"scm.showActionButton": true,

	// Controls whether an action button can be shown in the Source Control input.
	"scm.showInputActionButton": true,

	// Controls the default working set to use when switching to a source control history item group that does not have a working set.
	//  - empty: Use an empty working set when switching to a source control history item group that does not have a working set.
	//  - current: Use the current working set when switching to a source control history item group that does not have a working set.
	"scm.workingSets.default": "current",

	// Controls whether to store editor working sets when switching between source control history item groups.
	"scm.workingSets.enabled": false,

	// A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.
	"security.allowedUNCHosts": [],

	// If enabled, a dialog will ask for confirmation whenever a local file or workspace is about to open through a protocol handler.
	"security.promptForLocalFileProtocolHandling": true,

	// If enabled, a dialog will ask for confirmation whenever a remote file or workspace is about to open through a protocol handler.
	"security.promptForRemoteFileProtocolHandling": true,

	// If enabled, only allows access to UNC host names that are allowed by the `security.allowedUNCHosts` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.
	"security.restrictUNCAccess": true,

	// Controls when the restricted mode banner is shown.
	//  - always: Show the banner every time an untrusted workspace is open.
	//  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
	//  - never: Do not show the banner when an untrusted workspace is open.
	"security.workspace.trust.banner": "untilDismissed",

	// Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
	"security.workspace.trust.emptyWindow": true,

	// Controls whether or not Workspace Trust is enabled within VS Code.
	"security.workspace.trust.enabled": true,

	// Controls when the startup prompt to trust a workspace is shown.
	//  - always: Ask for trust every time an untrusted workspace is opened.
	//  - once: Ask for trust the first time an untrusted workspace is opened.
	//  - never: Do not ask for trust when an untrusted workspace is opened.
	"security.workspace.trust.startupPrompt": "once",

	// Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
	//  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
	//  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
	//  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.
	"accessibility.dimUnfocused.enabled": false,

	// The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when `accessibility.dimUnfocused.enabled` is enabled.
	"accessibility.dimUnfocused.opacity": 0.75,

	// Controls whether the Accessible View is hidden.
	"accessibility.hideAccessibleView": false,

	// Controls the height of editor tabs. Also applies to the title control bar when `workbench.editor.showTabs` is not set to `multiple`.
	"window.density.editorTabHeight": "default",

	// Controls the behavior of clicking an Activity Bar icon in the workbench. This value is ignored when `workbench.activityBar.location` is not set to `default`.
	//  - toggle: Hide the Primary Side Bar if the clicked item is already visible.
	//  - focus: Focus the Primary Side Bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.
	//  - default: Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary Side Bar.
	//  - top: Show the Activity Bar on top of the Primary and Secondary Side Bars.
	//  - bottom: Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.
	//  - hidden: Hide the Activity Bar in the Primary and Secondary Side Bars.
	"workbench.activityBar.location": "default",

	// Controls whether to automatically resume available working changes stored in the cloud for the current workspace.
	//  - onReload: Automatically resume available working changes from the cloud on window reload.
	//  - off: Never attempt to resume working changes from the cloud.
	"workbench.cloudChanges.autoResume": "onReload",

	// Controls whether to prompt the user to store working changes in the cloud when using Continue Working On.
	//  - prompt: Prompt the user to sign in to store working changes in the cloud with Continue Working On.
	//  - off: Do not store working changes in the cloud with Continue Working On unless the user has already turned on Cloud Changes.
	"workbench.cloudChanges.continueOn": "prompt",

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench when `window.autoDetectColorScheme` is not enabled.
	"workbench.colorTheme": "Default Dark Modern",

	// Controls where the command palette should ask chat questions.
	//  - chatView: Ask chat questions in the Chat view.
	//  - quickChat: Ask chat questions in Quick Chat.
	"workbench.commandPalette.experimental.askChatLocation": "chatView",

	// Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.
	"workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,

	// Controls whether the command palette should have a list of commonly used commands.
	"workbench.commandPalette.experimental.suggestCommands": false,

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// Controls whether to always show the editor actions, even when the editor group is not active.
	"workbench.editor.alwaysShowEditorActions": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by a user gesture (for example drag and drop), but not by default. Consequently, the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editor.chatSession": true,
		"workbench.editorinputs.searchEditorInput": false,
		"workbench.editor.processExplorer": true,
		"notebookOutputEditor": false,
		"jupyter-notebook": false,
		"repl": false,
		"workbench.editors.gettingStartedInput": false,
		"terminalEditor": true,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"jsProfileVisualizer.heapsnapshot.table": false,
		"ast-editor": false,
		"cm-files-editor": false,
		"decompiled.javaClass": false,
		"java.formatterSettingsEditor": false,
		"workbench.input.interactive": false,
		"mainThreadWebview-markdown.preview": false,
		"mainThreadWebview-simpleBrowser.view": true,
		"mainThreadWebview-browserPreview": true
	},

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls whether the centered layout tries to maintain constant width when the window is resized.
	"workbench.editor.centeredLayoutFixedWidth": false,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether the custom workbench editor labels should be applied.
	"workbench.editor.customLabels.enabled": true,

	// Controls the rendering of the editor label. Each __Item__ is a pattern that matches a file path. Both relative and absolute file paths are supported. The relative path must include the WORKSPACE_FOLDER (e.g `WORKSPACE_FOLDER/src/**.tsx` or `*/src/**.tsx`). Absolute patterns must start with a `/`. In case multiple patterns match, the longest matching path will be picked. Each __Value__ is the template for the rendered editor when the __Item__ matches. Variables are substituted based on the context:
	// - `${dirname}`: name of the folder in which the file is located (e.g. `WORKSPACE_FOLDER/folder/file.txt -> folder`).
	// - `${dirname(N)}`: name of the nth parent folder in which the file is located (e.g. `N=2: WORKSPACE_FOLDER/static/folder/file.txt -> WORKSPACE_FOLDER`). Folders can be picked from the start of the path by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.txt -> WORKSPACE_FOLDER`). If the __Item__ is an absolute pattern path, the first folder (`N=-1`) refers to the first folder in the absolute path, otherwise it corresponds to the workspace folder.
	// - `${filename}`: name of the file without the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> file`).
	// - `${extname}`: the file extension (e.g. `WORKSPACE_FOLDER/folder/file.txt -> txt`).
	// - `${extname(N)}`: the nth extension of the file separated by '.' (e.g. `N=2: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext1`). Extension can be picked from the start of the extension by using negative numbers (e.g. `N=-1: WORKSPACE_FOLDER/folder/file.ext1.ext2.ext3 -> ext2`).
	// 
	// Example: `"**/static/**/*.html": "${filename} - ${dirname} (${extname})"` will render a file `WORKSPACE_FOLDER/static/folder/file.html` as `file - folder (html)`.
	"workbench.editor.customLabels.patterns": {},

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// The default editor for files detected as binary. If undefined, the user will be presented with a picker.
	"workbench.editor.defaultBinaryEditor": "",

	// Controls how the editor group is resized when double clicking on a tab. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	//  - maximize: All other editor groups are hidden and the current editor group is maximized to take up the entire editor area.
	//  - expand: The editor group takes as much space as possible by making all other editor groups as small as possible.
	//  - off: No editor group is resized when double clicking on a tab.
	"workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",

	// Controls if editors can be dragged out of the window to open them in a new window. Press and hold the `Alt` key while dragging to toggle this dynamically.
	"workbench.editor.dragToOpenWindow": true,

	// Controls where the editor actions are shown.
	//  - default: Show editor actions in the window title bar when `workbench.editor.showTabs` is set to `none`. Otherwise, editor actions are shown in the editor tab bar.
	//  - titleBar: Show editor actions in the window title bar. If `window.customTitleBarVisibility` is set to `never`, editor actions are hidden.
	//  - hidden: Editor actions are not shown.
	"workbench.editor.editorActionsLocation": "default",

	// Controls if the empty editor text hint should be visible in the editor.
	"workbench.editor.empty.hint": "text",

	// Controls whether preview mode is used when editors open. There is a maximum of one preview mode editor per editor group. This editor displays its filename in italics on its tab or title label and in the Open Editors view. Its contents will be replaced by the next editor opened in preview mode. Making a change in a preview mode editor will persist it, as will a double-click on its label, or the 'Keep Open' option in its label context menu. Opening a file from Explorer with a double-click persists its editor immediately.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (via double-click or editing). When enabled, hold Ctrl before selection to open an editor as a non-preview. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether editors are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is not set to multiple.
	"workbench.editor.highlightModifiedTabs": false,

	// Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
	"workbench.editor.historyBasedLanguageDetection": true,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
	"workbench.editor.languageDetection": true,

	// When enabled, shows a Status bar Quick Fix when the editor language doesn't match detected content language.
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
	"workbench.editor.limit.excludeDirty": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
	//  - default: Navigate across all opened editors and editor groups.
	//  - editorGroup: Navigate only in editors of the active editor group.
	//  - editor: Navigate only in the active editor.
	"workbench.editor.navigationScope": "default",

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// When enabled, displays pinned tabs in a separate row above all other tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	"workbench.editor.pinnedTabsOnSeparateRow": false,

	// When enabled, a language detection model that takes into account editor history will be given higher precedence.
	"workbench.editor.preferHistoryBasedLanguageDetection": false,

	// Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.
	//  - keyboardAndMouse: Always prevent closing the pinned editor when using mouse middle click or keyboard.
	//  - keyboard: Prevent closing the pinned editor when using the keyboard.
	//  - mouse: Prevent closing the pinned editor when using mouse middle click.
	//  - never: Never prevent closing a pinned editor.
	"workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",

	// Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, such as when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	"workbench.editor.scrollToSwitchTabs": false,

	// Preserves the most recent editor view state (such as scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
	"workbench.editor.sharedViewState": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show as individual tabs, one single large tab or if the title area should not be shown.
	//  - multiple: Each editor is displayed as a tab in the editor title area.
	//  - single: The active editor is displayed as a single large tab in the editor title area.
	//  - none: The editor title area is not displayed.
	"workbench.editor.showTabs": "multiple",

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	//  - vertical: Editors are positioned from top to bottom.
	//  - horizontal: Editors are positioned from left to right.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the size of editor groups when splitting them.
	//  - auto: Splits the active editor group to equal parts, unless all editor groups are already in equal parts. In that case, splits all the editor groups to equal parts.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "auto",

	// Controls the visibility of the tab close action button.
	"workbench.editor.tabActionCloseVisibility": true,

	// Controls the position of the editor's tabs action buttons (close, unpin). This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	"workbench.editor.tabActionLocation": "right",

	// Controls the visibility of the tab unpin action button.
	"workbench.editor.tabActionUnpinVisibility": true,

	// Controls the size of editor tabs. This value is ignored when `workbench.editor.showTabs` is not set to `multiple`.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	//  - fixed: Make all tabs the same size, while allowing them to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the maximum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
	"workbench.editor.tabSizingFixedMaxWidth": 160,

	// Controls the minimum width of tabs when `workbench.editor.tabSizing` size is set to `fixed`.
	"workbench.editor.tabSizingFixedMinWidth": 50,

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "name",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is not set to '`multiple`'.
	"workbench.editor.wrapTabs": false,

	// Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `"*.hex": "hexEditor.hexedit"`). These have precedence over the default behavior.
	"workbench.editorAssociations": {},

	// Controls the minimum size of a file in MB before asking for confirmation when opening in the editor. Note that this setting may not apply to all editor types and environments.
	"workbench.editorLargeFileConfirmation": 1024,

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// Controls whether to automatically store available working changes in the cloud for the current workspace. This setting has no effect in the web.
	//  - onShutdown: Automatically store current working changes in the cloud on window close.
	//  - off: Never attempt to automatically store working changes in the cloud.
	"workbench.experimental.cloudChanges.autoStore": "off",

	// Controls whether to surface cloud changes which partially match the current session.
	"workbench.experimental.cloudChanges.partialMatches.enabled": false,

	// Controls whether to render the Share action next to the command center when `window.commandCenter` is `true`.
	"workbench.experimental.share.enabled": false,

	// Configure the browser to use for opening http or https links externally. This can either be the name of the browser (`edge`, `chrome`, `firefox`) or an absolute path to the browser's executable. Will use the system default if not set.
	"workbench.externalBrowser": "",

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - vscode-great-icons
	"workbench.iconTheme": "vs-seti",

	// Controls whether the layout control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
	"workbench.layoutControl.enabled": true,

	// Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
	//  - menu: Shows a single button with a dropdown of layout options.
	//  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
	//  - both: Shows both the dropdown and toggle buttons.
	"workbench.layoutControl.type": "both",

	// Controls the type of matching used when searching lists and trees in the workbench.
	//  - fuzzy: Use fuzzy matching when searching.
	//  - contiguous: Use contiguous matching when searching.
	"workbench.list.defaultFindMatchType": "fuzzy",

	// Controls the default find mode for lists and trees in the workbench.
	//  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter elements when searching.
	"workbench.list.defaultFindMode": "highlight",

	// Scrolling speed multiplier when pressing `Alt`.
	"workbench.list.fastScrollSensitivity": 5,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.
	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether clicks in the scrollbar scroll page by page.
	"workbench.list.scrollByPage": false,

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.
	"workbench.list.typeNavigationMode": "automatic",

	// Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.enabled": true,

	// Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files from the local file history. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.exclude": {},

	// Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
	"workbench.localHistory.maxFileEntries": 50,

	// Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.maxFileSize": 256,

	// Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
	"workbench.localHistory.mergeWindow": 10,

	// Controls whether the navigation control is shown in the custom title bar. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
	"workbench.navigationControl.enabled": true,

	// Controls the default location of the panel (Terminal, Debug Console, Output, Problems) in a new workspace. It can either show at the bottom, top, right, or left of the editor area.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Controls whether activity items in the panel title are shown as label or icon.
	"workbench.panel.showLabels": true,

	// Specifies the color theme when system color mode is dark and `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark Modern",

	// Specifies the color theme when in high contrast dark mode and `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the color theme when in high contrast light mode and `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// Specifies the color theme when system color mode is light and `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light Modern",

	// Specifies the product icon theme used.
	//  - Default: Default
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls whether the workbench should render with fewer animations.
	//  - on: Always render with reduced motion.
	//  - off: Do not render with reduced motion
	//  - auto: Render with reduced motion based on OS configuration.
	"workbench.reduceMotion": "auto",

	// When enabled, remote extensions recommendations will be shown in the Remote Indicator menu.
	"workbench.remoteIndicator.showExtensionRecommendations": true,

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Controls the default visibility of the secondary side bar in workspaces or empty windows opened for the first time.
	//  - hidden: The secondary side bar is hidden by default.
	//  - visibleInWorkspace: The secondary side bar is visible by default if a workspace is opened.
	//  - visible: The secondary side bar is visible by default.
	"workbench.secondarySideBar.defaultVisibility": "visibleInWorkspace",

	// Controls whether activity items in the secondary side bar title are shown as label or icon. This setting only has an effect when `workbench.activityBar.location` is not set to `top`.
	"workbench.secondarySideBar.showLabels": true,

	// Configure settings to be applied for all profiles.
	"workbench.settings.applyToAllProfiles": [],

	// Determines which Settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the Settings editor Table of Contents while searching. If this setting is being changed in the Settings editor, the setting will take effect after the search query is modified.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking on a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether the AI search results toggle is shown in the search bar in the Settings editor after doing a search and once AI search results are available.
	"workbench.settings.showAISearchToggle": false,

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
	//  - newUntitledFile: Open a new untitled text file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	//  - terminal: Open a new terminal in the editor area.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls whether sticky scrolling is enabled in trees.
	"workbench.tree.enableStickyScroll": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// Controls the number of sticky elements displayed in the tree when `workbench.tree.enableStickyScroll` is enabled.
	"workbench.tree.stickyScrollMaxItemCount": 7,

	// When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// If an extension requests a hidden view to be shown, display a clickable status bar indicator instead.
	"workbench.view.showQuietly": {},

	// Deprecated, use the global `workbench.reduceMotion`.
	// When enabled, reduce motion in welcome page.
	"workbench.welcomePage.preferReducedMotion": false,

	// When enabled, an extension's walkthrough will open upon install of the extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// **Note:** _This option is only used for console projects launched with the `dotnet` debug configuration type_.
	// 
	// Indicates which console the target program should be launched into. See https://aka.ms/VSCode-CS-LaunchJson-Console for more information.
	//  - internalConsole: The target process's console input (stdin) and output (stdout/stderr) are routed through the VS Code Debug Console.
	//  - integratedTerminal: The target process will run inside VS Code's integrated terminal.
	//  - externalTerminal: The target process will run inside its own external terminal. When using this mode, you will need to switch focus between Visual Studio Code and the external terminal window.
	"csharp.debug.console": "internalConsole",

	// Flag to enable stepping over Properties and Operators. This option defaults to `true`.
	"csharp.debug.enableStepFiltering": true,

	// When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.
	"csharp.debug.expressionEvaluationOptions.allowFastEvaluate": true,

	// When true (the default state), the debugger will automatically call property `get` methods and other implicit function calls.
	"csharp.debug.expressionEvaluationOptions.allowImplicitFuncEval": true,

	// When true (the default state), the debugger will automatically call `ToString` to format objects. This option has no effect if `allowImplicitFuncEval` is `false`.
	"csharp.debug.expressionEvaluationOptions.allowToString": true,

	// When true, the debugger will show raw structure of objects in variables windows.
	"csharp.debug.expressionEvaluationOptions.showRawValues": false,

	// When enabled (the default), the debugger only displays and steps into user code ("My Code"), ignoring system code and other code that is optimized or that does not have debugging symbols. [More information](https://aka.ms/VSCode-CS-LaunchJson-JustMyCode)
	"csharp.debug.justMyCode": true,

	// Flag to determine if stdout text from the launching the web browser should be logged to the output window. This option defaults to `true`.
	"csharp.debug.logging.browserStdOut": true,

	// Controls if a message is logged when the target process calls a 'Console.Read*' API and stdin is redirected to the console.
	"csharp.debug.logging.consoleUsageMessage": true,

	// Controls if API calls to Microsoft.VisualStudio.Debugger.Engine/vsdebugeng.h should be printed to the output window. This option defaults to `none`.
	//  - none: Disable tracing API calls
	//  - error: Print failures from debugger API calls.
	//  - all: Print all debugger API calls. This is very verbose.
	"csharp.debug.logging.diagnosticsLog.debugEngineAPITracing": "none",

	// Flag to determine whether verbose tracing for events raised by the underlying runtime should be enabled. This option defaults to `false`.
	"csharp.debug.logging.diagnosticsLog.debugRuntimeEventTracing": false,

	// Controls which messages are printed to the output window from the debugger's dispatcher. If not specified, this will default to `none` unless one of the verbose log settings are enabled (`debugEngineAPITracing`, `debugRuntimeEventTracing`, `expressionEvaluationTracing` or `startDebuggingTracing`), in which case the default changes to `normal`.
	//  - none: Do not print additional diagnostic messages.
	//  - error: Print error-level diagnostic messages.
	//  - important: Print important diagnostic messages.
	//  - normal: Print all non-verbose diagnostic messages.
	"csharp.debug.logging.diagnosticsLog.dispatcherMessages": "none",

	// Flag to determine whether verbose tracing for expression evaluation should be enabled. This option defaults to `false`.
	"csharp.debug.logging.diagnosticsLog.expressionEvaluationTracing": false,

	// Flag to determine whether DAP protocol messages exchanged between the C# debugger and the UI should be logged to the output window. This option defaults to `false`.
	"csharp.debug.logging.diagnosticsLog.protocolMessages": false,

	// Flag to determine whether verbose tracing for start debugging should be enabled. This option defaults to `false`.
	"csharp.debug.logging.diagnosticsLog.startDebuggingTracing": false,

	// If true, protocol message logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took. This option defaults to `false`.
	"csharp.debug.logging.elapsedTiming": false,

	// The setting 'logging.engineLogging' has been deprecated in favor of 'logging.diagnosticsLog.protocolMessages'.
	// 
	"csharp.debug.logging.engineLogging": false,

	// Flag to determine whether exception messages should be logged to the output window. This option defaults to `true`.
	"csharp.debug.logging.exceptions": true,

	// Flag to determine whether module load events should be logged to the output window. This option defaults to `true`.
	"csharp.debug.logging.moduleLoad": true,

	// Controls if a message is logged when the target process exits, or debugging is stopped. This option defaults to `true`.
	"csharp.debug.logging.processExit": true,

	// Flag to determine whether program output should be logged to the output window when not using an external console. This option defaults to `true`.
	"csharp.debug.logging.programOutput": true,

	// Controls if a message is logged when a thread in the target process exits. This option defaults to `false`.
	"csharp.debug.logging.threadExit": false,

	// Flag to require current source code to match the pdb. This option defaults to `true`.
	"csharp.debug.requireExactSource": true,

	// Maps build-time paths to local source locations. All instances of build-time path will be replaced with the local source path.
	// 
	// Example:
	// 
	// `{"<build-path>":"<local-source-path>"}`
	"csharp.debug.sourceFileMap": {},

	// If true, the debugger should stop at the entry point of the target. This option defaults to `false`.
	"csharp.debug.stopAtEntry": false,

	// If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. [More information](https://aka.ms/VSCode-CS-LaunchJson-SuppressJITOptimizations)
	"csharp.debug.suppressJITOptimizations": false,

	// Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.
	"csharp.debug.symbolOptions.cachePath": "",

	// Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.
	// 
	// This property is ignored unless 'mode' is set to 'loadAllButExcluded'.
	"csharp.debug.symbolOptions.moduleFilter.excludedModules": [],

	// Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.
	// 
	// This property is ignored unless 'mode' is set to 'loadOnlyIncluded'.
	"csharp.debug.symbolOptions.moduleFilter.includedModules": [],

	// If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.
	// 
	// This property is ignored unless 'mode' is set to 'loadOnlyIncluded'.
	"csharp.debug.symbolOptions.moduleFilter.includeSymbolsNextToModules": true,

	// If true, for any module NOT in the 'includedModules' array, the debugger will attempt to download symbols when it detects symbols are needed, such as when trying to step into the module. This option defaults to 'true'.
	// 
	// This property is ignored unless 'mode' is set to 'loadOnlyIncluded'.
	"csharp.debug.symbolOptions.moduleFilter.includeSymbolsOnDemand": true,

	// Controls which of the two basic operating modes the module filter operates in.
	//  - loadAllButExcluded: Load symbols for all modules unless the module is in the 'excludedModules' array.
	//  - loadOnlyIncluded: Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting.
	"csharp.debug.symbolOptions.moduleFilter.mode": "loadAllButExcluded",

	// If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.
	"csharp.debug.symbolOptions.searchMicrosoftSymbolServer": false,

	// If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.
	"csharp.debug.symbolOptions.searchNuGetOrgSymbolServer": false,

	// Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.
	"csharp.debug.symbolOptions.searchPaths": [],

	// Options to use with the debugger when launching for unit test debugging. (Previously `csharp.unitTestDebuggingOptions`)
	"dotnet.unitTestDebuggingOptions": {},

	// Path to the .runsettings file which should be used when running unit tests. (Previously `omnisharp.testRunSettings`)
	"dotnet.unitTests.runSettingsPath": "",

	// If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, `workbench.preferredDarkColorTheme#` is used, else `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
	"window.autoDetectHighContrast": true,

	// Controls the border color of the window. Set to `default` to respect Windows settings, `off` to disable or to a specific color in Hex, RGB, RGBA, HSL, HSLA format. This requires Windows to have the 'Show accent color on title bars and window borders' enabled and is ignored when `window.titleBarStyle` is set to `native`.
	"window.border": "default",

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Show command launcher together with the window title. This setting only has an effect when `window.customTitleBarVisibility` is not set to `never`.
	"window.commandCenter": true,

	// Controls whether to show a confirmation dialog before closing a window or quitting the application.
	//  - always: Always ask for confirmation.
	//  - keyboardOnly: Only ask for confirmation if a keybinding was used.
	//  - never: Never explicitly ask for confirmation.
	"window.confirmBeforeClose": "never",

	// Controls whether a confirmation dialog shows asking to save or discard an opened untitled workspace in the window when switching to another workspace. Disabling the confirmation dialog will always discard the untitled workspace.
	"window.confirmSaveUntitledWorkspace": true,

	// Adjust the appearance of the window controls to be native by the OS, custom drawn or hidden. Changes require a full restart to apply.
	"window.controlsStyle": "native",

	// Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
	"window.customMenuBarAltFocus": true,

	// Adjust when the custom title bar should be shown. The custom title bar can be hidden when in full screen mode with `windowed`. The custom title bar can only be hidden in non full screen mode with `never` when `window.titleBarStyle` is set to `native`.
	//  - auto: Automatically changes custom title bar visibility.
	//  - windowed: Hide custom titlebar in full screen. When not in full screen, automatically change custom title bar visibility.
	//  - never: Hide custom titlebar when `window.titleBarStyle` is set to `native`.
	"window.customTitleBarVisibility": "auto",

	// Adjust the appearance of dialogs to be native by the OS or custom.
	"window.dialogStyle": "native",

	// If enabled, this setting will close the window when the application icon in the title bar is double-clicked. The window will not be able to be dragged by the icon. This setting is effective only if `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
	"window.enableMenuBarMnemonics": true,

	// Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar.
	//  - classic: Menu is displayed at the top of the window and only hidden in full screen mode.
	//  - visible: Menu is always visible at the top of the window even in full screen mode.
	//  - toggle: Menu is hidden but can be displayed at the top of the window via the Alt key.
	//  - hidden: Menu is always hidden.
	//  - compact: Menu is displayed as a compact button in the side bar. This value is ignored when `window.titleBarStyle#` is `native` and `#window.menuStyle` is either `native` or `inherit`.
	"window.menuBarVisibility": "classic",

	// Adjust the menu style to either be native by the OS, custom, or inherited from the title bar style defined in `window.titleBarStyle`. This also affects the context menu appearance. Changes require a full restart to apply.
	//  - custom: Use the custom menu.
	//  - native: Use the native menu. This is ignored when `window.titleBarStyle` is set to `custom`.
	//  - inherit: Matches the menu style to the title bar style defined in `window.titleBarStyle`.
	"window.menuStyle": "inherit",

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the Default profile if no active window exists.
	"window.newWindowProfile": null,

	// Controls whether files should open in a new window when using a command line or file dialog.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "on",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows and editors within are being restored when opening.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows together with editors that were previously opened.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line). If a file is opened, it will replace any of the editors that were previously opened in a window.
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the current context such as the opened workspace or active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the workspace with optional remote name and workspace indicator if applicable (e.g. myFolder, myRemoteFolder [SSH] or myWorkspace (Workspace)).
	// - `${rootNameShort}`: shortened name of the workspace without suffixes (e.g. myFolder, myRemoteFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${profileName}`: name of the profile in which the workspace is opened (e.g. Data Science (Profile)). Ignored if default profile is used.
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: an indicator for when the active editor has unsaved changes.
	// - `${focusedView}`: the name of the view that is currently focused.
	// - `${activeRepositoryName}`: the name of the active repository (e.g. vscode).
	// - `${activeRepositoryBranchName}`: the name of the active branch in the active repository (e.g. main).
	// - `${activeEditorState}`: provides information about the state of the active editor (e.g. modified). This will be appended by default when in screen reader mode with `accessibility.windowTitleOptimized` enabled.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",

	// Adjust the appearance of the window title bar to be native by the OS or custom. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " - ",

	// Adjust the default zoom level for all windows. Each increment above `0` (e.g. `1`) or below (e.g. `-1`) represents zooming `20%` larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity. See `window.zoomPerWindow` for configuring if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window.
	"window.zoomLevel": 0,

	// Controls if the 'Zoom In' and 'Zoom Out' commands apply the zoom level to all windows or only the active window. See `window.zoomLevel` for configuring a default zoom level for all windows.
	"window.zoomPerWindow": true,

	// Configure [glob patterns](https://aka.ms/vscode-glob-patterns) of file associations to languages (for example `"*.extension": "html"`). Patterns will match on the absolute path of a file if they contain a path separator and will match on the name of the file otherwise. These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
	"files.autoGuessEncoding": false,

	// Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
	//  - off: An editor with changes is never automatically saved.
	//  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
	//  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that have no errors reported in them at the time the auto save is triggered. Only applies when `files.autoSave` is enabled.
	"files.autoSaveWhenNoErrors": false,

	// When enabled, will limit [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors to files that are inside the opened workspace. Only applies when `files.autoSave` is enabled.
	"files.autoSaveWorkspaceFilesOnly": false,

	// List of character set encodings that the editor should attempt to guess in the order they are listed. In case it cannot be determined, `files.encoding` is respected
	//  - utf8: UTF-8
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - cp1125: Cyrillic (CP 1125)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - cp950: Traditional Chinese (Big5)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - gb2312: Simplified Chinese (GB 2312)
	"files.candidateGuessEncodings": [],

	// The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Default path for file dialogs, overriding user's home path. Only used in the absence of a context-specific path, such as most recently opened file or folder.
	"files.dialog.defaultPath": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - cp1125: Cyrillic (CP 1125)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders. For example, the File Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude#` setting to define search-specific excludes. Refer to the `#explorer.excludeGitIgnore` setting for ignoring files based on your `.gitignore`.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// [Hot Exit](https://aka.ms/vscode-hot-exit) controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from being marked as read-only if they match as a result of the `files.readonlyInclude` setting. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. Files from readonly file system providers will always be read-only independent of this setting.
	"files.readonlyExclude": {},

	// Marks files as read-only when their file permissions indicate as such. This can be overridden via `files.readonlyInclude#` and `#files.readonlyExclude` settings.
	"files.readonlyFromPermissions": false,

	// Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to mark as read-only. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths. You can exclude matching paths via the `files.readonlyExclude` setting. Files from readonly file system providers will always be read-only independent of this setting.
	"files.readonlyInclude": {},

	// Controls if files that were part of a refactoring are saved automatically
	"files.refactoring.autoSave": true,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog for opening and saving files and folders. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// When enabled, trailing whitespace will be removed from multiline strings and regexes will be removed on save or when executing 'editor.action.trimTrailingWhitespace'. This can cause whitespace to not be trimmed from lines when there isn't up-to-date token information.
	"files.trimTrailingWhitespaceInRegexAndStrings": true,

	// Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) to exclude from file watching. Paths can either be relative to the watched folder or absolute. Glob patterns are matched relative from the watched folder. When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
	"files.watcherInclude": [],

	// Enables XAML tools when using C# Dev Kit
	"dotnet.enableXamlTools": true,

	// Forces projects to load with the C# extension only.  This can be useful when using legacy project types that are not supported by C# Dev Kit. (Requires window reload)
	"dotnet.preferCSharpExtension": false,

	// Sets a path where MSBuild binary logs are written to when loading projects, to help diagnose loading errors.
	"dotnet.projects.binaryLogPath": null,

	// Enables automatic NuGet restore if the extension detects assets are missing.
	"dotnet.projects.enableAutomaticRestore": true,

	// Enables the preview "file-based programs" (dotnet run app.cs) experience.
	"dotnet.projects.enableFileBasedPrograms": false,

	// Allows overriding the folder path for built in components of the language server (for example, override the .roslynDevKit path in the extension directory to use locally built components)
	"dotnet.server.componentPaths": {},

	// Sets a folder path where crash dumps are written to if the language server crashes.  Must be writeable by the user.
	"dotnet.server.crashDumpPath": null,

	// Override for path to language server --extension arguments
	"dotnet.server.extensionPaths": null,

	// Specifies the absolute path to the server (LSP or O#) executable. When left empty the version pinned to the C# Extension is used. (Previously `omnisharp.path`)
	"dotnet.server.path": "",

	// Specifies a timeout (in ms) for the client to successfully start and connect to the language server.
	"dotnet.server.startTimeout": 120000,

	// Suppresses error toasts from showing up if the server encounters a recoverable error.
	"dotnet.server.suppressLspErrorToasts": false,

	// Suppress warning toasts from showing up if the active document is outside the open workspace.
	"dotnet.server.suppressMiscellaneousFilesToasts": false,

	// Configure the language server to use .NET server garbage collection.  Server garbage collection generally provides better performance at the expensive of higher memory consumption.
	"dotnet.server.useServerGC": true,

	// Passes the --debug flag when launching the server to allow a debugger to be attached. (Previously `omnisharp.waitForDebugger`)
	"dotnet.server.waitForDebugger": false,

	// Enable Razor cohosting.
	"razor.languageServer.cohostingEnabled": false,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": "",

	// Enable combined design time/runtime code generation for Razor files
	"razor.languageServer.forceRuntimeCodeGeneration": true,

	// Suppresses error toasts from showing up if the server encounters a recoverable error.
	"razor.languageServer.suppressLspErrorToasts": true,

	// Use the new Razor formatting engine.
	"razor.languageServer.useNewFormattingEngine": true,

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Options for customizing the keyboard overlay in screencast mode.
	"screencastMode.keyboardOptions": {
		"showKeys": true,
		"showKeybindings": true,
		"showCommands": true,
		"showCommandGroups": false,
		"showSingleEditorCursorMoves": true
	},

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether a window should restore to Zen Mode if it was exited in Zen Mode.
	"zenMode.restore": true,

	// Controls whether turning on Zen Mode should show multiple editor tabs, a single editor tab, or hide the editor title area completely.
	//  - multiple: Each editor is displayed as a tab in the editor title area.
	//  - single: The active editor is displayed as a single large tab in the editor title area.
	//  - none: The editor title area is not displayed.
	"zenMode.showTabs": "multiple",

	// Controls whether notifications do not disturb mode should be enabled while in Zen Mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Controls whether the Explorer should automatically open a file when it is dropped into the explorer
	"explorer.autoOpenDroppedFile": true,

	// Controls whether the Explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Configure paths or [glob patterns](https://aka.ms/vscode-glob-patterns) for excluding files and folders from being revealed and selected in the Explorer when they are opened. Glob patterns are always evaluated relative to the path of the workspace folder unless they are absolute paths.
	"explorer.autoRevealExclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},

	// Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the Explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether the Explorer should ask for confirmation when pasting native files and folders.
	"explorer.confirmPasteNative": true,

	// Controls whether the Explorer should ask for confirmation when undoing.
	//  - verbose: Explorer will prompt before all undo operations.
	//  - default: Explorer will prompt before destructive undo operations.
	//  - light: Explorer will not prompt before undo operations when focused.
	"explorer.confirmUndo": "default",

	// The path separation character used when copying file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyPathSeparator": "auto",

	// The path separation character used when copying relative file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyRelativePathSeparator": "auto",

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the Explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the Explorer.
	"explorer.enableDragAndDrop": true,

	// Controls whether the Explorer should support undoing file and folder operations.
	"explorer.enableUndo": true,

	// Controls whether entries in .gitignore should be parsed and excluded from the Explorer. Similar to `files.exclude`.
	"explorer.excludeGitIgnore": false,

	// Controls whether the Explorer should expand multi-root workspaces containing only one folder during initialization
	"explorer.expandSingleFolderWorkspaces": true,

	// Controls whether file nesting is enabled in the Explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
	"explorer.fileNesting.enabled": true,

	// Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
	"explorer.fileNesting.expand": true,

	// Controls nesting of files in the Explorer. `explorer.fileNesting.enabled` must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
	// - `${capture}`: Matches the resolved value of the `*` from the parent pattern
	// - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
	// - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
	// - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
	// - `*`:  Matches any string, may only be used once per child pattern
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock",
		"*.cbl": "MFU*$(basename).cpy,Test$(basename).cpy",
		"*.CBL": "MFU*$(basename).cpy,Test$(basename).cpy",
		"*.cob": "MFU*$(basename).cpy,Test$(basename).cpy",
		"*.COB": "MFU*$(basename).cpy,Test$(basename).cpy"
	},

	// Controls which naming strategy to use when giving a new name to a duplicated Explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number.
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number.
	//  - disabled: Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file.
	"explorer.incrementalNaming": "simple",

	// The minimum number of editor slots pre-allocated in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
	"explorer.openEditors.minVisible": 0,

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
	//  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// The initial maximum number of editors shown in the Open Editors pane. Exceeding this limit will show a scroll bar and allow resizing the pane to display more items.
	"explorer.openEditors.visible": 9,

	// Controls the property-based sorting of files and folders in the Explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
	//  - default: Files and folders are sorted by their names. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
	//  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
	//  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
	"explorer.sortOrder": "default",

	// Controls the lexicographic sorting of file and folder names in the Explorer.
	//  - default: Uppercase and lowercase names are mixed together.
	//  - upper: Uppercase names are grouped together before lowercase names.
	//  - lower: Lowercase names are grouped together before uppercase names.
	//  - unicode: Names are sorted in Unicode order.
	"explorer.sortOrderLexicographicOptions": "default",

	// Controls whether the file and folder sort order, should be reversed.
	"explorer.sortOrderReverse": false,

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Array of custom symbol names for which CodeLens should be disabled.
	"csharp.referencesCodeLens.filteredSymbols": [],

	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": true,

	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,

	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,

	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Switches to use the Omnisharp server for language features when enabled (requires restart). This option will not be honored with C# Dev Kit installed.
	"dotnet.server.useOmnisharp": false,

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// Paths to a local download of the .NET CLI to use for running any user code.
	"omnisharp.dotNetCliPaths": [],

	// Specifies the path to a dotnet installation directory to use instead of the default system one. This only influences the dotnet installation to use for hosting the OmniSharp server itself. Example: "/home/username/mycustomdotnetdirectory".
	"omnisharp.dotnetPath": "",

	// Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results.
	"omnisharp.enableAsyncCompletion": false,

	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,

	// Enables support for the experimental language protocol based engine (requires reload to setup bindings correctly)
	"omnisharp.enableLspDriver": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useModernNet" is set to false, instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": "",

	// The exclude pattern used by OmniSharp to find all project files.
	"omnisharp.projectFilesExcludePattern": "**/node_modules/**,**/.git/**,**/bower_components/**",

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifies whether to include preview versions of the .NET SDK when determining which version to use for project loading. Applies when "useModernNet" is set to true.
	"omnisharp.sdkIncludePrereleases": true,

	// Specifies the path to a .NET SDK installation to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: /home/username/dotnet/sdks/6.0.300.
	"omnisharp.sdkPath": "",

	// Specifies the version of the .NET SDK to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: 6.0.300.
	"omnisharp.sdkVersion": "",

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Use OmniSharp build for .NET 6. This version _does not_ support non-SDK-style .NET Framework projects, including Unity. SDK-style Framework, .NET Core, and .NET 5+ projects should see significant performance improvements.
	"omnisharp.useModernNet": true,

	// Specifies whether to commit tag helper and component elements with a space.
	"razor.completion.commitElementsWithSpace": false,

	// Forces the extension to run in a mode that enables local Razor.VSCode development.
	"razor.devmode": false,

	// Forces the open brace after an @code or @functions directive to be on the following line.
	"razor.format.codeBlockBraceOnNextLine": false,

	// Enable/disable default Razor formatter.
	"razor.format.enable": true,

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": "",

	// The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
	"java.configuration.workspaceCacheLimit": 90,

	// This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
	// Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
	"java.home": null,

	// [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
	// 
	// **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
	"java.jdt.ls.androidSupport.enabled": "auto",

	// Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
	// 
	// On Windows, backslashes must be escaped, i.e.
	// "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-21.0_5"
	"java.jdt.ls.java.home": null,

	// [Experimental] Specify whether to enable Javac-based compilation in the language server. Requires running this extension with Java 24
	"java.jdt.ls.javac.enabled": "off",

	// Whether to load lombok processors from project classpath
	"java.jdt.ls.lombokSupport.enabled": true,

	// Specify whether to automatically add Protobuf output source directories to the classpath.
	// 
	// **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
	"java.jdt.ls.protobufSupport.enabled": true,

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable",

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
	"java.sharedIndexes.enabled": "auto",

	// Specifies a common index location for all workspaces. See default values as follows:
	//  
	// Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
	//  
	// macOS: `"~/Library/Caches/.jdt/index"`
	//  
	// Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
	"java.sharedIndexes.location": "",

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,

	// Controls the positioning of the actionbar on rows in the Search view.
	//  - auto: Position the actionbar to the right when the Search view is narrow, and immediately after the content when the Search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Controls whether search file decorations should use badges.
	"search.decorations.badges": true,

	// Controls whether search file decorations should use colors.
	"search.decorations.colors": true,

	// Controls the default search result view mode.
	//  - tree: Shows search results as a tree.
	//  - list: Shows search results as a list.
	"search.defaultViewMode": "list",

	// Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and file search in quick open. To exclude files from the recently opened list in quick open, patterns must be absolute (for example `**/node_modules/**`). Inherits all glob patterns from the `files.exclude` setting.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Show notebook editor rich content results for closed notebooks. Please refresh your search results after changing this setting.
	"search.experimental.closedNotebookRichContentResults": false,

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// This setting is deprecated. You can drag the search icon to a new location instead.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
	"search.maxResults": 20000,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the Search view, or in a search editor.
	//  - view: Search in the Search view, either in the panel or side bars.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls whether the last typed input to Quick Search should be restored when opening it the next time.
	"search.quickAccess.preserveInput": false,

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// Number of threads to use for searching. When set to 0, the engine automatically determines this value.
	"search.ripgrep.maxThreads": 0,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double-clicking a result in a search editor.
	//  - selectWord: Double-clicking selects the word under the cursor.
	//  - goToLocation: Double-clicking opens the result in the active editor group.
	//  - openLocationToSide: Double-clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When a search is triggered, focus the Search Editor results instead of the Search Editor input.
	"search.searchEditor.focusResultsOnSearch": false,

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Configure effect of single-clicking a result in a search editor.
	//  - default: Single-clicking does nothing.
	//  - peekDefinition: Single-clicking opens a Peek Definition window.
	"search.searchEditor.singleClickBehaviour": "default",

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Enable keyword suggestions in the Search view.
	"search.searchView.keywordSuggestions": false,

	// Controls the behavior of the semantic search results displayed in the Search view.
	//  - manual: Only request semantic search results manually.
	//  - runOnEmpty: Request semantic results automatically only when text search results are empty.
	//  - auto: Request semantic results automatically with every search.
	"search.searchView.semanticSearchBehavior": "manual",

	// Update the search query to the editor's selected text when focusing the Search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use your global gitignore file (for example, from `$HOME/.config/git/ignore`) when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useParentIgnoreFiles": false,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// Controls whether use of Electron's fetch implementation instead of Node.js' should be enabled. All local extensions will get Electron's fetch implementation for the global fetch API.
	"http.electronFetch": false,

	// Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implementation. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.experimental.systemCertificatesV2": false,

	// Controls whether Node.js' fetch implementation should be extended with additional support. Currently proxy support (`http.proxySupport#`) and system certificates (`#http.systemCertificates#`) are added when the corresponding settings are enabled. When during [remote development](https://aka.ms/vscode-remote) the `#http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.fetchAdditionalSupport": true,

	// Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.noProxy": [],

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.proxyAuthorization": null,

	// Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.proxyKerberosServicePrincipal": "",

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. On Windows and macOS, a reload of the window is required after turning this off. When during [remote development](https://aka.ms/vscode-remote) the `http.useLocalProxyConfiguration` setting is disabled this setting can be configured in the local and the remote settings separately.
	"http.systemCertificates": true,

	// Controls whether in the remote extension host the local proxy configuration should be used. This setting only applies as a remote setting during [remote development](https://aka.ms/vscode-remote).
	"http.useLocalProxyConfiguration": true,

	// Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.
	"keyboard.mapAltGrToCtrlAlt": false,

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Enable to download and install new VS Code versions in the background on Windows.
	"update.enableWindowsBackgroundUpdates": true,

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// Controls whether the comment thread should collapse when the thread is resolved.
	"comments.collapseOnResolve": true,

	// Controls whether the comments widget scrolls or expands.
	"comments.maxHeight": true,

	// This setting is deprecated in favor of `comments.openView`.
	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Controls when the comments view should open.
	//  - never: The comments view will never be opened.
	//  - file: The comments view will open when a file with comments is active.
	//  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
	//  - firstFileUnresolved: If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active.
	"comments.openView": "firstFile",

	// Controls whether a confirmation dialog is shown when collapsing a comment thread.
	//  - whenHasUnsubmittedComments: Show a confirmation dialog when collapsing a comment thread with unsubmitted comments.
	//  - never: Never show a confirmation dialog when collapsing a comment thread.
	"comments.thread.confirmOnCollapse": "whenHasUnsubmittedComments",

	// Determines if relative time will be used in comment timestamps (ex. '1 day ago').
	"comments.useRelativeTime": true,

	// Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command "Comments: Toggle Editor Commenting" toggles comments.
	"comments.visible": true,

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.
	//  - auto: When in screen reader optimized mode, automatically expand lazy variables.
	//  - on: Always automatically expand lazy variables.
	//  - off: Never automatically expand lazy variables.
	"debug.autoExpandLazyVariables": "auto",

	// At the end of a debug session, all the read-only tabs associated with that session will be closed
	"debug.closeReadonlyTabsOnEnd": false,

	// Controls whether to confirm when the window closes if there are active debug sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are debug sessions.
	"debug.confirmOnExit": "never",

	// Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Controls if the Debug Console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the Debug Console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the Debug Console.
	"debug.console.fontSize": 14,

	// Controls if the Debug Console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls the maximum number of lines in the Debug Console.
	"debug.console.maximumLines": 10000,

	// Controls if the lines should wrap in the Debug Console.
	"debug.console.wordWrap": true,

	// Show Source Code in Disassembly View.
	"debug.disassemblyView.showSourceCode": true,

	// Color of the Status bar when debugger is active.
	"debug.enableStatusBarColor": true,

	// Controls whether the editor should be focused when the debugger breaks.
	"debug.focusEditorOnBreak": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Controls the action to perform when clicking the editor gutter with the middle mouse button.
	//  - logpoint: Add Logpoint.
	//  - conditionalBreakpoint: Add Conditional Breakpoint.
	//  - triggeredBreakpoint: Add Triggered Breakpoint.
	//  - none: Don't perform any action.
	"debug.gutterMiddleClickAction": "logpoint",

	// Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `debug.toolBarLocation` is not `docked`.
	"debug.hideLauncherWhileDebugging": false,

	// Hide the warning shown when a `preLaunchTask` has been running for a while.
	"debug.hideSlowPreLaunchWarning": false,

	// Show variable values inline in editor while debugging.
	//  - on: Always show variable values inline in editor while debugging.
	//  - off: Never show variable values inline in editor while debugging.
	//  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
	"debug.inlineValues": "auto",

	// Controls when the internal Debug Console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnDebugBreak",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug Status bar should be visible.
	//  - never: Never show debug in Status bar
	//  - always: Always show debug in Status bar
	//  - onFirstSessionStart: Show debug in Status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Show variable type in variable pane during debug session
	"debug.showVariableTypes": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `window.commandCenter`), or `hidden`.
	//  - floating: Show debug toolbar in all views.
	//  - docked: Show debug toolbar only in debug views.
	//  - commandCenter: `(Experimental)` Show debug toolbar in the command center.
	//  - hidden: Do not show debug toolbar.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
	"html.autoCreateQuotes": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to `aligned`.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// Keep all existing new lines when formatting.
	"json.format.keepLines": false,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Enable/disable JSON validation.
	"json.validate.enable": true,

	// Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.
	// 
	// The destination path may use the following variables:
	// 
	// - `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.
	// - `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.
	// - `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.
	// - `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.
	// - `${documentExtName}` — The extension of the Markdown document, e.g. `md`.
	// - `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.
	// - `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.
	// - `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.
	// - `${fileName}` — The file name of the dropped file, e.g. `image.png`.
	// - `${fileExtName}` — The extension of the dropped file, e.g. `png`.
	// - `${unixTime}` — The current Unix timestamp in milliseconds.
	// - `${isoTime}` — The current time in ISO 8601 format, e.g. '2025-06-06T08:40:32.123Z'.
	"markdown.copyFiles.destination": {},

	// Controls if files created by drop or paste should overwrite existing files.
	//  - nameIncrementally: If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.
	//  - overwrite: If a file with the same name already exists, overwrite it.
	"markdown.copyFiles.overwriteBehavior": "nameIncrementally",

	// Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.
	// 
	// Use `markdown.copyFiles.destination` to configure where copied dropped files should be created
	//  - mediaFiles: Try to copy external image and video files into the workspace.
	//  - never: Do not copy external files into the workspace.
	"markdown.editor.drop.copyIntoWorkspace": "mediaFiles",

	// Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
	//  - always: Always insert Markdown links.
	//  - smart: Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links.
	//  - never: Never create Markdown links.
	"markdown.editor.drop.enabled": "smart",

	// Snippet used when adding audio to Markdown. This snippet can use the following variables:
	// - `${src}` — The resolved path of the audio  file.
	// - `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.
	"markdown.editor.filePaste.audioSnippet": "<audio controls src=\"${src}\" title=\"${title}\"></audio>",

	// Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.
	// 
	// Use `markdown.copyFiles.destination` to configure where copied files should be created.
	//  - mediaFiles: Try to copy external image and video files into the workspace.
	//  - never: Do not copy external files into the workspace.
	"markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",

	// Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `editor.pasteAs.enabled`.
	//  - always: Always insert Markdown links.
	//  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
	//  - never: Never create Markdown links.
	"markdown.editor.filePaste.enabled": "smart",

	// Snippet used when adding videos to Markdown. This snippet can use the following variables:
	// - `${src}` — The resolved path of the video file.
	// - `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.
	"markdown.editor.filePaste.videoSnippet": "<video controls src=\"${src}\" title=\"${title}\"></video>",

	// Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `editor.pasteAs.enabled`.
	//  - always: Always insert Markdown links.
	//  - smart: Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
	//  - smartWithSelection: Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.
	//  - never: Never create Markdown links.
	"markdown.editor.pasteUrlAsFormattedLink.enabled": "smartWithSelection",

	// Enable/disable a paste option that updates links and reference in text that is copied and pasted between Markdown editors.
	// 
	// To use this feature, after pasting text that contains updatable links, just click on the Paste Widget and select `Paste and update pasted links`.
	"markdown.editor.updateLinksOnPaste.enabled": true,

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Enable highlighting link occurrences in the current document.
	"markdown.occurrencesHighlight.enabled": false,

	// Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.
	//  - auto: For existing paths, try to maintain the file extension style. For new paths, add file extensions.
	//  - includeExtension: Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.
	//  - removeExtension: Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`.
	"markdown.preferredMdPathExtensionStyle": "auto",

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double-click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Convert URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Enable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,

	// Controls the logging level of the Markdown language server.
	"markdown.server.log": "off",

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable path suggestions while writing links in Markdown files.
	"markdown.suggest.paths.enabled": true,

	// Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.
	//  - never: Disable workspace header suggestions.
	//  - onDoubleHash: Enable workspace header suggestions after typing `#` in a path, for example: `[link text](#`.
	//  - onSingleOrDoubleHash: Enable workspace header suggestions after typing either `#` or `#` in a path, for example: `[link text](#` or `[link text](#`.
	"markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",

	// Traces the communication between VS Code and the Markdown language server.
	"markdown.trace.server": "off",

	// Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
	//  - prompt: Prompt on each file move.
	//  - always: Always update links automatically.
	//  - never: Never try to update link and don't prompt.
	"markdown.updateLinksOnFileMove.enabled": "never",

	// Enable updating links when a directory is moved or renamed in the workspace.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,

	// Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],

	// Validate duplicated definitions in the current file.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",

	// Enable all error reporting in Markdown files.
	"markdown.validate.enabled": false,

	// Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fileLinks.enabled": "warning",

	// Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

	// Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fragmentLinks.enabled": "warning",

	// Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
	"markdown.validate.ignoredLinks": [],

	// Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.referenceLinks.enabled": "warning",

	// Validate link definitions that are unused in the current file.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": false,

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
	"java.import.generatesMetadataFilesAtProjectRoot": false,

	// [Experimental] Specifies how to select build configuration files to import. 
	// Note: Currently, `Gradle` projects cannot be partially imported.
	//  - manual: Manually select the build configuration files.
	//  - automatic: Let extension automatically scan and select the build configuration files.
	"java.import.projectSelection": "automatic",

	// Project encoding settings
	//  - ignore: Ignore project encoding settings
	//  - warning: Show warning if a project has no explicit encoding set
	//  - setDefault: Set the default workspace encoding settings
	"java.project.encoding": "ignore",

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named `node_modules` or `.git`. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
	"java.project.resourceFilters": [
		"node_modules",
		"\\.git"
	],

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
	"testing.alwaysRevealTestOnStateChange": false,

	// Configures when the error Peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	//  - never: Never automatically open.
	"testing.automaticallyOpenPeekView": "never",

	// Controls whether to automatically open the Peek view during continuous run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// Controls when the testing view should open.
	//  - neverOpen: Never automatically open the testing views
	//  - openOnTestStart: Open the test results view when tests start
	//  - openOnTestFailure: Open the test result view on any test failure
	//  - openExplorerOnTestStart: Open the test explorer when tests start
	"testing.automaticallyOpenTestResults": "openOnTestStart",

	// Controls the count badge on the Testing icon on the Activity Bar.
	//  - failed: Show the number of failed tests
	//  - off: Disable the testing count badge
	//  - passed: Show the number of passed tests
	//  - skipped: Show the number of skipped tests
	"testing.countBadge": "failed",

	// Configures the colors used for percentages in test coverage bars.
	"testing.coverageBarThresholds": {
		"red": 0,
		"yellow": 60,
		"green": 90
	},

	// Controls whether the coverage toolbar is shown in the editor.
	"testing.coverageToolbarEnabled": false,

	// Controls the action to take when left-clicking on a test decoration in the gutter.
	//  - run: Run the test.
	//  - debug: Debug the test.
	//  - runWithCoverage: Run the test with coverage.
	//  - contextMenu: Open the context menu for more options.
	"testing.defaultGutterClickAction": "run",

	// Configures what percentage is displayed by default for test coverage.
	//  - totalCoverage: A calculation of the combined statement, function, and branch coverage.
	//  - statement: The statement coverage.
	//  - minimum: The minimum of statement, function, and branch coverage.
	"testing.displayedCoveragePercent": "totalCoverage",

	// Controls whether the running test should be followed in the Test Explorer view.
	"testing.followRunningTest": false,

	// Controls whether test decorations are shown in the editor gutter.
	"testing.gutterEnabled": true,

	// Control whether save all dirty editors before running a test.
	"testing.saveBeforeTest": true,

	// Controls whether to show messages from all test runs.
	"testing.showAllMessages": false,

	// Whether test coverage should be down in the File Explorer view.
	"testing.showCoverageInExplorer": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"css.format.braceStyle": "collapse",

	// Enable/disable default CSS formatter.
	"css.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
	"css.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"css.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"css.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before rules and declarations should be preserved.
	"css.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"css.format.spaceAroundSelectorSeparator": false,

	// Show property and value documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of 3, 4, 6 or 8 hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"less.format.braceStyle": "collapse",

	// Enable/disable default LESS formatter.
	"less.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
	"less.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"less.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"less.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before rules and declarations should be preserved.
	"less.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"less.format.spaceAroundSelectorSeparator": false,

	// Show property and value documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of 3, 4, 6 or 8 hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"scss.format.braceStyle": "collapse",

	// Enable/disable default SCSS formatter.
	"scss.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
	"scss.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"scss.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"scss.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before rules and declarations should be preserved.
	"scss.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"scss.format.spaceAroundSelectorSeparator": false,

	// Show property and value documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of 3, 4, 6 or 8 hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// Specify a list of extensions that are allowed to use. This helps maintain a secure and consistent development environment by restricting the use of unauthorized extensions. For more information on how to configure this setting, please visit the [Configure Allowed Extensions](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions) section.
	"extensions.allowed": "*",

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
	//  - true: Download and install updates automatically for all extensions.
	//  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions.
	//  - false: Extensions are not automatically updated.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// Configure an extension to execute in a different extension host process.
	"extensions.experimental.affinity": {},

	// When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout.
	"extensions.experimental.deferredStartupFinishedActivation": false,

	// When enabled, extensions can be searched for via Quick Access and report issues from there.
	"extensions.experimental.issueQuickAccess": true,

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// When enabled, Node.js navigator object is exposed on the global scope.
	"extensions.supportNodeGlobalNavigator": false,

	// Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
	"extensions.supportUntrustedWorkspaces": {},

	// Override the virtual workspaces support of an extension.
	"extensions.supportVirtualWorkspaces": {},

	// When enabled, extensions are verified to be signed before getting installed.
	"extensions.verifySignature": true,

	// Enable web worker extension host.
	//  - true: The Web Worker Extension Host will always be launched.
	//  - false: The Web Worker Extension Host will never be launched.
	//  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
	"extensions.webWorker": "auto",

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Specifies default mojo execution action when no associated metadata can be detected.
	"java.configuration.maven.defaultMojoExecutionAction": "ignore",

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Path to Maven's lifecycle mappings xml
	"java.configuration.maven.lifecycleMappings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Enable/disable test classpath segregation. When enabled, this permits the usage of test resources within a Maven project as dependencies within the compile scope of other projects.
	"java.import.maven.disableTestClasspathFlag": false,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Enable/disable the Maven offline mode.
	"java.import.maven.offline.enabled": false,

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
	"java.import.gradle.annotationProcessing.enabled": true,

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Specify how to enable the annotation-based null analysis.
	"java.compile.nullAnalysis.mode": "interactive",

	// Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnull": [
		"javax.annotation.Nonnull",
		"org.eclipse.jdt.annotation.NonNull",
		"org.springframework.lang.NonNull"
	],

	// Specify the NonNullByDefault annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnullbydefault": [
		"javax.annotation.ParametersAreNonnullByDefault",
		"org.eclipse.jdt.annotation.NonNullByDefault",
		"org.springframework.lang.NonNullApi"
	],

	// Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nullable": [
		"javax.annotation.Nullable",
		"org.eclipse.jdt.annotation.Nullable",
		"org.springframework.lang.Nullable"
	],

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Automatically detect JDKs installed on local machine at startup. If you have specified the same JDK version in `java.configuration.runtimes`, the extension will use that version first.
	"java.configuration.detectJdksAtStart": true,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Enable/disable chain completion support. Chain completions are only available when completions are invoked by the completions shortcut
	"java.completion.chain.enabled": false,

	// Enable/disable the collapse of overloaded methods in completion items. Overrides `java.completion.guessMethodArguments`.
	"java.completion.collapseCompletionItems": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// [Experimental] Select code completion engine
	//  - ecj: Use ECJ-based code completion engine (default)
	//  - dom: Use (highly experimental) JDT DOM-based code completion engine (requires `java.jdt.ls.javac.enabled` to be `on`)
	"java.completion.engine": "ecj",

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],

	// Specify how the arguments will be filled during completion.
	//  - auto: Use 'off' only when using Visual Studio Code - Insiders, other platform will defaults to 'insertBestGuessedArguments'.
	//  - off: Method arguments will not be inserted during completion.
	//  - insertParameterNames: The parameter names will be inserted during completion.
	//  - insertBestGuessedArguments: The best guessed arguments will be inserted during completion according to the code context.
	"java.completion.guessMethodArguments": "auto",

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
	"java.completion.importOrder": [
		"#",
		"java",
		"javax",
		"org",
		"com",
		""
	],

	// [Experimental] Enable/disable lazily resolving text edits for code completion.
	"java.completion.lazyResolveTextEdit.enabled": true,

	// Specify whether to match case for code completion.
	//  - firstLetter: Match case for the first letter when doing completion.
	//  - off: Do not match case when doing completion.
	"java.completion.matchCase": "firstLetter",

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
	"java.completion.postfix.enabled": true,

	// Enable/disable to show the description in signature help.
	"java.signatureHelp.description.enabled": false,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": true,

	// Controls whether code cells in the interactive window are collapsed by default.
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// The limit of notebook output size in kilobytes (KB) where notebook files will no longer be backed up for hot reload. Use 0 for unlimited.
	"notebook.backup.sizeLimit": 10000,

	// When enabled, notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Controls the verbosity of the cell execution time in the cell status bar.
	//  - default: The cell execution duration is visible, with advanced information in the hover tooltip.
	//  - verbose: The cell last execution timestamp and duration are visible, with advanced information in the hover tooltip.
	"notebook.cellExecutionTimeVerbosity": "default",

	// Show available diagnostics for cell failures.
	"notebook.cellFailureDiagnostics": true,

	// Controls where the focus indicator is rendered, either along the cell borders or on the left gutter.
	"notebook.cellFocusIndicator": "gutter",

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Whether the cell toolbar should appear on hover or click.
	"notebook.cellToolbarVisibility": "click",

	// Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
	"notebook.compactView": true,

	// Control whether a confirmation prompt is required to delete a running cell.
	"notebook.confirmDeleteRunningCell": true,

	// Control whether outputs action should be rendered in the output toolbar.
	"notebook.consolidatedOutputButton": true,

	// Control whether extra actions are shown in a dropdown next to the run button.
	"notebook.consolidatedRunButton": false,

	// Defines a default notebook formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - rheller.alive: Average Lisp VSCode Environment
	//  - bitlang.cobol: IntelliSense, highlighting, snippets, and code browsing for COBOL and more
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csdevkit: Official C# extension from Microsoft
	//  - ms-dotnettools.csharp: Base language support for C#
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - tamasfe.even-better-toml: Fully-featured TOML support
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - haskell.haskell: Haskell language support powered by the Haskell Language Server
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - justusadam.language-haskell: Syntax support for the Haskell programming language.
	//  - ms-vscode.makefile-tools: Provide makefile support in VS Code: C/C++ IntelliSense, build, debug/run.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - ocamllabs.ocaml-platform: Official OCaml language extension for VSCode
	//  - alefragnani.pascal: Pascal language support for Visual Studio Code
	//  - alefragnani.pascal-formatter: Source code formatter for Pascal
	//  - richterger.perl: Language Server and Debugger for Perl
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - foxundermoon.shell-format: A formatter for shell scripts, Dockerfile, gitignore, dotenv, /etc/hosts, jvmoptions, and other file types
	//  - mblode.twig-language-2: Snippets, Syntax Highlighting, Hover, and Formatting for Twig
	//  - arthurwang.vsc-prolog: Support for Prolog language
	//  - vscjava.vscode-gradle: Manage Gradle Projects, run Gradle tasks and provide better Gradle file authoring experience in VS Code
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - rangav.vscode-thunder-client: Lightweight Rest API Client for VS Code
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - Gimly81.fortran: An extension for VS Code which provides support for the Fortran language.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.live-server: Hosts a local server in your workspace for you to preview your webpages on.
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - vscode.terminal-suggest: Extension to add terminal completions for zsh, bash, and fish terminals.
	//  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
	//  - ms-dotnettools.vscode-dotnet-runtime: This extension installs and manages different versions of the .NET SDK and Runtime.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-python.vscode-python-envs: Provides a unified python environment experience
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	"notebook.defaultFormatter": null,

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Enable the command to toggle the experimental notebook inline diff editor.
	"notebook.diff.experimental.toggleInline": false,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Whether to render the overview ruler in the diff editor for notebook.
	"notebook.diff.overviewRuler": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// Control whether the notebook editor should allow moving cells through drag and drop.
	"notebook.dragAndDropEnabled": true,

	// Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
	"notebook.editorOptionsCustomizations": {},

	// Enable experimental generate action to create code cell with inline chat enabled.
	"notebook.experimental.generate": true,

	// Enables the incremental saving of notebooks between processes and across Remote connections. When enabled, only the changes to the notebook are sent to the extension host, improving performance for large notebooks and slow network connections.
	"notebook.experimental.remoteSave": false,

	// Customize the Find Widget behavior for searching within notebook cells. When both markup source and markup preview are enabled, the Find Widget will search either the source code or preview based on the current state of the cell.
	"notebook.find.filters": {
		"markupSource": true,
		"markupPreview": true,
		"codeSource": true,
		"codeOutput": true
	},

	// Format a notebook cell upon execution. A formatter must be available.
	"notebook.formatOnCellExecution": false,

	// Format a notebook on save. A formatter must be available and the editor must not be shutting down. When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved explicitly.
	"notebook.formatOnSave.enabled": false,

	// Control whether to render a global toolbar inside the notebook editor.
	"notebook.globalToolbar": true,

	// Control whether the actions on the notebook toolbar should render label or not.
	"notebook.globalToolbarShowLabel": "always",

	// When enabled, the Go to Symbol Quick Pick will display full code symbols from the notebook, as well as Markdown headers.
	"notebook.gotoSymbols.showAllSymbols": true,

	// Control whether to show inline values within notebook code cells after cell execution. Values will remain until the cell is edited, re-executed, or explicitly cleared via the Clear All Outputs toolbar button or the `Notebook: Clear Inline Values` command.
	//  - on: Always show inline values, with a regex fallback if no inline value provider is registered. Note: There may be a performance impact in larger cells if the fallback is used.
	//  - auto: Show inline values only when an inline value provider is registered.
	//  - off: Never show inline values.
	"notebook.inlineValues": "off",

	// When enabled, insert a final new line into the end of code cells when saving a notebook.
	"notebook.insertFinalNewline": false,

	// Control where the insert cell actions should appear.
	//  - betweenCells: A toolbar that appears on hover between cells.
	//  - notebookToolbar: The toolbar at the top of the notebook editor.
	//  - both: Both toolbars.
	//  - hidden: The insert actions don't appear anywhere.
	"notebook.insertToolbarLocation": "both",

	// Controls the display of line numbers in the cell editor.
	"notebook.lineNumbers": "off",

	// Controls the line height in pixels of markdown cells in notebooks. When set to `0`, `normal` will be used
	"notebook.markdown.lineHeight": 0,

	// Controls the font family of rendered markup in notebooks. When left blank, this will fall back to the default workbench font family.
	"notebook.markup.fontFamily": "",

	// Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
	"notebook.markup.fontSize": 0,

	// Experimental. Enables a limited set of multi cursor controls across multiple cells in the notebook editor. Currently supported are core editor actions (typing/cut/copy/paste/composition) and a limited subset of editor commands.
	"notebook.multiCursor.enabled": false,

	// When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// When enabled, notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// When enabled, notebook outline shows code cell symbols. Relies on `notebook.outline.showCodeCells` being enabled.
	"notebook.outline.showCodeCellSymbols": true,

	// When enabled, notebook outline will show only markdown cells containing a header.
	"notebook.outline.showMarkdownHeadersOnly": true,

	// The font family of the output text within notebook cells. When set to empty, the `editor.fontFamily` is used.
	"notebook.output.fontFamily": "",

	// Font size for the output text within notebook cells. When set to 0, `editor.fontSize` is used.
	"notebook.output.fontSize": 0,

	// Line height of the output text within notebook cells.
	//  - When set to 0, editor line height is used.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"notebook.output.lineHeight": 0,

	// Control whether to disable filepath links in the output of notebook cells.
	"notebook.output.linkifyFilePaths": true,

	// Control whether to render error output in a minimal style.
	"notebook.output.minimalErrorRendering": false,

	// Initially render notebook outputs in a scrollable region when longer than the limit.
	"notebook.output.scrolling": false,

	// Controls how many lines of text are displayed in a text output. If `notebook.output.scrolling` is enabled, this setting is used to determine the scroll height of the output.
	"notebook.output.textLineLimit": 30,

	// Controls whether the lines in output should wrap.
	"notebook.output.wordWrap": false,

	// How far to scroll when revealing the next cell upon running notebook.cell.executeAndSelectBelow.
	//  - fullCell: Scroll to fully reveal the next cell.
	//  - firstLine: Scroll to reveal the first line of the next cell.
	//  - none: Do not scroll.
	"notebook.scrolling.revealNextCellOnExecute": "fullCell",

	// Whether the cell status bar should be shown.
	//  - hidden: The cell Status bar is always hidden.
	//  - visible: The cell Status bar is always visible.
	//  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
	"notebook.showCellStatusBar": "visible",

	// Controls when the Markdown header folding arrow is shown.
	//  - always: The folding controls are always visible.
	//  - never: Never show the folding controls and reduce the gutter size.
	//  - mouseover: The folding controls are visible only on mouseover.
	"notebook.showFoldingControls": "mouseover",

	// Experimental. Control whether to render notebook Sticky Scroll headers in the notebook editor.
	"notebook.stickyScroll.enabled": false,

	// Control whether nested sticky lines appear to stack flat or indented.
	//  - flat: Nested sticky lines appear flat.
	//  - indented: Nested sticky lines appear indented.
	"notebook.stickyScroll.mode": "indented",

	// Whether to use separate undo/redo stack for each cell.
	"notebook.undoRedoPerCell": true,

	// Enable the experimental notebook variables view within the debug panel.
	"notebook.variablesView": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// Execute the Interactive Window (REPL) input box with shift+enter, so that enter can be used to create a newline.
	"interactiveWindow.executeWithShiftEnter": false,

	// Prompt to save the interactive window when it is closed. Only new interactive windows will be affected by this setting change.
	"interactiveWindow.promptToSaveOnClose": false,

	// Display a hint in the Interactive Window (REPL) input box to indicate how to execute code.
	"interactiveWindow.showExecutionHint": true,

	// When enabled, slow renderers are automatically profiled.
	"application.experimental.rendererProfiling": true,

	// Whether to generate the 'final' modifer for code actions that create new declarations.
	//  - none: Do not generate final modifier.
	//  - fields: Generate 'final' modifier only for new field declarations.
	//  - variables: Generate 'final' modifier only for new variable declarations.
	//  - all: Generate 'final' modifier for all new declarations.
	"java.codeGeneration.addFinalForNewDeclaration": "none",

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Defines the `smart semicolon` detection. Defaults to `false`.
	"java.edit.smartSemicolonDetection.enabled": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Controls whether to enable telemetry for detailed edit statistics (only sends statistics if general telemetry is enabled).
	"telemetry.editStats.details.enabled": false,

	// Controls whether to enable telemetry for edit statistics (only sends statistics if general telemetry is enabled).
	"telemetry.editStats.enabled": true,

	// Controls whether to show decorations for edit telemetry.
	"telemetry.editStats.showDecorations": false,

	// Controls whether to show the status bar for edit telemetry.
	"telemetry.editStats.showStatusBar": false,

	// When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched
	//  - integrated: Show the integrated terminal action.
	//  - external: Show the external terminal action.
	//  - both: Show both integrated and external terminal actions.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched
	//  - integrated: Show the integrated terminal action.
	//  - external: Show the external terminal action.
	//  - both: Show both integrated and external terminal actions.
	"terminal.sourceControlRepositoriesKind": "integrated",

	// Focus the terminal accessible view when a command is executed.
	"terminal.integrated.accessibleViewFocusOnCommandExecution": false,

	// Preserve the cursor position on reopen of the terminal's accessible view rather than setting it to the bottom of the buffer.
	"terminal.integrated.accessibleViewPreserveCursorPosition": false,

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// An array of strings containing the URI schemes that the terminal is allowed to open links for. By default, only a small subset of possible schemes are allowed for security reasons.
	"terminal.integrated.allowedLinkSchemes": [
		"file",
		"http",
		"https",
		"mailto",
		"vscode",
		"vscode-insiders"
	],

	// Whether to allow menubar mnemonics (for example Alt+F) to trigger the open of the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// The terminal profile to use on Linux for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationProfile.linux": null,

	// The terminal profile to use on macOS for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationProfile.osx": null,

	// The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` (now deprecated) is set.
	"terminal.integrated.automationProfile.windows": null,

	// A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
	// 
	// Remarks:
	// 
	// - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
	// - The message includes escape sequences so the reply might not happen with styled text.
	// - Each reply can only happen once every second.
	// - Use `"\r"` in the reply to mean the enter key.
	// - To unset a default key, set the value to null.
	// - Restart VS Code if new don't apply.
	"terminal.integrated.autoReplies": {},

	// The number of milliseconds to show the bell within a terminal tab when triggered.
	"terminal.integrated.bellDuration": 1000,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.accessibilityHelp
	// - editor.action.toggleTabFocusMode
	// - notification.acceptPrimaryAction
	// - notifications.hideList
	// - notifications.hideToasts
	// - runCommands
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.disconnect
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.rerunForActiveTerminal
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.acceptSelectedSuggestion
	// - workbench.action.terminal.acceptSelectedSuggestionEnter
	// - workbench.action.terminal.chat.cancel
	// - workbench.action.terminal.chat.close
	// - workbench.action.terminal.chat.discard
	// - workbench.action.terminal.chat.feedbackHelpful
	// - workbench.action.terminal.chat.feedbackReportIssue
	// - workbench.action.terminal.chat.feedbackUnhelpful
	// - workbench.action.terminal.chat.insertCommand
	// - workbench.action.terminal.chat.makeRequest
	// - workbench.action.terminal.chat.runCommand
	// - workbench.action.terminal.chat.start
	// - workbench.action.terminal.chat.viewInChat
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyAndClearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
	// - workbench.action.terminal.copyLastCommandOutput
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAccessibleBuffer
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusHover
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.hideSuggestWidget
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.requestCompletions
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.searchWorkspace
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectNextPageSuggestion
	// - workbench.action.terminal.selectNextSuggestion
	// - workbench.action.terminal.selectPrevPageSuggestion
	// - workbench.action.terminal.selectPrevSuggestion
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.suggestToggleDetails
	// - workbench.action.terminal.suggestToggleDetailsFocus
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm when the window closes if there are active terminal sessions. Background terminals like those launched by some extensions will not trigger the confirmation.
	//  - never: Never confirm.
	//  - always: Always confirm if there are terminals.
	//  - hasChildProcesses: Confirm if there are any terminals that have child processes.
	"terminal.integrated.confirmOnExit": "never",

	// Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell. Background terminals like those launched by some extensions will not trigger the confirmation.
	//  - never: Never confirm.
	//  - editor: Confirm if the terminal is in the editor.
	//  - panel: Confirm if the terminal is in the panel.
	//  - always: Confirm if the terminal is either in the editor or panel.
	"terminal.integrated.confirmOnKill": "editor",

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor when the terminal is focused.
	"terminal.integrated.cursorStyle": "block",

	// Controls the style of terminal cursor when the terminal is not focused.
	"terminal.integrated.cursorStyleInactive": "outline",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work when `terminal.integrated.gpuAcceleration` is disabled.
	"terminal.integrated.customGlyphs": true,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls where newly created terminals will appear.
	//  - editor: Create terminals in the editor
	//  - view: Create terminals in the terminal view
	"terminal.integrated.defaultLocation": "view",

	// The default terminal profile on Linux.
	"terminal.integrated.defaultProfile.linux": null,

	// The default terminal profile on macOS.
	"terminal.integrated.defaultProfile.osx": null,

	// The default terminal profile on Windows.
	//  - null: Automatically detect the default
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\usr\bin\bash.exe
	// - args: ['--login','-i']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\WINDOWS\System32\cmd.exe
	// - args: []
	//  - Ubuntu (WSL): $(terminal-ubuntu) Ubuntu (WSL)
	// - path: C:\WINDOWS\System32\wsl.exe
	// - args: ['-d','Ubuntu']
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug
	//  - BitLang COBOL Terminals: $(terminal) BitLang COBOL Terminals
	// - extensionIdentifier: bitlang.cobol
	"terminal.integrated.defaultProfile.windows": null,

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// This is now deprecated. Instead use the `terminal.integrated.enableVisualBell` and `accessibility.signals.terminalBell` settings.
	// 
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in terminals. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	//  - off: Always off.
	//  - on: Always on.
	//  - notRemote: Enable only when not in a remote workspace.
	"terminal.integrated.enableFileLinks": "on",

	// Enables image support in the terminal, this will only work when `terminal.integrated.gpuAcceleration#` is enabled. Both sixel and iTerm's inline image protocol are supported on Linux and macOS. This will only work on Windows for versions of ConPTY >= v2 which is shipped with Windows itself, see also `#terminal.integrated.windowsUseConptyDll`. Images will currently not be restored between window reloads/reconnects.
	"terminal.integrated.enableImages": false,

	// Controls whether to show a warning dialog when pasting multiple lines into the terminal.
	//  - auto: Enable the warning but do not show it when:
	// 
	// - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
	// - The paste is handled by the shell's readline (in the case of pwsh)
	//  - always: Always show the warning if the text contains a new line.
	//  - never: Never show the warning.
	"terminal.integrated.enableMultiLinePasteWarning": "auto",

	// Persist terminal sessions/history for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.
	"terminal.integrated.enableVisualBell": false,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extensions want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.
	//  - terminal: Always focus the terminal.
	//  - accessible-buffer: Always focus the accessible buffer.
	//  - none: Do nothing.
	"terminal.integrated.focusAfterRun": "none",

	// Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls whether font ligatures are enabled in the terminal. Ligatures will only work if the configured `terminal.integrated.fontFamily` supports them.
	"terminal.integrated.fontLigatures.enabled": false,

	// When `terminal.integrated.gpuAcceleration#` is enabled and the particular `#terminal.integrated.fontFamily` cannot be parsed, this is the set of character sequences that will always be drawn together. This allows the use of a fixed set of ligatures even when the font isn't supported.
	"terminal.integrated.fontLigatures.fallbackLigatures": [
		"<--",
		"<---",
		"<<-",
		"<-",
		"->",
		"->>",
		"-->",
		"--->",
		"<==",
		"<===",
		"<<=",
		"<=",
		"=>",
		"=>>",
		"==>",
		"===>",
		">=",
		">>=",
		"<->",
		"<-->",
		"<--->",
		"<---->",
		"<=>",
		"<==>",
		"<===>",
		"<====>",
		"::",
		":::",
		"<~~",
		"</",
		"</>",
		"/>",
		"~~>",
		"==",
		"!=",
		"/=",
		"~=",
		"<>",
		"===",
		"!==",
		"!===",
		"<:",
		":=",
		"*=",
		"*+",
		"<*",
		"<*>",
		"*>",
		"<|",
		"<|>",
		"|>",
		"+*",
		"=*",
		"=:",
		":>",
		"/*",
		"*/",
		"+++",
		"<!--",
		"<!---"
	],

	// Controls what font feature settings are used when ligatures are enabled, in the format of the `font-feature-settings` CSS property. Some examples which may be valid depending on the font:
	// 
	// - `"calt" off, "ss03"`
	// - `"liga" on`
	// - `"calt" off, "dlig" on`
	"terminal.integrated.fontLigatures.featureSettings": "\"calt\" on",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 14,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Controls whether the terminal will leverage the GPU to do its rendering.
	//  - auto: Let VS Code detect which renderer will give the best experience.
	//  - on: Enable GPU acceleration within the terminal.
	//  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
	"terminal.integrated.gpuAcceleration": "auto",

	// Whether to hide the terminal view when the last terminal is closed. This will only happen when the terminal is the only visible view in the view container.
	"terminal.integrated.hideOnLastClosed": true,

	// Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.
	//  - never: Never hide the terminal view on startup.
	//  - whenEmpty: Only hide the terminal when there are no persistent sessions restored.
	//  - always: Always hide the terminal, even when there are persistent sessions restored.
	"terminal.integrated.hideOnStartup": "never",

	// Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\x1b[200~` and `\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.
	"terminal.integrated.ignoreBracketedPasteMode": false,

	// A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls if the first terminal without input will show a hint about available actions when it is focused.
	"terminal.integrated.initialHint": true,

	// Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
	//  - on: Always enabled
	//  - off: Always disabled
	//  - auto: Enabled only for remote workspaces
	"terminal.integrated.localEchoEnabled": "off",

	// Local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// Controls how terminal reacts to middle click.
	//  - default: The platform default to focus the terminal. On Linux this will also paste the selection.
	//  - paste: Paste on middle click.
	"terminal.integrated.middleClickBehavior": "default",

	// When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
	// 
	// - 1: Do nothing and use the standard theme colors.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 4.5,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the terminal when using mouse wheel and holding `Ctrl`.
	"terminal.integrated.mouseWheelZoom": false,

	// When the terminal process must be shut down (for example on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
	// 
	// Caveats:
	// 
	// - Restoring of the process current working directory depends on whether it is supported by the shell.
	// - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
	"terminal.integrated.persistentSessionScrollback": 100,

	// A set of terminal profile customizations for Linux which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
	// 
	// To override an existing profile use its profile name as the key, for example:
	// 
	// ```json
	// "terminal.integrated.profile.linux": {
	//   "bash": null
	// }
	// ```
	// 
	// [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// A set of terminal profile customizations for Mac which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
	// 
	// To override an existing profile use its profile name as the key, for example:
	// 
	// ```json
	// "terminal.integrated.profile.osx": {
	//   "bash": null
	// }
	// ```
	// 
	// [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// A set of terminal profile customizations for Windows which allows adding, removing or changing how terminals are launched. Profiles are made up of a mandatory path, optional arguments and other presentation options.
	// 
	// To override an existing profile use its profile name as the key, for example:
	// 
	// ```json
	// "terminal.integrated.profile.windows": {
	//   "bash": null
	// }
	// ```
	// 
	// [Read more about configuring profiles](https://code.visualstudio.com/docs/terminal/profiles).
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Whether to rescale glyphs horizontally that are a single cell wide but have glyphs that would overlap following cell(s). This typically happens for ambiguous width characters (eg. the roman numeral characters U+2160+) which aren't featured in monospace fonts. Emoji glyphs are never rescaled.
	"terminal.integrated.rescaleOverlappingGlyphs": true,

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	//  - nothing: Do nothing and pass event to terminal.
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// Controls the maximum number of lines the terminal keeps in its buffer. We pre-allocate memory based on this value in order to ensure a smooth experience. As such, as the value increases, so will the amount of memory.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// When shell integration is enabled, adds a decoration for each command.
	//  - both: Show decorations in the gutter (left) and overview ruler (right)
	//  - gutter: Show gutter decorations to the left of the terminal
	//  - overviewRuler: Show overview ruler decorations to the right of the terminal
	//  - never: Do not show decorations
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. 
	// 
	// Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
	// 
	// Supported shells:
	// 
	// - Linux/macOS: bash, fish, pwsh, zsh
	//  - Windows: pwsh, git bash
	// 
	// This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
	// 
	//  Note that the script injection may not work if you have custom arguments defined in the terminal profile, have enabled `editor.accessibilitySupport#`, have a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `#terminal.integrated.shellIntegration.decorationsEnabled`
	"terminal.integrated.shellIntegration.enabled": true,

	// Controls whether to report the shell environment, enabling its use in features such as `terminal.integrated.suggest.enabled`. This may cause a slowdown when printing your shell's prompt.
	"terminal.integrated.shellIntegration.environmentReporting": false,

	// Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
	"terminal.integrated.shellIntegration.history": 100,

	// Whether to show the command guide when hovering over a command in the terminal.
	"terminal.integrated.shellIntegration.showCommandGuide": true,

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Whether to show hovers for links in the terminal output.
	"terminal.integrated.showLinkHover": true,

	// Controls whether the terminal will scroll using an animation.
	"terminal.integrated.smoothScrolling": false,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// Shows the current command at the top of the terminal. This feature requires [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) to be activated. See `terminal.integrated.shellIntegration.enabled`.
	"terminal.integrated.stickyScroll.enabled": false,

	// Defines the maximum number of sticky lines to show. Sticky scroll lines will never exceed 40% of the viewport regardless of this setting.
	"terminal.integrated.stickyScroll.maxLineCount": 5,

	// Controls whether to enable $CDPATH support which exposes children of the folders in the $CDPATH variable regardless of the current working directory. $CDPATH is expected to be semi colon-separated on Windows and colon-separated on other platforms.
	//  - off: Disable the feature.
	//  - relative: Enable the feature and use relative paths.
	//  - absolute: Enable the feature and use absolute paths. This is useful when the shell doesn't natively support `$CDPATH`.
	"terminal.integrated.suggest.cdPath": "absolute",

	// Enables terminal intellisense suggestions (preview) for supported shells (PowerShell v7+, zsh, bash, fish) when `terminal.integrated.shellIntegration.enabled` is set to `true`.
	// 
	// If shell integration is installed manually, `VSCODE_SUGGEST` needs to be set to `1` before calling the shell integration script.
	"terminal.integrated.suggest.enabled": false,

	// Controls whether the shell's inline suggestion should be detected and how it is scored.
	//  - off: Disable the feature.
	//  - alwaysOnTopExceptExactMatch: Enable the feature and sort the inline suggestion without forcing it to be on top. This means that exact matches will be will be above the inline suggestion.
	//  - alwaysOnTop: Enable the feature and always put the inline suggestion on top.
	"terminal.integrated.suggest.inlineSuggestion": "alwaysOnTop",

	// Providers are enabled by default. Omit them by setting the id of the provider to `false`.
	"terminal.integrated.suggest.providers": {
		"terminal-suggest": true,
		"pwsh-shell-integration": true,
		"lsp": true
	},

	// Controls whether suggestions should automatically show up while typing. Also be aware of the `terminal.integrated.suggest.suggestOnTriggerCharacters`-setting which controls if suggestions are triggered by special characters.
	"terminal.integrated.suggest.quickSuggestions": {
		"commands": "on",
		"arguments": "on",
		"unknown": "off"
	},

	// Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result.
	//  - never: Never run on `Enter`.
	//  - exactMatch: Run on `Enter` when the suggestion is typed in its entirety.
	//  - exactMatchIgnoreExtension: Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included.
	//  - always: Always run on `Enter`.
	"terminal.integrated.suggest.runOnEnter": "never",

	// Controls how suggestion selection works in the integrated terminal.
	//  - partial: Partially select a suggestion when automatically triggering IntelliSense. `Tab` can be used to accept the first suggestion, only after navigating the suggestions via `Down` will `Enter` also accept the active suggestion.
	//  - always: Always select a suggestion when automatically triggering IntelliSense. `Enter` or `Tab` can be used to accept the first suggestion.
	//  - never: Never select a suggestion when automatically triggering IntelliSense. The list must be navigated via `Down` before `Enter` or `Tab` can be used to accept the active suggestion.
	"terminal.integrated.suggest.selectionMode": "partial",

	// Controls whether the terminal suggestions status bar should be shown.
	"terminal.integrated.suggest.showStatusBar": true,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"terminal.integrated.suggest.suggestOnTriggerCharacters": true,

	// Determines whether the up arrow key navigates the command history when focus is on the first suggestion and navigation has not yet occurred. When set to false, the up arrow will move focus to the last suggestion instead.
	"terminal.integrated.suggest.upArrowNavigatesHistory": true,

	// A set of windows command executable extensions that will be included as suggestions in the terminal.
	// 
	// Many executables are included by default, listed below:
	// 
	// - bat
	// - cmd
	// - com
	// - exe
	// - jar
	// - js
	// - msi
	// - pl
	// - ps1
	// - py
	// - rb
	// - sh
	// - vbs.
	// 
	// To exclude an extension, set it to `false`
	// 
	// . To include one not in the list, add it and set it to `true`.
	"terminal.integrated.suggest.windowsExecutableExtensions": {},

	// A theme color ID to associate with terminal icons by default.
	"terminal.integrated.tabs.defaultColor": null,

	// A codicon ID to associate with terminal icons by default.
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - git-pull-request-label: $(git-pull-request-label)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - terminal-decoration-success: $(terminal-decoration-success)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle-outline: $(circle-outline)
	//  - circle: $(circle)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - terminal-decoration-incomplete: $(terminal-decoration-incomplete)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - diff-sidebyside: $(diff-sidebyside)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - compare-changes: $(compare-changes)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - git-pull-request-milestone: $(git-pull-request-milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - terminal-decoration-mark: $(terminal-decoration-mark)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - debug-alt: $(debug-alt)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - git-pull-request-reviewer: $(git-pull-request-reviewer)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - git-pull-request-assignee: $(git-pull-request-assignee)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - issue-closed: $(issue-closed)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unknown: $(workspace-unknown)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - terminal-decoration-error: $(terminal-decoration-error)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - blank: $(blank)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-horizontal: $(map-horizontal)
	//  - fold-horizontal: $(fold-horizontal)
	//  - map-filled: $(map-filled)
	//  - map-horizontal-filled: $(map-horizontal-filled)
	//  - fold-horizontal-filled: $(fold-horizontal-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - comment-draft: $(comment-draft)
	//  - send: $(send)
	//  - sparkle: $(sparkle)
	//  - insert: $(insert)
	//  - mic: $(mic)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - coffee: $(coffee)
	//  - snake: $(snake)
	//  - game: $(game)
	//  - vr: $(vr)
	//  - chip: $(chip)
	//  - piano: $(piano)
	//  - music: $(music)
	//  - mic-filled: $(mic-filled)
	//  - repo-fetch: $(repo-fetch)
	//  - copilot: $(copilot)
	//  - lightbulb-sparkle: $(lightbulb-sparkle)
	//  - robot: $(robot)
	//  - sparkle-filled: $(sparkle-filled)
	//  - diff-single: $(diff-single)
	//  - diff-multiple: $(diff-multiple)
	//  - surround-with: $(surround-with)
	//  - share: $(share)
	//  - git-stash: $(git-stash)
	//  - git-stash-apply: $(git-stash-apply)
	//  - git-stash-pop: $(git-stash-pop)
	//  - vscode: $(vscode)
	//  - vscode-insiders: $(vscode-insiders)
	//  - code-oss: $(code-oss)
	//  - run-coverage: $(run-coverage)
	//  - run-all-coverage: $(run-all-coverage)
	//  - coverage: $(coverage)
	//  - github-project: $(github-project)
	//  - map-vertical: $(map-vertical)
	//  - fold-vertical: $(fold-vertical)
	//  - map-vertical-filled: $(map-vertical-filled)
	//  - fold-vertical-filled: $(fold-vertical-filled)
	//  - go-to-search: $(go-to-search)
	//  - percentage: $(percentage)
	//  - sort-percentage: $(sort-percentage)
	//  - attach: $(attach)
	//  - go-to-editing-session: $(go-to-editing-session)
	//  - edit-session: $(edit-session)
	//  - code-review: $(code-review)
	//  - copilot-warning: $(copilot-warning)
	//  - python: $(python)
	//  - copilot-large: $(copilot-large)
	//  - copilot-warning-large: $(copilot-warning-large)
	//  - keyboard-tab: $(keyboard-tab)
	//  - copilot-blocked: $(copilot-blocked)
	//  - copilot-not-connected: $(copilot-not-connected)
	//  - flag: $(flag)
	//  - lightbulb-empty: $(lightbulb-empty)
	//  - symbol-method-arrow: $(symbol-method-arrow)
	//  - copilot-unavailable: $(copilot-unavailable)
	//  - repo-pinned: $(repo-pinned)
	//  - keyboard-tab-above: $(keyboard-tab-above)
	//  - keyboard-tab-below: $(keyboard-tab-below)
	//  - git-pull-request-done: $(git-pull-request-done)
	//  - mcp: $(mcp)
	//  - extensions-large: $(extensions-large)
	//  - layout-panel-dock: $(layout-panel-dock)
	//  - layout-sidebar-left-dock: $(layout-sidebar-left-dock)
	//  - layout-sidebar-right-dock: $(layout-sidebar-right-dock)
	//  - copilot-in-progress: $(copilot-in-progress)
	//  - copilot-error: $(copilot-error)
	//  - copilot-success: $(copilot-success)
	//  - chat-sparkle: $(chat-sparkle)
	//  - search-sparkle: $(search-sparkle)
	//  - edit-sparkle: $(edit-sparkle)
	//  - copilot-snooze: $(copilot-snooze)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	//  - drop-down-button: $(drop-down-button)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - export: $(export)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - newline: $(newline)
	//  - thumbsdown-filled: $(thumbsdown-filled)
	//  - thumbsup-filled: $(thumbsup-filled)
	//  - git-fetch: $(git-fetch)
	//  - lightbulb-sparkle-autofix: $(lightbulb-sparkle-autofix)
	//  - debug-breakpoint-pending: $(debug-breakpoint-pending)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory.
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched.
	// - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.
	// - `${local}`: indicates a local terminal in a remote workspace.
	// - `${process}`: the name of the terminal process.
	// - `${progress}`: the progress state as reported by the `OSC 9;4` sequence.
	// - `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process.
	// - `${task}`: indicates this terminal is associated with a task.
	// - `${shellType}`: the detected shell type.
	// - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.
	// - `${shellPromptInput}`: the shell's full prompt input according to shell integration.
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Controls whether terminal tab statuses support animation (eg. in progress tasks).
	"terminal.integrated.tabs.enableAnimation": true,

	// Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
	"terminal.integrated.tabs.enabled": true,

	// Controls whether focusing the terminal of a tab happens on double or single click.
	//  - singleClick: Focus the terminal when clicking a terminal tab
	//  - doubleClick: Focus the terminal when double-clicking a terminal tab
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Controls whether the terminal tabs view will hide under certain conditions.
	//  - never: Never hide the terminal tabs view
	//  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
	//  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
	//  - left: Show the terminal tabs view to the left of the terminal
	//  - right: Show the terminal tabs view to the right of the terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.tabs.title#` and `#terminal.integrated.tabs.description`.
	"terminal.integrated.tabs.separator": " - ",

	// Controls whether terminal split and kill buttons are displays next to the new terminal button.
	//  - always: Always show the actions
	//  - singleTerminal: Show the actions when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren't visible.
	//  - always: Always show the active terminal
	//  - singleTerminal: Show the active terminal when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the active terminal
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory.
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched.
	// - `${workspaceFolderName}`: the `name` of the workspace in which the terminal was launched.
	// - `${local}`: indicates a local terminal in a remote workspace.
	// - `${process}`: the name of the terminal process.
	// - `${progress}`: the progress state as reported by the `OSC 9;4` sequence.
	// - `${separator}`: a conditional separator (` - `) that only shows when it's surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to the terminal by the process.
	// - `${task}`: indicates this terminal is associated with a task.
	// - `${shellType}`: the detected shell type.
	// - `${shellCommand}`: the command being executed according to shell integration. This also requires high confidence in the detected command line, which may not work in some prompt frameworks.
	// - `${shellPromptInput}`: the shell's full prompt input according to shell integration.
	"terminal.integrated.tabs.title": "${process}",

	// The number of cells in a tab stop.
	"terminal.integrated.tabStopWidth": 8,

	// Controls what version of Unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of Unicode. This is an older version which should work better on older systems.
	//  - 11: Version 11 of Unicode. This version provides better support on modern systems that use modern versions of Unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// Whether to use the experimental conpty.dll (v1.22.250204002) shipped with VS Code, instead of the one bundled with Windows.
	"terminal.integrated.windowsUseConptyDll": false,

	// A string containing all characters to be considered word separators when double-clicking to select word and in the fallback 'word' link detection. Since this is used for link detection, including characters such as `:` that are used when detecting links will cause the line and column part of links like `file:10:5` to be ignored.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’“”|",

	// Enable automatic tasks - note that tasks won't run in an untrusted workspace.
	//  - on: Always
	//  - off: Never
	"task.allowAutomaticTasks": "on",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// On window reload, reconnect to tasks that have problem matchers.
	"task.reconnection": true,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Enable verbose logging for tasks.
	"task.verboseLogging": false,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder. Overwritten by `problems.visibility` when it is off.
	"problems.decorations.enabled": true,

	// Controls the default view mode of the Problems view.
	"problems.defaultViewMode": "tree",

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Controls the order in which problems are navigated.
	//  - severity: Navigate problems ordered by severity
	//  - position: Navigate problems ordered by position
	"problems.sortOrder": "severity",

	// Controls whether the problems are visible throughout the editor and workbench.
	"problems.visibility": true,

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// The list of clean ups to be run on the current document when it's saved or when the cleanup command is issued. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
	"java.cleanup.actions": [
		"renameFileToType"
	],

	// Deprecated, please use 'java.cleanup.actions' instead.
	// 
	"java.cleanup.actionsOnSave": [],

	// Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
	"java.codeAction.sortMembers.avoidVolatileChanges": true,

	// Show quickfixes at the problem or line level.
	"java.quickfix.showAt": "line",

	// Specify whether to replace all the occurrences of the subtype with the new extracted interface.
	"java.refactoring.extract.interface.replace": true,

	// Enable/disable cleanup actions on save.
	"java.saveActions.cleanup": true,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Controls whether Outline items are collapsed or expanded.
	//  - alwaysCollapse: Collapse all items.
	//  - alwaysExpand: Expand all items.
	"outline.collapseItems": "alwaysExpand",

	// Render Outline elements with icons.
	"outline.icons": true,

	// Use badges for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
	"outline.problems.badges": true,

	// Use colors for errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
	"outline.problems.colors": true,

	// Show errors and warnings on Outline elements. Overwritten by `problems.visibility` when it is off.
	"outline.problems.enabled": true,

	// When enabled, Outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled, Outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled, Outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled, Outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled, Outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled, Outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled, Outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled, Outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled, Outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled, Outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled, Outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled, Outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled, Outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled, Outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled, Outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled, Outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled, Outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled, Outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled, Outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled, Outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled, Outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled, Outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled, Outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled, Outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled, Outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled, Outline shows `variable`-symbols.
	"outline.showVariables": true,

	// Enable/disable the implementations code lens for the provided categories.
	//  - none: Disable the implementations code lens
	//  - types: Enable the implementations code lens only for types
	//  - methods: Enable the implementations code lens only for methods
	//  - all: Enable the implementations code lens for types and methods
	"java.implementationCodeLens": "none",

	// Enable/disable inlay hints for parameter names:
	// ```java
	// 
	// Integer.valueOf(/* s: */ '123', /* radix: */ 10)
	//  
	// ```
	//  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
	//  - none: Disable parameter name hints
	//  - literals: Enable parameter name hints only for literal arguments
	//  - all: Enable parameter name hints for literal and non-literal arguments
	"java.inlayHints.parameterNames.enabled": "literals",

	// The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
	//  - `java.lang.Math.*` - All the methods from java.lang.Math.
	//  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
	//  - `*.println(*)` - Methods named as 'println'.
	//  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
	//  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
	"java.inlayHints.parameterNames.exclusions": [],

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include declarations when finding references.
	"java.references.includeDeclarations": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Specifies the scope which must be used for search operation like 
	//  - Find Reference
	//  - Call Hierarchy
	//  - Workspace Symbols
	//  - all: Search on all classpath entries including reference libraries and projects.
	//  - main: All classpath entries excluding test classpath entries.
	"java.search.scope": "all",

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Specifies a list of file patterns for which matching documents should not have their diagnostics reported (eg. '**/Foo.java').
	"java.diagnostic.filter": [],

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies whether to recheck all open Java files for diagnostics when editing a Java file.
	"java.edit.validateAllOpenBuffersOnChanges": false,

	// Specifies whether to reload the sources of the open class files when their source jar files are changed.
	//  - ask: Ask to reload the sources of the open class files
	//  - auto: Automatically reload the sources of the open class files
	//  - manual: Manually reload the sources of the open class files
	"java.editor.reloadChangedSources": "ask",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": true,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": 50,

	// Configure settings to be overridden for ACUCOBOL.
	"[ACUCOBOL]":  {
		"workbench.editor.languageDetection": false,
		"coboleditor.linter": true,
		"editor.semanticHighlighting.enabled": true,
		"editor.bracketPairColorization.enabled": false,
		"editor.insertSpaces": true,
		"editor.guides.indentation": false,
		"files.autoGuessEncoding": false,
		"editor.autoIndent": "full",
		"editor.formatOnType": false,
		"editor.rulers": [
				6,
				7,
				72
		],
		"editor.detectIndentation": false,
		"editor.wordSeparators": "`~!#$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for BITLANG-COBOL.
	"[BITLANG-COBOL]":  {
		"workbench.editor.languageDetection": false,
		"editor.semanticHighlighting.enabled": true,
		"editor.bracketPairColorization.enabled": false,
		"files.autoGuessEncoding": false,
		"editor.snippetSuggestions": "bottom",
		"editor.guides.indentation": false,
		"editor.autoIndent": "advanced",
		"editor.insertSpaces": true,
		"editor.formatOnType": true,
		"editor.rulers": [
				6,
				7,
				11,
				72
		],
		"editor.detectIndentation": false,
		"editor.useTabStops": false,
		"editor.wordSeparators": "`~!@$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for c.
	"[c]":  {
		"editor.wordBasedSuggestions": "off",
		"editor.semanticHighlighting.enabled": true,
		"editor.stickyScroll.defaultModel": "foldingProviderModel",
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for chatmode.
	"[chatmode]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// Configure settings to be overridden for clojure.
	"[clojure]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// Configure settings to be overridden for COBOL.
	"[COBOL]":  {
		"editor.semanticHighlighting.enabled": true,
		"editor.bracketPairColorization.enabled": false,
		"files.autoGuessEncoding": false,
		"editor.snippetSuggestions": "bottom",
		"editor.guides.indentation": false,
		"editor.autoIndent": "advanced",
		"editor.insertSpaces": true,
		"editor.formatOnType": true,
		"editor.rulers": [
				6,
				7,
				11,
				72
		],
		"editor.detectIndentation": false,
		"editor.useTabStops": false,
		"editor.wordSeparators": "`~!@$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for coffeescript.
	"[coffeescript]":  {
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never"
	},

	// Configure settings to be overridden for cpp.
	"[cpp]":  {
		"editor.wordBasedSuggestions": "off",
		"editor.semanticHighlighting.enabled": true,
		"editor.stickyScroll.defaultModel": "foldingProviderModel",
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for cram.
	"[cram]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true
	},

	// Configure settings to be overridden for csharp.
	"[csharp]":  {
		"editor.maxTokenizationLineLength": 2500,
		"editor.formatOnType": true
	},

	// Configure settings to be overridden for css.
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for cuda-cpp.
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": "off",
		"editor.semanticHighlighting.enabled": true,
		"editor.stickyScroll.defaultModel": "foldingProviderModel",
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for dir.
	"[dir]":  {
		"coboleditor.linter": true,
		"editor.semanticHighlighting.enabled": false,
		"editor.insertSpaces": true,
		"editor.guides.indentation": false,
		"files.autoGuessEncoding": false,
		"editor.autoIndent": "keep",
		"editor.formatOnType": false,
		"editor.rulers": [],
		"editor.detectIndentation": false,
		"editor.wordSeparators": "`~!@#$%^&*()=[{]}\\|;:'\",<>/?"
	},

	// Configure settings to be overridden for dockercompose.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Configure settings to be overridden for dockerfile.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for dune-project.
	"[dune-project]":  {
		"editor.tabSize": 1,
		"editor.insertSpaces": true
	},

	// Configure settings to be overridden for dune-workspace.
	"[dune-workspace]":  {
		"editor.tabSize": 1,
		"editor.insertSpaces": true
	},

	// Configure settings to be overridden for dune.
	"[dune]":  {
		"editor.tabSize": 1,
		"editor.insertSpaces": true
	},

	// Configure settings to be overridden for fsharp.
	"[fsharp]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// Configure settings to be overridden for git-commit.
	"[git-commit]":  {
		"editor.rulers": [
				50,
				72
		],
		"editor.wordWrap": "off",
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for git-rebase.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for go.
	"[go]":  {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
				"source.organizeImports": "explicit"
		}
	},

	// Configure settings to be overridden for handlebars.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for hlasm.
	"[hlasm]":  {
		"editor.semanticHighlighting.enabled": false,
		"editor.rulers": [
				0,
				9,
				15,
				71,
				72,
				80
		],
		"editor.guides.indentation": false
	},

	// Configure settings to be overridden for html.
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for ILECOBOL.
	"[ILECOBOL]":  {
		"workbench.editor.languageDetection": false,
		"coboleditor.linter": true,
		"editor.semanticHighlighting.enabled": true,
		"editor.bracketPairColorization.enabled": false,
		"editor.insertSpaces": true,
		"editor.guides.indentation": false,
		"files.autoGuessEncoding": false,
		"editor.autoIndent": "full",
		"editor.formatOnType": false,
		"editor.rulers": [
				6,
				7,
				72
		],
		"editor.detectIndentation": false,
		"editor.wordSeparators": "`~!#$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for instructions.
	"[instructions]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// Configure settings to be overridden for jade.
	"[jade]":  {
		"diffEditor.ignoreTrimWhitespace": false
	},

	// Configure settings to be overridden for java.
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configure settings to be overridden for javascript.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for JCL.
	"[JCL]":  {
		"editor.semanticHighlighting.enabled": false,
		"files.autoGuessEncoding": false,
		"editor.guides.indentation": false,
		"editor.detectIndentation": false,
		"editor.formatOnType": false,
		"editor.autoIndent": "full",
		"editor.rulers": [
				71,
				72,
				80
		]
	},

	// Configure settings to be overridden for json.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for jsonc.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for julia.
	"[julia]":  {
		"editor.defaultColorDecorators": "never"
	},

	// Configure settings to be overridden for less.
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for makefile.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for markdown.
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// Configure settings to be overridden for ocaml.
	"[ocaml]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true
	},

	// Configure settings to be overridden for plaintext.
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// Configure settings to be overridden for prompt.
	"[prompt]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// Configure settings to be overridden for python.
	"[python]":  {
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never"
	},

	// Configure settings to be overridden for reason.
	"[reason]":  {
		"editor.semanticHighlighting.enabled": false
	},

	// Configure settings to be overridden for RMCOBOL.
	"[RMCOBOL]":  {
		"workbench.editor.languageDetection": false,
		"coboleditor.linter": true,
		"editor.semanticHighlighting.enabled": true,
		"editor.bracketPairColorization.enabled": false,
		"editor.insertSpaces": true,
		"editor.guides.indentation": false,
		"files.autoGuessEncoding": false,
		"editor.autoIndent": "full",
		"editor.formatOnType": false,
		"editor.rulers": [
				6,
				7,
				72
		],
		"editor.detectIndentation": false,
		"editor.wordSeparators": "`~!#$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for ruby.
	"[ruby]":  {
		"editor.defaultColorDecorators": "never"
	},

	// Configure settings to be overridden for scss.
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for search-result.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for shellscript.
	"[shellscript]":  {
		"files.eol": "\n",
		"editor.defaultColorDecorators": "never"
	},

	// Configure settings to be overridden for snippets.
	"[snippets]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for sql.
	"[sql]":  {
		"editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?"
	},

	// Configure settings to be overridden for xaml.
	"[xaml]":  {
		"editor.wordBasedSuggestions": "off"
	},

	// Configure settings to be overridden for yaml.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"diffEditor.ignoreTrimWhitespace": false,
		"editor.defaultColorDecorators": "never",
		"editor.quickSuggestions": {
				"strings": "on"
		}
	},

	// Enable agent mode for Copilot Chat. When this is enabled, agent mode can be activated via the dropdown in the view.
	"chat.agent.enabled": true,

	// The maximum number of requests to allow Copilot to use per-turn in agent mode. When the limit is reached, Copilot will ask the user to confirm that it should continue.
	"chat.agent.maxRequests": 25,

	// Controls whether the command center shows a menu for actions to control Copilot (requires `window.commandCenter`).
	"chat.commandCenter.enabled": true,

	// Enables chat participant autodetection for panel chat.
	"chat.detectParticipant.enabled": true,

	// Delay after which changes made by chat are automatically accepted. Values are in seconds, `0` means disabled and `100` seconds is the maximum.
	"chat.editing.autoAcceptDelay": 0,

	// Whether to show a confirmation before removing a request and its associated edits.
	"chat.editing.confirmEditRequestRemoval": true,

	// Whether to show a confirmation before retrying a request and its associated edits.
	"chat.editing.confirmEditRequestRetry": true,

	// Controls the font family in chat codeblocks.
	"chat.editor.fontFamily": "default",

	// Controls the font size in pixels in chat codeblocks.
	"chat.editor.fontSize": 14,

	// Controls the font weight in chat codeblocks.
	"chat.editor.fontWeight": "default",

	// Controls the line height in pixels in chat codeblocks. Use 0 to compute the line height from the font size.
	"chat.editor.lineHeight": 0,

	// Controls whether lines should wrap in chat codeblocks.
	"chat.editor.wordWrap": "off",

	// Enables editing of requests in the chat. This allows you to change the request content and resubmit it to the model.
	"chat.editRequests": "hover",

	// Enable the new Edits mode that is based on tool-calling. When this is enabled, models that don't support tool-calling are unavailable for Edits mode.
	"chat.edits2.enabled": false,

	// This setting is deprecated. Please use `chat.detectParticipant.enabled` instead.
	// Enables chat participant autodetection for panel chat.
	"chat.experimental.detectParticipant.enabled": null,

	// Enable using tools contributed by third-party extensions.
	"chat.extensionTools.enabled": true,

	// Enables automatically using the active editor as chat context for specified chat locations.
	"chat.implicitContext.enabled": {
		"panel": "always"
	},

	// Specify location(s) of instructions files (`*.instructions.md`) that can be attached in Chat, Edits, and Inline Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-custom-instructions).
	// 
	// Relative paths are resolved from the root folder(s) of your workspace.
	"chat.instructionsFilesLocations": {
		".github/instructions": true
	},

	// Configures discovery of Model Context Protocol servers on the machine. It may be set to `true` or `false` to disable or enable all sources, and an mapping sources you wish to enable.
	"chat.mcp.discovery.enabled": true,

	// Enables integration with Model Context Protocol servers to provide additional tools and functionality.
	"chat.mcp.enabled": true,

	// Configures which models are exposed to MCP servers for sampling (making model requests in the background). This setting can be edited in a graphical way under the `MCP: List Servers` command.
	"chat.mcp.serverSampling": {},

	// Specify location(s) of custom chat mode files (`*.chatmode.md`). [Learn More](https://aka.ms/vscode-ghcp-custom-chat-modes).
	// 
	// Relative paths are resolved from the root folder(s) of your workspace.
	"chat.modeFilesLocations": {
		".github/chatmodes": true
	},

	// Controls whether the Copilot window should notify the user when a confirmation is needed.
	"chat.notifyWindowOnConfirmation": true,

	// Enable reusable prompt (`*.prompt.md`) and instruction files in Chat, Edits, and Inline Chat sessions. [Learn More](.instructions.md).
	"chat.promptFiles": true,

	// Specify location(s) of reusable prompt files (`*.prompt.md`) that can be run in Chat, Edits, and Inline Chat sessions. [Learn More](https://aka.ms/vscode-ghcp-prompt-snippets).
	// 
	// Relative paths are resolved from the root folder(s) of your workspace.
	"chat.promptFilesLocations": {
		".github/prompts": true
	},

	// Controls whether related files should be rendered in the chat input.
	"chat.renderRelatedFiles": false,

	// Controls whether CSS of the selected element will be added to the chat. `chat.sendElementsToChat.enabled` must be enabled.
	"chat.sendElementsToChat.attachCSS": true,

	// Controls whether a screenshot of the selected element will be added to the chat. `chat.sendElementsToChat.enabled` must be enabled.
	"chat.sendElementsToChat.attachImages": true,

	// Controls whether elements can be sent to chat from the Simple Browser.
	"chat.sendElementsToChat.enabled": true,

	// Control variations of the sign-in dialog.
	"chat.setup.signInDialogVariant": "default",

	// Controls whether tool use should be automatically approved.
	// 
	// Allows _all_ tools to run automatically without user confirmation, overriding any tool-specific settings such as terminal auto-approval.
	// 
	// Use with caution: carefully review selected tools and be extra wary of possible sources of prompt injection!
	"chat.tools.autoApprove": false,

	// Controls whether the input of the chat should be restored when an undo request is made. The input will be filled with the text of the request that was restored.
	"chat.undoRequests.restoreInput": true,

	// Enables storing chat sessions on disk instead of in the storage service. Enabling this does a one-time per-workspace migration of existing sessions to the new format.
	"chat.useFileStorage": true,

	// 
	//  - legacy: Uses the legacy diffing algorithm.
	//  - advanced: Uses the advanced diffing algorithm.
	"mergeEditor.diffAlgorithm": "advanced",

	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,

	// Enable experimental multi diff editor.
	"multiDiffEditor.experimental.enabled": true,

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded. Also see `remote.autoForwardPortsSource`.
	"remote.autoForwardPorts": true,

	// The number of auto forwarded ports that will trigger the switch from `process` to `hybrid` when automatically forwarding ports and `remote.autoForwardPortsSource` is set to `process` by default. Set to `0` to disable the fallback. When `remote.autoForwardPortsFallback` hasn't been configured, but `remote.autoForwardPortsSource` has, `remote.autoForwardPortsFallback` will be treated as though it's set to `0`.
	"remote.autoForwardPortsFallback": 20,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts#` is true. When `#remote.autoForwardPorts#` is false, `#remote.autoForwardPortsSource` will be used to find information about ports that have already been forwarded. On Windows and macOS remotes, the `process` and `hybrid` options have no effect and `output` will be used.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	//  - hybrid: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports will be "un-forwarded" by watching for processes that listen on that port to be terminated.
	"remote.autoForwardPortsSource": "process",

	// List of extensions to install upon connection to a remote when already installed locally.
	"remote.defaultExtensionsIfInstalledLocally": [
		"GitHub.copilot",
		"GitHub.copilot-chat",
		"GitHub.vscode-pull-request-github"
	],

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Controls whether local URLs with a port will be forwarded when opened from the terminal and the debug console.
	"remote.forwardOnOpen": true,

	// Specifies the local host name that will be used for port forwarding.
	"remote.localPortHost": "localhost",

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// On keypress, close the Accessible View and focus the element from which it was invoked.
	"accessibility.accessibleView.closeOnKeyPress": true,

	// Controls whether variable changes should be announced in the debug watch view.
	"accessibility.debugWatchVariableAnnouncements": true,

	// Control whether focus should automatically be sent to the REPL when code is executed.
	"accessibility.replEditor.autoFocusReplExecution": "input",

	// Controls whether the output from an execution in the native REPL will be announced.
	"accessibility.replEditor.readLastExecutionOutput": true,

	// Whether or not position changes should be debounced
	"accessibility.signalOptions.debouncePositionChanges": false,

	// 
	"accessibility.signalOptions.experimental.delays.errorAtPosition": {},

	// Delays for all signals besides error and warning at position
	"accessibility.signalOptions.experimental.delays.general": {},

	// 
	"accessibility.signalOptions.experimental.delays.warningAtPosition": {},

	// The volume of the sounds in percent (0-100).
	"accessibility.signalOptions.volume": 70,

	// Plays a sound / audio cue when revealing a file with changes from chat edits
	"accessibility.signals.chatEditModifiedFile": {
		"sound": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a chat request is made.
	"accessibility.signals.chatRequestSent": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a sound / audio cue when the response has been received.
	"accessibility.signals.chatResponseReceived": {
		"sound": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when user action is required in the chat.
	"accessibility.signals.chatUserActionRequired": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a feature is cleared (for example, the terminal, Debug Console, or Output channel).
	"accessibility.signals.clear": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a sound / audio cue when the code action has been applied.
	"accessibility.signals.codeActionApplied": {
		"sound": "auto"
	},

	// Plays a sound / audio cue - when a code action has been triggered.
	"accessibility.signals.codeActionTriggered": {
		"sound": "auto"
	},

	// Plays a sound / audio cue when the focus moves to an deleted line in Accessible Diff Viewer mode or to the next/previous change.
	"accessibility.signals.diffLineDeleted": {
		"sound": "auto"
	},

	// Plays a sound / audio cue when the focus moves to an inserted line in Accessible Diff Viewer mode or to the next/previous change.
	"accessibility.signals.diffLineInserted": {
		"sound": "auto"
	},

	// Plays a sound / audio cue when the focus moves to an modified line in Accessible Diff Viewer mode or to the next/previous change.
	"accessibility.signals.diffLineModified": {
		"sound": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when edits are kept.
	"accessibility.signals.editsKept": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when edits have been undone.
	"accessibility.signals.editsUndone": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a file or notebook is formatted.
	"accessibility.signals.format": {
		"sound": "never",
		"announcement": "never"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a breakpoint.
	"accessibility.signals.lineHasBreakpoint": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has an error.
	"accessibility.signals.lineHasError": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - the active line has a folded area that can be unfolded.
	"accessibility.signals.lineHasFoldedArea": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a sound / audio cue when the active line has an inline suggestion.
	"accessibility.signals.lineHasInlineSuggestion": {
		"sound": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
	"accessibility.signals.lineHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound / audio cue and/or announcement (alert) when there is a next edit suggestion.
	"accessibility.signals.nextEditSuggestion": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when trying to read a line with inlay hints that has no inlay hints.
	"accessibility.signals.noInlayHints": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution is successfully completed.
	"accessibility.signals.notebookCellCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a notebook cell execution fails.
	"accessibility.signals.notebookCellFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the debugger stopped on a breakpoint.
	"accessibility.signals.onDebugBreak": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
	"accessibility.signals.positionHasError": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the active line has a warning.
	"accessibility.signals.positionHasWarning": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - on loop while progress is occurring.
	"accessibility.signals.progress": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a file is saved.
	"accessibility.signals.save": {
		"sound": "never",
		"announcement": "never"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a task is completed.
	"accessibility.signals.taskCompleted": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a task fails (non-zero exit code).
	"accessibility.signals.taskFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when the terminal bell is ringing.
	"accessibility.signals.terminalBell": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command fails (non-zero exit code) or when a command with such an exit code is navigated to in the accessible view.
	"accessibility.signals.terminalCommandFailed": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when a terminal command succeeds (zero exit code) or when a command with such an exit code is navigated to in the accessible view.
	"accessibility.signals.terminalCommandSucceeded": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a signal - sound (audio cue) and/or announcement (alert) - when terminal Quick Fixes are available.
	"accessibility.signals.terminalQuickFix": {
		"sound": "auto",
		"announcement": "auto"
	},

	// Plays a sound / audio cue when the voice recording has started.
	"accessibility.signals.voiceRecordingStarted": {
		"sound": "on"
	},

	// Plays a sound / audio cue when the voice recording has stopped.
	"accessibility.signals.voiceRecordingStopped": {
		"sound": "auto"
	},

	// Controls whether links should be underlined in the workbench.
	"accessibility.underlineLinks": false,

	// Provide information about actions that can be taken in the comment widget or in a file which contains comments.
	"accessibility.verbosity.comments": true,

	// Provide information about how to access the debug console accessibility help dialog when the debug console or run and debug viewlet is focused. Note that a reload of the window is required for this to take effect.
	"accessibility.verbosity.debug": true,

	// Provide information about how to navigate changes in the diff editor when it is focused.
	"accessibility.verbosity.diffEditor": true,

	// Indicate when a diff editor becomes the active editor.
	"accessibility.verbosity.diffEditorActive": true,

	// Provide information about relevant actions in an empty text editor.
	"accessibility.verbosity.emptyEditorHint": true,

	// Provide information about how to open the hover in an Accessible View.
	"accessibility.verbosity.hover": true,

	// Provide information about how to access the inline editor chat accessibility help menu and alert with hints that describe how to use the feature when the input is focused.
	"accessibility.verbosity.inlineChat": true,

	// Provide information about how to access the inline completions hover and Accessible View.
	"accessibility.verbosity.inlineCompletions": true,

	// Provide information about how to change a keybinding in the keybindings editor when a row is focused.
	"accessibility.verbosity.keybindingsEditor": true,

	// Provide information about how to focus the cell container or inner editor when a notebook cell is focused.
	"accessibility.verbosity.notebook": true,

	// Provide information about how to open the notification in an Accessible View.
	"accessibility.verbosity.notification": true,

	// Provide information about how to access the chat help menu when the chat input is focused.
	"accessibility.verbosity.panelChat": true,

	// Provide information about how to access the REPL editor accessibility help menu when the REPL editor is focused.
	"accessibility.verbosity.replEditor": true,

	// Provide information about how to access the source control accessibility help menu when the input is focused.
	"accessibility.verbosity.sourceControl": true,

	// Provide information about how to access the terminal accessibility help menu when the terminal is focused.
	"accessibility.verbosity.terminal": true,

	// Provide information about how to open the walkthrough in an Accessible View.
	"accessibility.verbosity.walkthrough": true,

	// Controls whether the `window.title` should be optimized for screen readers when in screen reader mode. When enabled, the window title will have `activeEditorState` appended to the end.
	"accessibility.windowTitleOptimized": true,

	// Set the color mode for native UI elements such as native dialogs, menus and title bar. Even if your OS is configured in light color mode, you can select a dark system color theme for the window. You can also configure to automatically adjust based on the `workbench.colorTheme` setting.
	// 
	// Note: This setting is ignored when `window.autoDetectColorScheme` is enabled.
	//  - default: Native widget colors match the system colors.
	//  - auto: Use light native widget colors for light color themes and dark for dark color themes.
	//  - light: Use light native widget colors.
	//  - dark: Use dark native widget colors.
	"window.systemColorTheme": "default",

	// The name under which the remote tunnel access is registered. If not set, the host name is used.
	"remote.tunnels.access.hostNameOverride": "",

	// Prevent this computer from sleeping when remote tunnel access is turned on.
	"remote.tunnels.access.preventSleep": false,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
	"emmet.useInlineCompletions": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Controls whether to show blame information in the editor using editor decorations.
	"git.blame.editorDecoration.enabled": false,

	// Template for the blame information editor decoration. Supported variables:
	// 
	// * `hash`: Commit hash
	// 
	// * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
	// 
	// * `subject`: First line of the commit message
	// 
	// * `authorName`: Author name
	// 
	// * `authorEmail`: Author email
	// 
	// * `authorDate`: Author date
	// 
	// * `authorDateAgo`: Time difference between now and the author date
	// 
	// 
	"git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",

	// Controls whether to show blame information in the status bar.
	"git.blame.statusBarItem.enabled": true,

	// Template for the blame information status bar item. Supported variables:
	// 
	// * `hash`: Commit hash
	// 
	// * `hashShort`: First N characters of the commit hash according to `git.commitShortHashLength`
	// 
	// * `subject`: First line of the commit message
	// 
	// * `authorName`: Author name
	// 
	// * `authorEmail`: Author email
	// 
	// * `authorDate`: Author date
	// 
	// * `authorDateAgo`: Time difference between now and the author date
	// 
	// 
	"git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",

	// Prefix used when creating a new branch.
	"git.branchPrefix": "",

	// List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
	"git.branchProtection": [],

	// Controls whether a prompt is being shown before changes are committed to a protected branch.
	//  - alwaysCommit: Always commit changes to the protected branch.
	//  - alwaysCommitToNewBranch: Always commit changes to a new branch.
	//  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
	"git.branchProtectionPrompt": "alwaysPrompt",

	// List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
	//  - adjectives: A random adjective
	//  - animals: A random animal name
	//  - colors: A random color name
	//  - numbers: A random number between 100 and 999
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// Controls whether a random name is generated when creating a new branch.
	"git.branchRandomName.enable": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
	"git.branchWhitespaceChar": "-",

	// Controls what type of Git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,

	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],

	// Controls the length of the commit short hash.
	"git.commitShortHashLength": 7,

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing Git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.
	"git.defaultBranchName": "main",

	// The default location to clone a Git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect Git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of Git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Controls whether to check for unresolved diagnostics before committing.
	"git.diagnosticsCommitHook.enabled": false,

	// Controls the list of sources (**Item**) and the minimum severity (**Value**) to be considered before committing. **Note:** To ignore diagnostics from a particular source, add the source to the list and set the minimum severity to `none`.
	"git.diagnosticsCommitHook.sources": {
		"*": "error"
	},

	// Controls whether discarding untracked changes moves the file(s) to the Recycle Bin (Windows), Trash (macOS, Linux) instead of deleting them permanently. **Note:** This setting has no effect when connected to a remote or when running in Linux as a snap package.
	"git.discardUntrackedChangesToTrash": true,

	// Enables commit signing with GPG, X.509, or SSH.
	"git.enableCommitSigning": false,

	// Whether Git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Push all annotated tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of Git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls whether to show commit message input validation diagnostics.
	"git.inputValidation": false,

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `git.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Open the merge editor for files that are currently under conflict.
	"git.mergeEditor": false,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Control whether a repository in parent folders of workspaces or open files should be opened.
	//  - always: Always open a repository in parent folders of workspaces or open files.
	//  - never: Never open a repository in parent folders of workspaces or open files.
	//  - prompt: Prompt before opening a repository the parent folders of workspaces or open files.
	"git.openRepositoryInParentFolders": "prompt",

	// Controls whether to optimistically update the state of the Source Control view after running git commands.
	"git.optimisticUpdate": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Run a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'git push' after a successful commit.
	//  - sync: Run 'git pull' and 'git push' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
	"git.pullBeforeCheckout": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force Git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Remember the last git command that ran after a commit.
	"git.rememberPostCommitCommand": false,

	// Automatically replace the local tags with the remote tags in case of a conflict when running the pull command.
	"git.replaceTagsWhenPull": false,

	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for Git repositories in.
	"git.scanRepositories": [],

	// Controls whether an action button is shown in the Source Control view.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether Git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Controls whether to show the details of the last commit for Git refs in the checkout, branch, and tag pickers.
	"git.showReferenceDetails": true,

	// Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.
	"git.similarityThreshold": 50,

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalGitEditor": false,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls whether to show uncommitted changes in the Timeline view.
	"git.timeline.showUncommitted": false,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
	"git.useEditorAsCommitInput": true,

	// Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `git.useForcePushWithLease` setting to be enabled, and Git version `2.30.0` or later.
	"git.useForcePushIfIncludes": true,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
	"git.useIntegratedAskPass": true,

	// Enable verbose output when `git.useEditorAsCommitInput` is enabled.
	"git.verboseCommit": false,

	// Controls whether to query repository rules for GitHub repositories
	"github.branchProtection": true,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// Controls which protocol is used to clone a GitHub repository
	"github.gitProtocol": "https",

	// Controls whether to show the GitHub avatar of the commit author in various hovers (ex: Git blame, Timeline, Source Control Graph, etc.)
	"github.showAvatar": true,

	// The URI for your GHE.com or GitHub Enterprise Server instance.
	// 
	// Examples:
	// * GHE.com: `https://octocat.ghe.com`
	// * GitHub Enterprise Server: `https://github.octocat.com`
	// 
	// > **Note:** This should _not_ be set to a GitHub.com URI. If your account exists on GitHub.com or is a GitHub Enterprise Managed User, you do not need any additional configuration and can simply log in to GitHub.
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Experimental feature to serialize the Jupyter notebook in a worker thread.
	"ipynb.experimental.serialization": true,

	// Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
	"ipynb.pasteImagesAsAttachments.enabled": true,

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.
	"markdown.math.macros": {},

	// Start playing videos on mute automatically.
	"mediaPreview.video.autoPlay": false,

	// Loop videos over again automatically.
	"mediaPreview.video.loop": false,

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// The custom configuration for the Sovereign Cloud to use with the Microsoft Sovereign Cloud authentication provider. This along with setting `microsoft-sovereign-cloud.environment` to `custom` is required to use this feature.
	"microsoft-sovereign-cloud.customEnvironment": {},

	// The Sovereign Cloud to use for authentication. If you select `custom`, you must also set the `microsoft-sovereign-cloud.customEnvironment` setting.
	//  - ChinaCloud: Azure China
	//  - USGovernment: Azure US Government
	//  - custom: A custom Microsoft Sovereign Cloud
	"microsoft-sovereign-cloud.environment": "",

	// The authentication implementation to use for signing in with a Microsoft account.
	// 
	// *NOTE: The `classic` implementation is deprecated and will be removed, along with this setting, in a future release. If only the `classic` implementation works for you, please [open an issue](command:workbench.action.openIssueReporter) and explain what you are trying to log in to.*
	//  - msal: Use the Microsoft Authentication Library (MSAL) to sign in with a Microsoft account.
	//  - classic: (deprecated) Use the classic authentication flow to sign in with a Microsoft account.
	"microsoft-authentication.implementation": "msal",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Enables the experimental network view for targets that support it.
	"debug.javascript.enableNetworkView": true,

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to install dependencies.
	//  - auto: Auto-detect which package manager to use based on lock files and installed package managers.
	//  - npm: Use npm as the package manager.
	//  - yarn: Use yarn as the package manager.
	//  - pnpm: Use pnpm as the package manager.
	//  - bun: Use bun as the package manager.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],

	// Display hover with 'Run' and 'Debug' commands for scripts.
	"npm.scriptHover": true,

	// The script runner used to run scripts.
	//  - auto: Auto-detect which script runner to use based on lock files and installed package managers.
	//  - npm: Use npm as the script runner.
	//  - yarn: Use yarn as the script runner.
	//  - pnpm: Use pnpm as the script runner.
	//  - bun: Use bun as the script runner.
	//  - node: Use Node.js as the script runner.
	"npm.scriptRunner": "auto",

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Select how the code navigation should work
	"pascal.codeNavigation": "workspace",

	// Controls if the extension should automatically generate tags in projects opened for the first time
	"pascal.tags.autoGenerate": true,

	// The number of spaces used for indentation
	"pascal.format.indent": 2,

	// Maximum amount of characters per line
	"pascal.format.wrapLineLength": 80,

	// Choose the Formatter engine to be used
	"pascal.formatter.engine": "",

	// Indicates the configuration file for the selected engine
	"pascal.formatter.engineParameters": "",

	// Indicates the Formatter app path
	"pascal.formatter.enginePath": "",

	// swi: SWI-Prolog; ecl: ECLiPSe(eclipseclp).
	"prolog.dialect": "swi",

	// Points to the Prolog executable.
	"prolog.executablePath": "/usr/bin/swipl",

	// Enable formatting source codes
	"prolog.format.enabled": true,

	// Prefer spaces over tabs
	"prolog.format.insertSpaces": true,

	// The size of a tab in spaces
	"prolog.format.tabSize": 4,

	// The milliseconds to delay when using onType trigger.
	"prolog.linter.delay": 500,

	// Enable errors and warnings in OUTPUT channel.
	"prolog.linter.enableMsgInOutput": false,

	// How to trigger the linter.
	"prolog.linter.run": "onType",

	// Arguments of Prolog executable run in terminal.
	"prolog.terminal.runtimeArgs": [],

	// Inactivity timeout for metadata cache in ms
	"coboleditor.cache_metadata_inactivity_timeout": 5000,

	// Show log message during meta data processing
	"coboleditor.cache_metadata_verbose_messages": false,

	// When enabled, process coboleditor.fileformat before scanning the file
	"coboleditor.check_file_format_before_file_scan": true,

	// This feature is not enabled.. this message will be removed when it is...
	// Tags which are used to color the margins.
	"coboleditor.columns_tags": [
		{
			"tag": "todo",
			"color": "#FF8C00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		}
	],

	// When enabled, activate COBOL comment key
	"coboleditor.comment_line": true,

	// Colourise the tag only
	"coboleditor.comment_tag_word": true,

	// Tags which are used to color the comments.
	"coboleditor.comments_tags": [
		{
			"tag": " !",
			"color": "#FF2D00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": " ?",
			"color": "#3498DB",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": " todo",
			"color": "#FF8C00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": " * ",
			"color": "#98C379",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": " //",
			"color": "#474747",
			"strikethrough": true,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": " note",
			"color": "#FF8C00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false,
			"reverse": true
		}
	],

	// COBOL CopyBook directories to search into
	"coboleditor.copybookdirs": [
		"$COBCPY",
		"$COPYPATH"
	],

	// COBOL CopyBook file name extensions
	"coboleditor.copybookexts": [
		"cpy",
		"CPY",
		"scr",
		"SCR",
		"cbl",
		"CBL",
		"ccp",
		"CCP",
		"dds",
		"DDS",
		"ss",
		"SS",
		"wks",
		"WKS",
		"inc",
		"INC",
		"cblcpy",
		"CBLCPY"
	],

	// This setting is depreciated and may be removed in future releases
	// nest copybooks in outline view (restart required)
	"coboleditor.copybooks_nested": false,

	// Custom intellisense rules
	"coboleditor.custom_intellisense_rules": [],

	// Disable UNC Copybooks (default false)
	"coboleditor.disable_unc_copybooks_directories": false,

	// When enabled, turn on codelens for simple copy replacing
	"coboleditor.enable_codelens_copy_replacing": false,

	// When enabled, turn on codelens for sections/paragraphs references
	"coboleditor.enable_codelens_section_paragraph_references": true,

	// When enabled, turn on codelens for variable references
	"coboleditor.enable_codelens_variable_references": true,

	// Enable coloured margin
	"coboleditor.enable_columns_tags": false,

	// Enable coloured comments
	"coboleditor.enable_comment_tags": true,

	// Enabled data/field completion provider
	"coboleditor.enable_data_provider": true,

	// When 'enabled' parse 'EXEC SQL Cursor' for references
	"coboleditor.enable_exec_sql_cursors": true,

	// When enabled, turn on call hierarchy provider (WIP)
	"coboleditor.enable_program_information": false,

	// Invoke 'Micro Focus COBOL LSP Server Control' when switching to Micro Focus language
	"coboleditor.enable_rocket_cobol_lsp_lang_server_control": true,

	// Enable 'Micro Focus COBOL Extensions LSP' when active
	"coboleditor.enable_rocket_cobol_lsp_when_active": true,

	// When enabled, turn on the semantic token provider
	"coboleditor.enable_semantic_token_provider": false,

	// Scan source code (default true)
	"coboleditor.enable_source_scanner": true,

	// When enabled, allow tab to be used for inline suggestions
	"coboleditor.enable_tab_inline": true,

	// When enabled, allow tab to be used for 'next'/'previous' suggestions
	"coboleditor.enable_tab_next_or_previous": true,

	// When enabled, activate COBOL tab/detab key
	"coboleditor.enable_tabstop": true,

	// Enable tabstop anchors
	"coboleditor.enable_tabstops_anchors": false,

	// Process 'replace' and 'replacing' verb (default false)
	"coboleditor.enable_text_replacement": false,

	// Enable experimental feedback panel view
	"coboleditor.feedbackview": true,

	// Default configuration for file format. [Read more...](https://github.com/spgennard/vscode_cobol#coboleditorfileformat)
	"coboleditor.fileformat": [
		{
			"pattern": "**/FIXED*.cbl",
			"sourceformat": "fixed"
		}
	],

	// File format strategy
	//  - always_fixed: Assume source code is fixed source format
	//  - always_variable: Assume source code is variable source format
	//  - always_free: Assume source code is free source format
	//  - always_terminal: Assume source code is terminal source format
	//  - normal: Determine source code format or configure it with fileformat
	"coboleditor.fileformat_strategy": "normal",

	// list of files to exclude from source scanning, it can be used to avoid 'unresponsive' messages
	"coboleditor.files_exclude": [],

	// When enabled, ensures all constants are folded to uppercase (when field formatting is actioned)
	"coboleditor.format_constants_to_uppercase": true,

	// Format line on return key
	"coboleditor.format_on_return": "false",

	// When enabled, decode hex literals when hover over them
	"coboleditor.hover_show_encoded_literals": true,

	// Show a short description of known apis when hovered on.  Known apis include 'Micro Focus™Library apis' and some ILE apis.
	//  - off: Off
	//  - short: Short message (description & link)
	//  - long: Longer message (description, link & example)
	"coboleditor.hover_show_known_api": "short",

	// When enabled, show variable definition when hover over them
	"coboleditor.hover_show_variable_definition": true,

	// Size of internal memory cache for scanned source code
	"coboleditor.in_memory_cache_size": 6,

	// A list of keywords that require a space afterwards
	"coboleditor.intellisense_add_space_keywords": [
		"accept",
		"add",
		"background-color",
		"background-colour",
		"call",
		"cancel",
		"chain",
		"class-id",
		"close",
		"compute",
		"corresponding",
		"declare",
		"delete",
		"display",
		"divide",
		"enum-id",
		"enter",
		"entry",
		"equals",
		"exhibit",
		"function",
		"goback",
		"identification",
		"if",
		"inherits",
		"initialize",
		"invoke",
		"linkage",
		"local-storage",
		"method-id",
		"method",
		"multiply",
		"occurs",
		"open",
		"perform",
		"picture",
		"program-id",
		"redefines",
		"return",
		"returning",
		"set",
		"sort",
		"unstring",
		"value",
		"values",
		"varying",
		"working-storage"
	],

	// Max number of items to return (default 120)
	"coboleditor.intellisense_item_limit": 120,

	// Include results in specific format
	"coboleditor.intellisense_style": "unchanged",

	// Replace standard comment in/out with COBOL specific version
	"coboleditor.line_comment": true,

	// When enabled, activate basic linting (limited to sections/paragraph use)
	"coboleditor.linter": true,

	// Enable house standards rules
	"coboleditor.linter_house_standards": false,

	// 
	"coboleditor.linter_house_standards_rules": [
		"file=.*",
		"thread-local=.*",
		"working-storage=.*",
		"object-storage=.*",
		"local-storage=.*",
		"linkage=.*",
		"communication=.*",
		"report=.*",
		"screen=.*"
	],

	// When enabled, do not generate missing warnings about malformed 'using'
	"coboleditor.linter_ignore_malformed_using": true,

	// When enabled, do not generate missing copybook warnings
	"coboleditor.linter_ignore_missing_copybook": false,

	// Do not issue a warning if a unused section occurs before a entry-point, as this is often used to stop code trickling through to the next statements.
	"coboleditor.linter_ignore_section_before_entry": true,

	// When enabled, mark all linter problems as information (false is hint)
	"coboleditor.linter_mark_as_information": true,

	// When enabled, activate basic source code portation linting
	"coboleditor.linter_port_helper": true,

	// When enabled, activate basic linting (limited to paragraph use)
	"coboleditor.linter_unused_paragraphs": true,

	// When enabled, activate basic linting (limited to sections use)
	"coboleditor.linter_unused_sections": true,

	// Maintain Metadata Cache
	"coboleditor.maintain_metadata_cache": true,

	// When 'Maintain Metadata Cache' is enabled, recursive search for source code filenames/copybooks
	"coboleditor.maintain_metadata_recursive_search": false,

	// When enabled, *always* apply margin shading for COBOL source code
	"coboleditor.margin": true,

	// When enabled, the identification area (columns 73-80) for fixed format source files are treated comments
	"coboleditor.margin_identification_area": true,

	// 
	"coboleditor.metadata_entrypoints": [],

	// 
	"coboleditor.metadata_files": [],

	// 
	"coboleditor.metadata_knowncopybooks": [],

	// 
	"coboleditor.metadata_symbols": [],

	// 
	"coboleditor.metadata_types": [],

	// Enable ANSI color when using the Micro Focus™Unit Testing Framework (mfunit) in terminal
	"coboleditor.mfunit.diagnostic.color": true,

	// Tabstop size when outside of defined tabstop range
	"coboleditor.out_of_range_tabstop_size": 4,

	// Configure or disable outline view for COBOL
	//  - on: Scans everything in the source (can be costly)
	//  - partial: Scans everything expect paragraphs
	//  - skeleton: Scans very little but might be enough for basic navigation
	//  - off: No source scanning is done
	"coboleditor.outline": "on",

	// Scan copybook for reference (default false)
	"coboleditor.parse_copybooks_for_references": false,

	// Set pre-scan line limit, used to determine if source is COBOL or a CopyBook.
	"coboleditor.pre_scan_line_limit": 25,

	// Process metadata cache on extension load (default false)
	"coboleditor.process_metadata_cache_on_start": false,

	// COBOL Program file name extensions
	"coboleditor.program_extensions": [
		"cob",
		"COB",
		"cbl",
		"CBL",
		"cblle",
		"CBLLE",
		"sqlcblle",
		"SQLCBLLE",
		"cobol",
		"COBOL",
		"scbl",
		"SCBL",
		"pco",
		"PCO",
		"eco",
		"ECO",
		"copy",
		"COPY",
		"cobcopy",
		"COBCOPY"
	],

	// 'begin-ls-ignore' token
	"coboleditor.scan_comment_begin_ls_ignore": "BEGIN-LS-IGNORE",

	// Comment token used for processing source code dependencies, for example extra copybooks
	"coboleditor.scan_comment_copybook_token": "source-dependency",

	// 'begin-ls-ignore' token
	"coboleditor.scan_comment_end_ls_ignore": "END-LS-IGNORE",

	// When 'enabled' comments are scanned for 'begin/end-ls-ignore' comment
	"coboleditor.scan_comment_for_ls_control": false,

	// When enabled, process scanner hints embedded in comments
	"coboleditor.scan_comments_for_hints": false,

	// When 'enabled' and 'scan_comments_for_hints' is also enabled, include any references in search
	"coboleditor.scan_comments_for_references": true,

	// Set source scanner line limit, it can be used to avoid 'unresponsive' messages
	"coboleditor.scan_line_limit": 20000,

	// Set scan time limit, it can be used to avoid 'unresponsive' messages
	"coboleditor.scan_time_limit": 4000,

	// Dynamic snippets support
	"coboleditor.snippets": true,

	// Enable explorer source panel view
	"coboleditor.sourceview": true,

	// Include Documentation Files in source view
	"coboleditor.sourceview_include_doc_files": true,

	// Include HLASM Files in source view
	"coboleditor.sourceview_include_hlasm_files": true,

	// Include JCL Files in source view
	"coboleditor.sourceview_include_jcl_files": true,

	// Include Object Files in source view
	"coboleditor.sourceview_include_object_files": true,

	// Include PL/I Files in source view
	"coboleditor.sourceview_include_pli_files": true,

	// Include Script Files in source view
	"coboleditor.sourceview_include_script_files": true,

	// Include Test Files in source view
	"coboleditor.sourceview_include_test_files": true,

	// Suggest variables when context for a verb is unknown
	"coboleditor.suggest_variables_when_context_is_unknown": true,

	// COBOL tabstops
	"coboleditor.tabstops": [
		0,
		7,
		11,
		15,
		19,
		23,
		27,
		31,
		35,
		39,
		43,
		47,
		51,
		55,
		59,
		63,
		67,
		71,
		75,
		79
	],

	// An array of filenames/patterns and its associated source format
	"coboleditor.tabstops_anchors": [
		{
			"anchor": "$set",
			"tabstops": [
				6
			],
			"out_of_range_tabstop_size": 0
		}
	],

	// 
	"coboleditor.template_acucobol": [
		"       Identification Division.",
		"       Program-Id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
		"       Data Division.",
		"       Working-Storage Section.",
		"       Procedure Division.",
		"           $0",
		"           GoBack.",
		"       End Program $1."
	],

	// Template for a minimum 'Micro Focus' COBOL program
	"coboleditor.template_rocket_cobol": [
		"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
		"",
		"       environment division.",
		"       configuration section.",
		"",
		"       data division.",
		"       working-storage section.",
		"       linkage section.",
		"",
		"       procedure division.",
		"           $0",
		"           goback.",
		"",
		"       end program $1.",
		""
	],

	// 
	"coboleditor.template_rocket_cobol_mfunit": [
		"       copy \"mfunit_prototypes.cpy\".",
		"",
		"       identification division.",
		"       program-id. Test${1:${TM_FILENAME_BASE/Test(.*)/$1/}}.",
		"",
		"       data division.",
		"       working-storage section.",
		"       78 TEST-Program value \"${1}\".",
		"       copy \"mfunit.cpy\".",
		"       78 TEST-PRELOAD-LIBRARY value \"${3}\".",
		"       01 TEST-PP              procedure-pointer.",
		"",
		"       *> Testcase     : $1",
		"       *>  Description : ${2:The description of the test case}",
		"       procedure division.",
		"           goback returning 0",
		"       .",
		"",
		"       entry MFU-TC-PREFIX & TEST-${1}.",
		"      *> Test code goes here.",
		"           $0",
		"           goback returning MFU-PASS-RETURN-CODE",
		"       .",
		"",
		"      \\$region Test Configuration",
		"      *> Setup Code:",
		"       entry MFU-TC-SETUP-PREFIX & TEST-${1}.",
		"           perform InitializeLinkageData",
		"",
		"           *> Add any other test setup code here",
		"           goback returning 0",
		"       .",
		"",
		"      *> Teardown Code:",
		"       entry MFU-TC-TEARDOWN-PREFIX & TEST-${1}.",
		"           goback returning 0",
		"       .",
		"",
		"      *> Metadata:",
		"       entry MFU-TC-METADATA-SETUP-PREFIX & TEST-${1}.",
		"           move \"${2}\" to MFU-MD-TESTCASE-DESCRIPTION",
		"           move ${4:100000} to MFU-MD-TIMEOUT-IN-MS",
		"           move \"${5:smoke,regression,sanity,interface,other}\" to MFU-MD-TRAITS",
		"           set MFU-MD-SKIP-TESTCASE to False",
		"           goback returning 0",
		"       .",
		"",
		"       InitializeLinkageData section.",
		"           if TEST-PRELOAD-LIBRARY not equal spaces",
		"      *> Load the library that is being tested",
		"               set TEST-PP to entry TEST-PRELOAD-LIBRARY",
		"           end-if",
		"           exit section",
		"       .",
		"      \\$end-region",
		"",
		"       end program Test${1}."
	],

	// Valid Visual Studio COBOL Language Id
	"coboleditor.valid_cobol_language_ids": [
		"COBOL",
		"BITLANG-COBOL",
		"COBOLIT",
		"ACUCOBOL",
		"RMCOBOL",
		"ILECOBOL"
	],

	// List of ordered workspace folders
	"coboleditor.workspacefolders_order": [],

	// Enable 'xedit' key mapping
	"coboleditor.xedit_keymap": false,

	// When enabled, *always* apply margin shading for JCL source code
	"jcleditor.margin": true,

	// Enable a code lens that shows an abstract and interface implementations count and command to peek locations.
	"intelephense.codeLens.implementations.enable": false,

	// Enable a code lens that shows method override count and command to peek locations.
	"intelephense.codeLens.overrides.enable": false,

	// Enable a code lens that indicates if a method has a parent implementation and command to peek location.
	"intelephense.codeLens.parent.enable": false,

	// Enable a code lens that shows a reference count and command to peek locations.
	"intelephense.codeLens.references.enable": false,

	// Enable a code lens that shows a trait usages count and command to peek locations.
	"intelephense.codeLens.usages.enable": false,

	// Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.
	"intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes": true,

	// Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.
	"intelephense.compatibility.correctForBaseClassStaticUnionTypes": true,

	// Prefer `@psalm-` and `@phpstan-` prefixed `@return`, `@var`, `@param` tags when determining symbol types.
	"intelephense.compatibility.preferPsalmPhpstanPrefixedAnnotations": false,

	// Global namespace constants and functions will be fully qualified (prefixed with a backslash).
	"intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

	// Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
	"intelephense.completion.insertUseDeclaration": true,

	// The maximum number of completion items returned per request.
	"intelephense.completion.maxItems": 100,

	// PHP permits the calling of static methods using the object operator eg `$obj->myStaticMethod();`. If you would prefer not to have static methods suggested in this context then set this value to `false`. Defaults to `true`.
	"intelephense.completion.suggestObjectOperatorStaticMethods": true,

	// Method and function completions will include parentheses and trigger parameter hints.
	"intelephense.completion.triggerParameterHints": true,

	// Enables argument count diagnostics.
	"intelephense.diagnostics.argumentCount": true,

	// Enables deprecated diagnostics.
	"intelephense.diagnostics.deprecated": true,

	// Enables duplicate symbol diagnostics.
	"intelephense.diagnostics.duplicateSymbols": true,

	// Enables diagnostics in embedded languages.
	"intelephense.diagnostics.embeddedLanguages": true,

	// Enables diagnostics.
	"intelephense.diagnostics.enable": true,

	// Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.
	"intelephense.diagnostics.implementationErrors": true,

	// Enables reporting of various language constraint errors.
	"intelephense.diagnostics.languageConstraints": true,

	// Enables reporting of errors associated with type member access.
	"intelephense.diagnostics.memberAccess": true,

	// This setting turns off type checking for the `mixed` type. This is useful for projects that may have incomplete or innacurate typings. Set to `false` to make type checking more thorough by not allowing `mixed` to satisy any type constraint. This setting has no effect when `relaxedTypeCheck` is `true`.
	"intelephense.diagnostics.noMixedTypeCheck": true,

	// This setting makes type checking less thorough by allowing contravariant (wider) types to also satisfy a type constraint. This is useful for projects that may have incomplete or innacurate typings. Set to `false` for more thorough type checks. When this setting is `true`, the `noMixedTypeCheck` setting is ignored.
	"intelephense.diagnostics.relaxedTypeCheck": true,

	// Controls when diagnostics are run.
	//  - onType: Diagnostics will run as changes are made to the document.
	//  - onSave: Diagnostics will run when the document is saved.
	"intelephense.diagnostics.run": "onType",

	// Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
	"intelephense.diagnostics.typeErrors": true,

	// Enables undefined class constant diagnostics.
	"intelephense.diagnostics.undefinedClassConstants": true,

	// Enables undefined constant diagnostics.
	"intelephense.diagnostics.undefinedConstants": true,

	// Enables undefined function diagnostics.
	"intelephense.diagnostics.undefinedFunctions": true,

	// Enables undefined method diagnostics.
	"intelephense.diagnostics.undefinedMethods": true,

	// Enables undefined property diagnostics.
	"intelephense.diagnostics.undefinedProperties": true,

	// DEPRECATED. Use the setting for each symbol category.
	"intelephense.diagnostics.undefinedSymbols": true,

	// Enables undefined class, interface and trait diagnostics.
	"intelephense.diagnostics.undefinedTypes": true,

	// Enables undefined variable diagnostics.
	"intelephense.diagnostics.undefinedVariables": true,

	// Enables unexpected token diagnostics.
	"intelephense.diagnostics.unexpectedTokens": true,

	// Enables unused variable, private member, and import diagnostics.
	"intelephense.diagnostics.unusedSymbols": true,

	// The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.
	"intelephense.environment.documentRoot": "",

	// The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and/or adding external symbols to folder.
	"intelephense.environment.includePaths": [],

	// A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.
	"intelephense.environment.phpVersion": "8.4.0",

	// When enabled '<?' will be parsed as a PHP open tag. Defaults to true.
	"intelephense.environment.shortOpenTag": true,

	// Configure glob patterns to make files available for language server features. Inherits from files.associations.
	"intelephense.files.associations": [
		"*.php",
		"*.phtml"
	],

	// Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
	"intelephense.files.exclude": [
		"**/.git/**",
		"**/.svn/**",
		"**/.hg/**",
		"**/CVS/**",
		"**/.DS_Store/**",
		"**/node_modules/**",
		"**/bower_components/**",
		"**/vendor/**/{Tests,tests}/**",
		"**/.history/**",
		"**/vendor/**/vendor/**"
	],

	// Maximum file size in bytes.
	"intelephense.files.maxSize": 1000000,

	// Controls formatting style of braces
	//  - per: PHP-FIG PER-CS style. A mix of Allman and K&R. https://www.php-fig.org/per/coding-style/
	//  - allman: Allman. Opening brace on the next line.
	//  - k&r: K&R (1TBS). Opening brace on the same line.
	"intelephense.format.braces": "per",

	// Enables formatting.
	"intelephense.format.enable": true,

	// DEPRECATED. Don't use this. Go to command palette and search for enter licence key.
	"intelephense.licenceKey": "",

	// Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
	"intelephense.maxMemory": 0,

	// An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.classTemplate": {
		"summary": "$1",
		"tags": [
			"@package ${1:$SYMBOL_NAMESPACE}"
		]
	},

	// An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.functionTemplate": {
		"summary": "$1",
		"tags": [
			"@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2",
			"@return ${1:$SYMBOL_TYPE} $2",
			"@throws ${1:$SYMBOL_TYPE} $2"
		]
	},

	// An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.propertyTemplate": {
		"summary": "$1",
		"tags": [
			"@var ${1:$SYMBOL_TYPE}"
		]
	},

	// Adds `@return void` to auto generated phpdoc for definitions that do not return a value.
	"intelephense.phpdoc.returnVoid": true,

	// 
	//  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
	//  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
	"intelephense.phpdoc.textFormat": "snippet",

	// Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
	"intelephense.phpdoc.useFullyQualifiedNames": false,

	// Glob patterns matching files and folders that should be excluded from references search.
	"intelephense.references.exclude": [
		"**/vendor/**"
	],

	// Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files/folders.
	"intelephense.rename.exclude": [
		"**/vendor/**"
	],

	// Controls the scope of a namespace rename operation.
	//  - single: Only symbols defined in the current file are affected. For example, this makes a rename of a namespace the equivalent of a single move class operation.
	//  - all: All symbols that share this namespace, not necessarily defined in the current file will be affected. For example it would move all classes that share this namespace to the new namespace.
	"intelephense.rename.namespaceMode": "single",

	// Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.
	"intelephense.runtime": "",

	// Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
	"intelephense.stubs": [
		"apache",
		"bcmath",
		"bz2",
		"calendar",
		"com_dotnet",
		"Core",
		"ctype",
		"curl",
		"date",
		"dba",
		"dom",
		"enchant",
		"exif",
		"FFI",
		"fileinfo",
		"filter",
		"fpm",
		"ftp",
		"gd",
		"gettext",
		"gmp",
		"hash",
		"iconv",
		"imap",
		"intl",
		"json",
		"ldap",
		"libxml",
		"mbstring",
		"meta",
		"mysqli",
		"oci8",
		"odbc",
		"openssl",
		"pcntl",
		"pcre",
		"PDO",
		"pgsql",
		"Phar",
		"posix",
		"pspell",
		"random",
		"readline",
		"Reflection",
		"session",
		"shmop",
		"SimpleXML",
		"snmp",
		"soap",
		"sockets",
		"sodium",
		"SPL",
		"sqlite3",
		"standard",
		"superglobals",
		"sysvmsg",
		"sysvsem",
		"sysvshm",
		"tidy",
		"tokenizer",
		"xml",
		"xmlreader",
		"xmlrpc",
		"xmlwriter",
		"xsl",
		"Zend OPcache",
		"zip",
		"zlib"
	],

	// Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
	"intelephense.telemetry.enabled": null,

	// Traces the communication between VSCode and the intelephense language server.
	"intelephense.trace.server": "off",

	// Include parentheses around a sole arrow function parameter.
	"prettier.arrowParens": "always",

	// Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,

	// Controls the printing of spaces inside object literals.
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file.
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on.
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether Prettier is enabled or not. Reload required.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier.
	"prettier.endOfLine": "lf",

	// Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
	"prettier.experimentalTernaries": false,

	// Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
	// Valid options:
	// - `css` - Respect the default value of CSS `display` property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a `.prettierignore` file.
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
	"prettier.insertPragma": false,

	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX.
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the `prettier` module, eg: `./node_modules/prettier`.
	"prettier.prettierPath": "",

	// Fit code within this line limit.
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines.
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted.
	// Valid options:
	// - `"as-needed"` - Only add quotes around object properties where required.
	// - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
	// - `"preserve"` - Respect the input use of quotes in object properties.
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line.
	"prettier.semi": true,

	// Enforces single attribute per line in HTML, JSX, Vue and Angular.
	"prettier.singleAttributePerLine": false,

	// Use single instead of double quotes.
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab.
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. 
	// Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs.
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
	"prettier.vueIndentScriptAndStyle": false,

	// This extension will process files in `node_modules`.
	"prettier.withNodeModules": false,

	// the trigger effect  on the language
	"shellformat.effectLanguages": [
		"shellscript",
		"dockerfile",
		"dotenv",
		"hosts",
		"jvmoptions",
		"ignore",
		"gitignore",
		"properties",
		"spring-boot-properties",
		"azcli",
		"bats"
	],

	// shfmt -h to see detail usage, example: -p -bn -ci
	"shellformat.flag": null,

	// the shfmt fullpath  example[mac,linux] /usr/local/bin/shfmt  [windows] C:/bin/shfmt.exe   download from https://github.com/mvdan/sh/releases
	"shellformat.path": null,

	// Use EditorConfig for shfmt configuration
	"shellformat.useEditorConfig": false,

	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},

	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.
	"go.alternateTools": {},

	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],

	// Enable the Go language server (`go.useLanguageServer`) to diagnose compile errors.
	// Compiles code on file save using 'go build' or 'go test -c'. Not applicable when using the language server.
	"go.buildOnSave": "package",

	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",

	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},

	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",

	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",

	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,

	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,

	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,

	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,

	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,

	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {},

	// (Experimental) vulncheck enables vulnerability scanning.
	// 
	//  - Imports: `"Imports"`: In Imports mode, `gopls` will report vulnerabilities that affect packages
	// directly and indirectly used by the analyzed main module.
	// 
	//  - Off: `"Off"`: Disable vulnerability analysis.
	// 
	"go.diagnostic.vulncheck": "Off",

	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,

	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},

	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"runtest": true
	},

	// Disable experimental features. These features are only available in the pre-release version.
	"go.experiments": {
		"testExplorer": true
	},

	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],

	// When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `go.alternateTools` section.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style. (not applicable when the language server is enabled)
	//  - goimports: Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat. (Deprecated due to the lack of generics support)
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `gopls.format.gofumpt` instead)
	//  - custom: Formats using the custom tool specified as `customFormatter` in the `go.alternateTools` setting. The tool should take the input as STDIN and output the formatted code as STDOUT.
	"go.formatTool": "default",

	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],

	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.
	"go.gopath": null,

	// Specifies the GOROOT to use when no environment variable is set.
	"go.goroot": null,

	// Infer GOPATH from the workspace root. This is ignored when using Go Modules.
	"go.inferGopath": false,

	// `"assignVariableTypes"` controls inlay hints for variable types in assign statements:
	// ```go
	// 	i/* int*/, j/* int*/ := 0, len(r)-1
	// ```
	// 
	"go.inlayHints.assignVariableTypes": false,

	// `"compositeLiteralFields"` inlay hints for composite literal field names:
	// ```go
	// 	{/*in: */"Hello, world", /*want: */"dlrow ,olleH"}
	// ```
	// 
	"go.inlayHints.compositeLiteralFields": false,

	// `"compositeLiteralTypes"` controls inlay hints for composite literal types:
	// ```go
	// 	for _, c := range []struct {
	// 		in, want string
	// 	}{
	// 		/*struct{ in string; want string }*/{"Hello, world", "dlrow ,olleH"},
	// 	}
	// ```
	// 
	"go.inlayHints.compositeLiteralTypes": false,

	// `"constantValues"` controls inlay hints for constant values:
	// ```go
	// 	const (
	// 		KindNone   Kind = iota/* = 0*/
	// 		KindPrint/*  = 1*/
	// 		KindPrintf/* = 2*/
	// 		KindErrorf/* = 3*/
	// 	)
	// ```
	// 
	"go.inlayHints.constantValues": false,

	// `"functionTypeParameters"` inlay hints for implicit type parameters on generic functions:
	// ```go
	// 	myFoo/*[int, string]*/(1, "hello")
	// ```
	// 
	"go.inlayHints.functionTypeParameters": false,

	// `"parameterNames"` controls inlay hints for parameter names:
	// ```go
	// 	parseInt(/* str: */ "123", /* radix: */ 8)
	// ```
	// 
	"go.inlayHints.parameterNames": false,

	// `"rangeVariableTypes"` controls inlay hints for variable types in range statements:
	// ```go
	// 	for k/* int*/, v/* string*/ := range []string{} {
	// 		fmt.Println(k, v)
	// 	}
	// ```
	// 
	"go.inlayHints.rangeVariableTypes": false,

	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,

	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],

	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],

	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	//  - file: lint the current file on file saving
	//  - package: lint the current package on file saving
	//  - workspace: lint all the packages in the current workspace root folder on file saving
	//  - off: do not run lint automatically
	"go.lintOnSave": "package",

	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",

	// This setting is deprecated. Use 'Developer: Set Log Level...' command to control logging level instead.
	// 
	"go.logging.level": "",

	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},

	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},

	// Specifies whether to show the Welcome experience on first install
	"go.showWelcome": true,

	// Prompt for surveys, including the gopls survey and the Go developer survey.
	"go.survey.prompt": true,

	// enable the default go build/test task provider.
	"go.tasks.provideDefault": true,

	// Apply the Go & PATH environment variables used by the extension to all integrated terminals.
	"go.terminal.activateEnvironment": true,

	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,

	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},

	// Run benchmarks when running all tests in a file or folder.
	"go.testExplorer.alwaysRunBenchmarks": false,

	// Concatenate all test log messages for a given location into a single message.
	"go.testExplorer.concatenateMessages": true,

	// Enable the Go test explorer
	"go.testExplorer.enable": true,

	// Present packages in the test explorer flat or nested.
	"go.testExplorer.packageDisplayMode": "flat",

	// Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
	"go.testExplorer.showDynamicSubtestsInEditor": false,

	// Open the test output terminal when a test run is started.
	"go.testExplorer.showOutput": true,

	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,

	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,

	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,

	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",

	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.
	"go.toolsEnvVars": {},

	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.
	"go.toolsGopath": null,

	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,

	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",

	// The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.
	"go.toolsManagement.go": "",

	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",

	// Enable intellisense, code navigation, refactoring, formatting & diagnostics for Go. The features are powered by the Go language server "gopls".
	"go.useLanguageServer": true,

	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"]). Not applicable when using the language server's diagnostics.
	"go.vetFlags": [],

	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics.
	//  - package: vet the current package on file saving
	//  - workspace: vet all the packages in the current workspace root folder on file saving
	//  - off: do not run vet automatically
	"go.vetOnSave": "package",

	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},

	// The formatter to use when formatting a document or range of a cabal formatter. Ensure the plugin is enabled.
	"haskell.cabalFormattingProvider": "cabal-gild",

	// Whether to typecheck the entire project on load. It could drive to bad performance in large projects.
	"haskell.checkProject": true,

	// The formatter to use when formatting a document or range. Ensure the plugin is enabled.
	"haskell.formattingProvider": "ormolu",

	// Manually set a ghcup executable path.
	"haskell.ghcupExecutablePath": "",

	// If set, redirects the logs to a file.
	"haskell.logFile": "",

	// How to manage/find HLS installations.
	//  - GHCup: Will use ghcup and manage Haskell toolchain in the default location (usually '~/.ghcup')
	//  - PATH: Discovers HLS and other executables in system PATH
	"haskell.manageHLS": "PATH",

	// Maximum number of completions sent to the editor.
	"haskell.maxCompletions": 40,

	// An optional URL to override where ghcup checks for tool download info (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-0.0.7.yaml)
	"haskell.metadataURL": "",

	// When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.
	"haskell.openDocumentationInHackage": true,

	// When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.
	"haskell.openSourceInHackage": true,

	// Enables alternateNumberFormat plugin
	"haskell.plugin.alternateNumberFormat.globalOn": true,

	// Set path to 'cabal-fmt' executable
	"haskell.plugin.cabal-fmt.config.path": "cabal-fmt",

	// Set path to 'cabal-gild' executable
	"haskell.plugin.cabal-gild.config.path": "cabal-gild",

	// Enables cabal code actions
	"haskell.plugin.cabal.codeActionsOn": true,

	// Enables cabal completions
	"haskell.plugin.cabal.completionOn": true,

	// Enables cabal diagnostics
	"haskell.plugin.cabal.diagnosticsOn": true,

	// Enables cabal hover
	"haskell.plugin.cabal.hoverOn": true,

	// Enables cabal symbols
	"haskell.plugin.cabal.symbolsOn": true,

	// Enables cabalHaskellIntegration plugin
	"haskell.plugin.cabalHaskellIntegration.globalOn": true,

	// Enables callHierarchy plugin
	"haskell.plugin.callHierarchy.globalOn": true,

	// Enables changeTypeSignature plugin
	"haskell.plugin.changeTypeSignature.globalOn": true,

	// Enables class code actions
	"haskell.plugin.class.codeActionsOn": true,

	// Enables class code lenses
	"haskell.plugin.class.codeLensOn": true,

	// Enable the diff output (WAS/NOW) of eval lenses
	"haskell.plugin.eval.config.diff": true,

	// Enable marking exceptions with `*** Exception:` similarly to doctest and GHCi.
	"haskell.plugin.eval.config.exception": false,

	// Enables eval plugin
	"haskell.plugin.eval.globalOn": true,

	// Enables explicit-fields code actions
	"haskell.plugin.explicit-fields.codeActionsOn": true,

	// Enables explicit-fields inlay hints
	"haskell.plugin.explicit-fields.inlayHintsOn": true,

	// Enables explicit-fixity plugin
	"haskell.plugin.explicit-fixity.globalOn": true,

	// Call out to an external "fourmolu" executable, rather than using the bundled library.
	"haskell.plugin.fourmolu.config.external": false,

	// Set path to executable (for "external" mode).
	"haskell.plugin.fourmolu.config.path": "fourmolu",

	// Enables gadt plugin
	"haskell.plugin.gadt.globalOn": true,

	// Enables ghcide-code-actions-bindings plugin
	"haskell.plugin.ghcide-code-actions-bindings.globalOn": true,

	// Enables ghcide-code-actions-fill-holes plugin
	"haskell.plugin.ghcide-code-actions-fill-holes.globalOn": true,

	// Enables ghcide-code-actions-imports-exports plugin
	"haskell.plugin.ghcide-code-actions-imports-exports.globalOn": true,

	// Enables ghcide-code-actions-type-signatures plugin
	"haskell.plugin.ghcide-code-actions-type-signatures.globalOn": true,

	// Extends the import list automatically when completing a out-of-scope identifier
	"haskell.plugin.ghcide-completions.config.autoExtendOn": true,

	// Inserts snippets when using code completions
	"haskell.plugin.ghcide-completions.config.snippetsOn": true,

	// Enables ghcide-completions plugin
	"haskell.plugin.ghcide-completions.globalOn": true,

	// Enables ghcide-hover-and-symbols hover
	"haskell.plugin.ghcide-hover-and-symbols.hoverOn": true,

	// Enables ghcide-hover-and-symbols symbols
	"haskell.plugin.ghcide-hover-and-symbols.symbolsOn": true,

	// Control how type lenses are shown
	//  - always: Always displays type lenses of global bindings
	//  - exported: Only display type lenses of exported global bindings
	//  - diagnostics: Follows error messages produced by GHC about missing signatures
	"haskell.plugin.ghcide-type-lenses.config.mode": "always",

	// Enables ghcide-type-lenses plugin
	"haskell.plugin.ghcide-type-lenses.globalOn": true,

	// Enables hlint code actions
	"haskell.plugin.hlint.codeActionsOn": true,

	// Flags used by hlint
	"haskell.plugin.hlint.config.flags": [],

	// Enables hlint diagnostics
	"haskell.plugin.hlint.diagnosticsOn": true,

	// Enables importLens code actions
	"haskell.plugin.importLens.codeActionsOn": true,

	// Enables importLens code lenses
	"haskell.plugin.importLens.codeLensOn": true,

	// Enables importLens inlay hints
	"haskell.plugin.importLens.inlayHintsOn": true,

	// Enables moduleName plugin
	"haskell.plugin.moduleName.globalOn": true,

	// Call out to an external "ormolu" executable, rather than using the bundled library
	"haskell.plugin.ormolu.config.external": false,

	// Enables overloaded-record-dot plugin
	"haskell.plugin.overloaded-record-dot.globalOn": true,

	// Enables pragmas-completion plugin
	"haskell.plugin.pragmas-completion.globalOn": true,

	// Enables pragmas-disable plugin
	"haskell.plugin.pragmas-disable.globalOn": true,

	// Enables pragmas-suggest plugin
	"haskell.plugin.pragmas-suggest.globalOn": true,

	// Enables qualifyImportedNames plugin
	"haskell.plugin.qualifyImportedNames.globalOn": true,

	// Enable experimental cross-module renaming
	"haskell.plugin.rename.config.crossModule": false,

	// Enables rename plugin
	"haskell.plugin.rename.globalOn": true,

	// Enables retrie plugin
	"haskell.plugin.retrie.globalOn": true,

	// LSP semantic token type to use for typeclass methods
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.classMethodToken": "method",

	// LSP semantic token type to use for typeclasses
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.classToken": "class",

	// LSP semantic token type to use for data constructors
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.dataConstructorToken": "enumMember",

	// LSP semantic token type to use for functions
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.functionToken": "function",

	// LSP semantic token type to use for modules
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.moduleToken": "namespace",

	// LSP semantic token type to use for operators
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.operatorToken": "operator",

	// LSP semantic token type to use for pattern synonyms
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.patternSynonymToken": "macro",

	// LSP semantic token type to use for record fields
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.recordFieldToken": "property",

	// LSP semantic token type to use for type constructors
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.typeConstructorToken": "enum",

	// LSP semantic token type to use for type families
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.typeFamilyToken": "interface",

	// LSP semantic token type to use for type synonyms
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.typeSynonymToken": "type",

	// LSP semantic token type to use for type variables
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.typeVariableToken": "typeParameter",

	// LSP semantic token type to use for variables
	//  - namespace: LSP Semantic Token Type: namespace
	//  - type: LSP Semantic Token Type: type
	//  - class: LSP Semantic Token Type: class
	//  - enum: LSP Semantic Token Type: enum
	//  - interface: LSP Semantic Token Type: interface
	//  - struct: LSP Semantic Token Type: struct
	//  - typeParameter: LSP Semantic Token Type: typeParameter
	//  - parameter: LSP Semantic Token Type: parameter
	//  - variable: LSP Semantic Token Type: variable
	//  - property: LSP Semantic Token Type: property
	//  - enumMember: LSP Semantic Token Type: enumMember
	//  - event: LSP Semantic Token Type: event
	//  - function: LSP Semantic Token Type: function
	//  - method: LSP Semantic Token Type: method
	//  - macro: LSP Semantic Token Type: macro
	//  - keyword: LSP Semantic Token Type: keyword
	//  - modifier: LSP Semantic Token Type: modifier
	//  - comment: LSP Semantic Token Type: comment
	//  - string: LSP Semantic Token Type: string
	//  - number: LSP Semantic Token Type: number
	//  - regexp: LSP Semantic Token Type: regexp
	//  - operator: LSP Semantic Token Type: operator
	//  - decorator: LSP Semantic Token Type: decorator
	"haskell.plugin.semanticTokens.config.variableToken": "variable",

	// Enables semanticTokens plugin
	"haskell.plugin.semanticTokens.globalOn": false,

	// Enables splice plugin
	"haskell.plugin.splice.globalOn": true,

	// Enables stan plugin
	"haskell.plugin.stan.globalOn": false,

	// Prompt before performing any downloads.
	"haskell.promptBeforeDownloads": "true",

	// An optional path where downloaded metadata will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)
	"haskell.releasesDownloadStoragePath": "",

	// An optional URL to override where ghcup checks for HLS-GHC compatibility list (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/hls-metadata-0.0.1.json)
	"haskell.releasesURL": "",

	// Define environment variables for the language server.
	"haskell.serverEnvironment": {},

	// Manually set a language server executable. Can be something on the $PATH or the full path to the executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`.
	"haskell.serverExecutablePath": "",

	// Pass additional arguments to the language server.
	"haskell.serverExtraArgs": "",

	// Preferred approach for loading package components. Setting this to 'multiple components' (EXPERIMENTAL) allows the build tool (such as `cabal` or `stack`) to [load multiple components at once](https://github.com/haskell/cabal/pull/8726), which is a significant improvement.
	//  - singleComponent: Always load only a single component at a time. This is the most reliable option if you encountered any issues with the other options.
	//  - multipleComponents: Prefer a multiple component session, if the build tool supports it. At the moment, only `cabal` supports multiple components session loading. If the `cabal` version does not support loading multiple components at once, we gracefully fall back to "singleComponent" mode.
	"haskell.sessionLoading": "singleComponent",

	// Enable Language Server support for `.cabal` files. Requires Haskell Language Server version >= 1.9.0.0.
	//  - enable: Enable Language Server support for `.cabal` files
	//  - disable: Disable Language Server support for `.cabal` files
	//  - automatic: Enable Language Server support for `.cabal` files if the HLS version supports it.
	"haskell.supportCabalFiles": "automatic",

	// When manageHLS is set to GHCup, this can overwrite the automatic toolchain configuration with a more specific one. When a tool is omitted, the extension will manage the version (for 'ghc' we try to figure out the version the project requires). The format is '{"tool": "version", ...}'. 'version' accepts all identifiers that 'ghcup' accepts.
	"haskell.toolchain": {},

	// Sets the log level in the client side.
	"haskell.trace.client": "info",

	// Traces the communication between VS Code and the language server.
	"haskell.trace.server": "off",

	// Whether to upgrade GHCup automatically when 'manageHLS' is set to 'GHCup'.
	"haskell.upgradeGHCup": true,

	// Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc.
	"haskell.indentationRules.enabled": true,

	// If true an empty line will be inserted after opening curly braces and before closing curly braces.
	"twig-language-2.braceLine": false,

	// Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings.
	"twig-language-2.bracePadding": false,

	// Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line.
	"twig-language-2.braces": false,

	// Emulates JSBeautify's brace_style option using existing Pretty Diff options.
	"twig-language-2.braceStyle": "none",

	// If a blank new line should be forced above comments.
	"twig-language-2.commentLine": false,

	// This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.
	"twig-language-2.comments": false,

	// If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors.
	"twig-language-2.compressedCss": false,

	// Automatically correct some sloppiness in code.
	"twig-language-2.correct": false,

	// Inserts new line characters between every CSS code block.
	"twig-language-2.cssInsertLines": false,

	// If else_line is true then the keyword 'else' is forced onto a new line.
	"twig-language-2.elseLine": false,

	// If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff.
	"twig-language-2.endComma": false,

	// If all markup attributes should be indented each onto their own line.
	"twig-language-2.forceAttribute": false,

	// Will force indentation upon all content and tags without regard for the creation of new text nodes.
	"twig-language-2.forceIndent": false,

	// Determines if all array indexes should be indented, never indented, or left to the default.
	"twig-language-2.formatArray": "default",

	// Determines if all object keys should be indented, never indented, or left to the default.
	"twig-language-2.formatObject": "default",

	// Whether to enable/disable Twig PrettyDiff formatting.
	"twig-language-2.formatting": true,

	// If a space should follow a JavaScript function name.
	"twig-language-2.functionName": false,

	// Whether to enable/disable Twig hover.
	"twig-language-2.hover": true,

	// How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries.
	"twig-language-2.indentLevel": 0,

	// Choose to indent using tabs or spaces. This formatter will not use the "Editor: Insert Spaces" setting, nor will it use the `indent_style` setting declared in `.editorconfig` files.
	"twig-language-2.indentStyle": "tab",

	// When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken.
	"twig-language-2.methodChain": 0,

	// If destructured lists in script should never be flattend.
	"twig-language-2.neverFlatten": false,

	// Insert an empty line at the end of output.
	"twig-language-2.newLine": true,

	// If a case statement should receive the same indentation as the containing switch block.
	"twig-language-2.noCaseIndent": false,

	// Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented.
	"twig-language-2.noLeadZero": false,

	// Sorts markup attributes and properties by key name in script and style.
	"twig-language-2.objectSort": false,

	// The maximum number of consecutive empty lines to retain.
	"twig-language-2.preserve": 2,

	// Prevent comment reformatting due to option wrap.
	"twig-language-2.preserveComment": false,

	// If the quotes of script strings or markup attributes should be converted to single quotes or double quotes.
	"twig-language-2.quoteConvert": "none",

	// Inserts a space following the function keyword for anonymous functions.
	"twig-language-2.space": true,

	// Markup self-closing tags end will end with ' />' instead of '/>'.
	"twig-language-2.spaceClose": false,

	// 0 will default to the editor's tab size (`editor.tabSize`). This formatter will not use the `indent_size` setting declared in `.editorconfig` files.
	"twig-language-2.tabSize": 0,

	// Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag.
	"twig-language-2.tagMerge": false,

	// Sort child items of each respective markup parent element.
	"twig-language-2.tagSort": false,

	// If ternary operators in JavaScript ? and : should remain on the same line.
	"twig-language-2.ternaryLine": true,

	// If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer.
	"twig-language-2.unformatted": false,

	// If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated.
	"twig-language-2.variableList": "none",

	// If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer.
	"twig-language-2.vertical": false,

	// Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings.
	"twig-language-2.wrap": 0,

	// Sets the log level for messages sent by the debugger for the Debug Console. [Learn more...](https://aka.ms/vscode/dotnet/debugConsoleVerbosity)
	//  - minimal: Show minimal details in the debug console. Additional information is available in the 'C# Debugger' output window channel.
	//  - verbose: Show all information in the debug console.
	"csharp.debug.debugConsoleVerbosity": "minimal",

	// When true, saving a file will automatically apply changes when Hot Reload is available.
	"csharp.debug.hotReloadOnSave": true,

	// The verbosity of logging in the Output Panel for '.NET Hot Reload'. The order of levels from least verbose to most verbose is: 'minimal' < 'detailed' < 'diagnostic' (default: 'minimal')
	//  - minimal: Show only minimal information.
	//  - detailed: Show detailed information about how changes are found and applied to the target process.
	//  - diagnostic: Show diagnostic information on each step of a hot reload operation. Useful when diagnosing unexpected behaviors.
	"csharp.debug.hotReloadVerbosity": "minimal",

	// [Experimental] Enables C# Hot Reload while debugging.
	"csharp.experimental.debug.hotReload": false,

	// [Preview] Enables an improved launch experience with UI for choosing startup projects and launch configurations. VS Code must be restarted for changes to take effect.
	"csharp.preview.improvedLaunchExperience": true,

	// Controls auto detection of dotnet tasks.
	"dotnet.autoDetect": "on",

	// Automatically create a solution file in the workspace if one does not exist. This may not work correctly for all cases.
	"dotnet.automaticallyCreateSolutionInWorkspace": true,

	// Enables/disables the feature for the extension to automatically track the currently active item in the editor and highlight it within the Solution Explorer.
	"dotnet.automaticallySyncWithActiveItem": false,

	// Controls whether the extension uses the default Visual Studio Code File System Watcher. This is recommended if you have a files.watcherExclude setting.
	"dotnet.preferVisualStudioCodeFileSystemWatcher": false,

	// [Preview] Prevent the automatic creation of solution files in workspaces that do not already contain one. This feature takes priority over the 'Automatically Create Solution In Workspace' setting, even if it is enabled.
	"dotnet.previewSolution-freeWorkspaceMode": false,

	// Disable automatic test discovery when test binaries change on disk. This can avoid file locking issues when building large solutions.
	"dotnet.testWindow.disableAutoDiscovery": false,

	// Disable automatic build when triggering a test discovery refresh. If this option is set, you must manually build your tests before refresh to make sure they are up to date.
	"dotnet.testWindow.disableBuildOnRefresh": false,

	// Disable automatic build before running tests. If this option is set, you must manually build your tests before running to make sure they are up to date.
	"dotnet.testWindow.disableBuildOnRun": false,

	// Enables the Test Explorer to show the diff of the test results.
	"dotnet.testWindow.enableTestExplorerDiff": false,

	// Disable checks for projects with compatible target frameworks. This may cause unstable or broken test behavior. Use at your own risk.
	"dotnet.testWindow.skipTargetFrameworkCompatibilityCheck": false,

	// Sets the verbosity of logging in the 'C# DevKit - Test Explorer' output window
	//  - minimal: Show minimal details in 'C# devkit - Test Explorer' output window.
	//  - diagnostic: Show diagnostic information in 'C# devkit - Test Explorer' output window.
	//  - trace: Includes Platform logs.
	"dotnet.testWindow.testExplorerVerbosity": "minimal",

	// Enables projects that are using Microsoft.Testing.Platform to communicate via Microsoft.Testing.Platform server protocol instead of using VSTest Translation Layer protocol. See https://aka.ms/mtp-overview for more information.
	"dotnet.testWindow.useTestingPlatformProtocol": false,

	// Use the legacy dotnet resolution. This is a temporary option to workaround potential issues with the new logic.
	"dotnet.useLegacyDotnetResolution": false,

	// Working with ad-hoc signed SDK on a Mac computer. This option forces the C# Dev Kit extension to work in a slower compatible mode, and should only be turned on environment when it is essential.
	"dotnet.workingWithTestSignedSdk": false,

	// Include prerelease package versions for all NuGet package operations.
	"nuget.includePrereleasePackageVersions": false,

	// If you'd like to continue using a .NET path that is not meant to be used for an extension and may cause instability (please read above about the existingDotnetPath setting) then set this to true and restart.
	"dotnetAcquisitionExtension.allowInvalidPaths": false,

	// To improve performance, the results of checking .NET Installations may be cached. If you're facing issues with an install not being detected, try setting this to 0.5, or 0; or increasing the number to improve performance. Restart to change.
	"dotnetAcquisitionExtension.cacheTimeToLiveMultiplier": 1,

	// Enable Preview Features for the Extension. Restart VS Code to apply changes.
	"dotnetAcquisitionExtension.enablePreviewFeatures": false,

	// Enable Telemetry for the .NET Install Tool. Restart VS Code to apply changes.
	"dotnetAcquisitionExtension.enableTelemetry": true,

	// The path to an existing .NET host executable for an extension's code to run under, not for your project to run under.
	// Restart VS Code to apply changes.
	// 
	// ⚠️ This is NOT the .NET Runtime that your project will use to run. Extensions such as `C#`, `C# DevKit`, and more have components written in .NET. This .NET PATH is the `dotnet.exe` that these extensions will use to run their code, not your code.
	// 
	// Using a path value in which .NET does not meet the requirements of a specific extension will cause that extension to fail.
	// 
	// 🚀 The version of .NET that is used for your project is determined by the .NET host, or dotnet.exe. The .NET host picks a runtime based on your project. To use a specific version of .NET for your project, install the .NET SDK using the `.NET Install Tool - Install SDK System-Wide` command, install .NET manually using [our instructions](https://dotnet.microsoft.com/download), or edit your PATH environment variable to point to a `dotnet.exe` that has an `/sdk/` folder with only one SDK.
	"dotnetAcquisitionExtension.existingDotnetPath": [],

	// Timeout for installing .NET in seconds.
	"dotnetAcquisitionExtension.installTimeoutValue": 600,

	// URL to a proxy if you use one, such as: https://proxy:port
	"dotnetAcquisitionExtension.proxyUrl": "",

	// The path of the preexisting .NET Runtime you'd like to use for ALL extensions. Restart VS Code to apply changes.
	"dotnetAcquisitionExtension.sharedExistingDotnetPath": "",

	// Show the command to reset extension data in the command palette. Restart VS Code and remove dependent extensions first.
	"dotnetAcquisitionExtension.showResetDataCommand": false,

	// The default environment manager for creating and managing environments.
	"python-envs.defaultEnvManager": "ms-python.python:venv",

	// The default package manager for installing packages in environments.
	"python-envs.defaultPackageManager": "ms-python.python:pip",

	// The list of Python projects.
	"python-envs.pythonProjects": [],

	// Specifies how the extension can activate an environment in a terminal.
	// 
	// Utilizing Shell Startup requires changes to the shell script file and is only enabled for the following shells: zsh, fsh, pwsh, bash, cmd. When set to `command`, any shell can be activated.
	// 
	// This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
	// 
	// To revert changes made during shellStartup, run `Python Envs: Revert Shell Startup Script Changes`.
	//  - command: Activation by executing a command in the terminal.
	//  - shellStartup: Activation by modifying the terminal shell startup script. To use this feature we will need to modify your shell startup scripts.
	//  - off: No automatic activation of environments.
	"python-envs.terminal.autoActivationType": "command",

	// Whether to show the 'Activate' button in the terminal menu
	"python-envs.terminal.showActivateButton": false,

	// If set, the output in the WSL log shows debug information.
	"remote.WSL.debug": false,

	// If set, the WSL extension will download the latest server build in the background. It does this for all WSL platforms that were used in the last 2 weeks.
	"remote.WSL.downloadInBackground": true,

	// If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// If set, the WSL windows gets the environment from the shell it was opened from.
	"remote.WSL.useShellEnvironment": true,

	// No longer used, 'wsl.exe' is now always used to forward the connection to WSL.
	// 
	"remote.WSL1.connectionMethod": "",

	// No longer used, 'wsl.exe' is  now always used to forward the connection to WSL.
	// 
	"remote.WSL2.connectionMethod": "",

	// Controls the auto-completion provider. If `disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": <value>}` (and similarly for `c` and `cuda-cpp` languages).
	//  - default: Uses the active IntelliSense engine.
	//  - disabled: Uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "default",

	// If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
	"C_Cpp.autocompleteAddParentheses": false,

	// If enabled, code folding ranges are provided by the language server.
	"C_Cpp.codeFolding": "enabled",

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "enabled",

	// The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.databaseFilename": "",

	// The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
	"C_Cpp.default.compileCommands": [
		""
	],

	// The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerArgs": [],

	// The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
	"C_Cpp.default.configurationProvider": "",

	// The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cppStandard": "",

	// The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cStandard": "",

	// The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
	"C_Cpp.default.customConfigurationVariables": null,

	// The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
	"C_Cpp.default.defines": [],

	// The value to use in a configuration if `dotConfig` is either not specified or set to `${default}`.
	"C_Cpp.default.dotConfig": "",

	// Controls whether the extension will report errors detected in `c_cpp_properties.json`.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
	"C_Cpp.default.forcedInclude": [],

	// The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
	"C_Cpp.default.includePath": [],

	// The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
	"C_Cpp.default.intelliSenseMode": "",

	// The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
	"C_Cpp.default.macFrameworkPath": [],

	// The value to use in a configuration if `mergeConfigurations` is either not specified or set to `${default}`.
	"C_Cpp.default.mergeConfigurations": false,

	// The value to use in a configuration if `recursiveIncludes.order` is either not specified or set to `${default}`.
	"C_Cpp.default.recursiveIncludes.order": "",

	// The value to use in a configuration if `recursiveIncludes.priority` is either not specified or set to `${default}`.
	"C_Cpp.default.recursiveIncludes.priority": "",

	// The value to use in a configuration if `recursiveIncludes.reduce` is either not specified or set to `${default}`.
	"C_Cpp.default.recursiveIncludes.reduce": "",

	// The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
	"C_Cpp.default.systemIncludePath": [],

	// Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
	"C_Cpp.default.windowsSdkVersion": "",

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `default`.
	"C_Cpp.enhancedColorization": "enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "enabledIfIncludesResolve",

	// Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	//  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
	//  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Learn more about [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true,
		"**/.vs": true
	},

	// If disabled, hover details are no longer provided by the language server.
	"C_Cpp.hover": "default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Display inlay hints for deduced type when `auto` is used in a declaration:
	// ```cpp 
	// 
	//  auto index /* : int */ = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,

	// Display inlay hints for deduced type when `auto` is used in a declaration on the left of the identifier:
	// ```cpp 
	// 
	//  auto /* int */ index = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,

	// Display inlay hints for parameter names:
	// ```cpp 
	// 
	//  int a = getArea(/* width: */ x, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.enabled": false,

	// Hide leading `_` in parameter name hints.
	"C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,

	// Suppress parameter name hints when the argument text or inline comment contains the parameter name:
	// ```cpp 
	// 
	//  int a = getArea(width, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,

	// Display the inlay hint reference operator `&` for parameters passed by non-const reference:
	// ```cpp 
	// 
	//  swap(/* &first: */ str1, /* &last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.enabled": false,

	// Controls whether a space is shown after `&` for parameters passed by non-const reference:
	// ```cpp 
	// 
	//  swap(/* & first: */ str1, /* & last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.showSpace": false,

	// Controls the IntelliSense provider.
	//  - default: Provides context-aware results via a separate IntelliSense process.
	//  - Tag Parser: Provides "fuzzy" results that are not context-aware.
	//  - disabled: Turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "default",

	// Controls the delay in milliseconds before IntelliSense starts updating after a modification.
	"C_Cpp.intelliSenseUpdateDelay": 1000,

	// Enable pre-v1.10.0 behavior for how shell escaping is handled in compiler arg settings. Shell escaping is no longer expected or supported by default in arg arrays starting in v1.10.0.
	"C_Cpp.legacyCompilerArgsBehavior": false,

	// Controls whether to include the header file of a refactored function/symbol to its corresponding source file when doing a refactoring action, such as create declaration/definition.
	//  - always: Always include the header file if it is not included explicitly in its source file.
	//  - ifNeeded: Only include the header file if it is not included explicitly in its source file or through implicit inclusion.
	//  - never: Never include the header file.
	"C_Cpp.refactoring.includeHeader": "always",

	// If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If `true`, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
	"C_Cpp.workspaceSymbols": "Just My Code",

	// Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used unless the version bundled with the extension is newer. If not found in the environment path, the `clang-format` bundled with the extension will be used.
	"C_Cpp.clang_format_path": "",

	// If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory, or use `file:<path>/.clang-format` to reference a specific path. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_style": "file",

	// Configures the formatting engine.
	//  - clangFormat: `clang-format` will be used to format code.
	//  - vcFormat: The Visual C++ formatting engine will be used to format code.
	//  - default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
	//  - disabled: Code formatting will be disabled.
	"C_Cpp.formatting": "default",

	// Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Braces are indented by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.braces": false,

	// Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// The position of goto labels.
	//  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Position goto labels at the leftmost edge of the code.
	//  - none: Goto labels will not be formatted.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Determines what new line indentation is relative to.
	//  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
	//  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
	//  - statementBegin: Indent new line relative to the beginning of the current statement.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// The position of preprocessor directives.
	//  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
	//  - none: Preprocessor directives will not be formatted.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// Indentation of comments is not changed during formatting operations.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// In existing code, preserve the existing indent alignment of new lines within parentheses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: New line is aligned under the opening parenthesis.
	//  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Place `catch` and similar keywords on a new line.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Place `else` on a new line.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// The position of opening braces for control blocks.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// The position of opening braces for functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// The position of opening braces for lambda functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// The position of opening braces for namespaces.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// The position of opening braces for type definitions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Place `while` in a `do`-`while` loop on a new line.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// For empty function bodies, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// For empty types, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Place opening and closing braces for scopes on separate lines.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// A space is added after the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// A space is added after every comma.
	"C_Cpp.vcFormat.space.afterComma": true,

	// A space is added between the keyword and opening parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Spaces around assignment operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Spaces around binary operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Spaces around conditional operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// A space is added before the opening braces of scope blocks.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// A space is added before every comma.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// A space is added before the colon in constructor definitions.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// When square brackets are empty, a space is added before the opening bracket.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Spacing between function names and opening parentheses of argument lists.
	//  - insert: Add a space before the opening parenthesis of a function.
	//  - remove: Spaces before opening parenthesis of a function are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// A space is added before the colon for inherited types in class definitions.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// A space is added before the opening brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// A space is added before the opening parenthesis of lambda argument lists.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// A space is added before opening square brackets.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// When braces are empty and on the same line, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// When a function parameter list is empty, a space is inserted between its parentheses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// A space is inserted after every semicolon.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Spaces around pointer and reference operators.
	//  - left: Pointer and reference operators are aligned to the left.
	//  - center: Pointer and reference operators are centered.
	//  - right: Pointer and reference operators are aligned to the right.
	//  - ignore: Pointer and reference operators are not formatted.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Spaces around commas are preserved inside uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Spaces between unary operators and operands are removed.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Spaces are removed before every semicolon.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Wrapping options for blocks.
	//  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// The string of characters used as the starting line of the Doxygen comment.
	"C_Cpp.doxygen.generatedStyle": "///",

	// Controls whether to automatically insert the Doxygen comment after typing the chosen comment style.
	"C_Cpp.doxygen.generateOnType": true,

	// Select the Doxygen section tags that you would like to appear on hover in the tooltip area when the 'Simplify Structured Comments' setting is enabled. 
	"C_Cpp.doxygen.sectionTags": [
		"attention",
		"tparam",
		"param",
		"result",
		"returns",
		"retval",
		"exception",
		"deprecated",
		"warning",
		"note"
	],

	// Select whether markdown will be available in the hover tooltip. By default, only a subset of markdown will be applied to comments in the hover tooltip.
	//  - subsetEnabled: Enable all markdown features in the hover tooltip except those that include the '_' and '*' characters.
	//  - enabled: Enable all markdown features in the hover tooltip.
	//  - disabled: Disable all markdown features in the hover tooltip.
	"C_Cpp.markdownInComments": "subsetEnabled",

	// If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
	"C_Cpp.simplifyStructuredComments": true,

	// Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.
	"C_Cpp.codeAnalysis.clangTidy.args": [],

	// List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any.
	"C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],

	// List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `C_Cpp.codeAnalysis.clangTidy.config`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.
	"C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],

	// If `true`, formatting will be run on the lines changed by 'Fix' code actions.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,

	// Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.
	//  - None: Show no 'Clear' code actions.
	//  - AllOnly: Show only the 'Clear all' code action (or 'Clear all <type>' if there is only one type or 'Clear this' if there is only one problem).
	//  - AllAndAllType: Show the 'Clear all' code action (if there are multiple problem types) and the 'Clear all <type>' code action (or 'Clear this' if there is only one problem for the <type>)
	//  - AllAndAllTypeAndThis: Show the 'Clear all' (if there are multiple problem types), 'Clear all <type>' (if there are multiple problems for the <type>), and 'Clear this' code actions
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",

	// If `true`, the 'Disable' code action will be shown when available (the next time code analysis is run). When the 'Disable' code action is used, it adds the warning code to the `C_Cpp.codeAnalysis.clangTidy.checks.disabled` setting.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,

	// If `true`, the 'Show Documentation for' code action will be shown when available (the next time code analysis is run).
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,

	// Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.
	"C_Cpp.codeAnalysis.clangTidy.config": "",

	// If `true`, code analysis using `clang-tidy` will be enabled and will run after a file is opened or saved if `C_Cpp.codeAnalysis.runAutomatically` is `true` (the default).
	"C_Cpp.codeAnalysis.clangTidy.enabled": false,

	// Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `C_Cpp.codeAnalysis.clangTidy.config` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.
	"C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",

	// A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.
	"C_Cpp.codeAnalysis.clangTidy.headerFilter": null,

	// The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used unless the version bundled with the extension is newer. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.
	"C_Cpp.codeAnalysis.clangTidy.path": "",

	// If `true` and `compileCommands` is set, the `-p=<build-path>` argument is passed to `clang-tidy` instead of build arguments being passed after `--`. This may not work if environment variables aren't set so that system includes can be found.
	"C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,

	// Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `files.exclude#` and `#C_Cpp.files.exclude`. Learn more about [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.codeAnalysis.exclude": {},

	// The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.codeAnalysis.maxConcurrentThreads": null,

	// Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.codeAnalysis.maxMemory": null,

	// If `true`, code analysis will run automatically on a file after it is opened or saved.
	"C_Cpp.codeAnalysis.runAutomatically": true,

	// Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically` is `true`.
	"C_Cpp.codeAnalysis.updateDelay": 2000,

	// If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// Show the "Run and Debug" play button and "Add Debug Configuration" gear in the editor title bar for C++ files.
	"C_Cpp.debugShortcut": true,

	// Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.
	"C_Cpp.sshTargetsView": "default",

	// The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.intelliSense.maxCachedProcesses": null,

	// Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.intelliSense.maxMemory": null,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": "",

	// Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.
	"C_Cpp.maxCachedProcesses": null,

	// The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.
	"C_Cpp.maxConcurrentThreads": null,

	// The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.
	"C_Cpp.maxMemory": null,

	// The maximum number of results to show for 'Go to Symbol in Workspace'. The default is `5000`.
	"C_Cpp.maxSymbolSearchResults": 5000,

	// The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `C_Cpp.maxCachedProcesses`.
	"C_Cpp.references.maxCachedProcesses": 0,

	// The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.references.maxConcurrentThreads": null,

	// Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `C_Cpp.maxMemory`.
	"C_Cpp.references.maxMemory": null,

	// Add include paths from `nan` and `node-addon-api` when they are dependencies.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// If set to `default`, the file system of the workspace is assumed to be case insensitive on Windows and case sensitive on macOS or Linux. If set to `enabled`, the file system of the workspace is assumed to be case sensitive on Windows.
	"C_Cpp.caseSensitiveFileSupport": "default",

	// If `disabled`, no 'Generate Copilot summary' option will appear on hover.
	"C_Cpp.copilotHover": "default",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "disabled",

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
	"C_Cpp.loggingLevel": "Error",

	// The character used as a path separator for generated user paths.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// How often to automatically refresh the preview.
	"livePreview.autoRefreshPreview": "On All Changes in Editor",

	// The browser you want to launch when previewing a file in an external browser. Only works for normal preview (non-debug) and only works on desktop.
	"livePreview.customExternalBrowser": "Default",

	// Whether or not to attach the JavaScript debugger on external preview launches.
	"livePreview.debugOnExternalPreview": false,

	// The file to automatically show upon starting the server. Leave blank to open at the index.
	"livePreview.defaultPreviewPath": "",

	// The local IP host address to host your files on.
	"livePreview.hostIP": "127.0.0.1",

	// The extra HTTP headers that should be set in the server's HTTP responses.
	"livePreview.httpHeaders": {
		"Accept-Ranges": "bytes"
	},

	// Whether to notify the user when opening a preview for a file that is not part of the currently opened workspace (or the workspace where the server is hosted).
	"livePreview.notifyOnOpenLooseFile": true,

	// The preferred target for previews.
	"livePreview.openPreviewTarget": "Embedded Preview",

	// Which local port the live preview's server should try initially. If this port number doesn't work, it will increment the port number until it finds a free port.
	"livePreview.portNumber": 3000,

	// How many milliseconds delay to use when debouncing the preview update.
	"livePreview.previewDebounceDelay": 50,

	// How many minutes after closing the embedded preview you want the server to shut off. Set to 0 to have server stay on indefinetely.
	"livePreview.serverKeepAliveAfterEmbeddedPreviewClose": 3,

	// The relative path from the workspace root that the files are served from. Files will be previewed as if the workspace root is at this relative path. If this directory path doesn't exist in your workspace, it will default to the workspace root. This setting only applies if you have a workspace open.
	"livePreview.serverRoot": "",

	// Whether or not to show information messages on server on/off status change.
	"livePreview.showServerStatusNotifications": false,

	// Whether or not to pair external preview instances with the auto-generated server task. When disabled, the server will also not automatically close (until the window is closed).
	"livePreview.tasks.runTaskWithExternalPreview": false,

	// Names of compiler tools to be added to the extension known list
	"makefile.additionalCompilerNames": [],

	// Always run the post-configure script after configure
	"makefile.alwaysPostConfigure": false,

	// Always run the pre-configure script before configure
	"makefile.alwaysPreConfigure": false,

	// Build the current target before launch (debug/run)
	"makefile.buildBeforeLaunch": true,

	// The path to the build log that is read to bypass a dry-run
	"makefile.buildLog": null,

	// Clear the output channel at the beginning of a build
	"makefile.clearOutputBeforeBuild": true,

	// The path to the compilation database file
	"makefile.compileCommandsPath": null,

	// The path to a cache file storing the output of the last dry-run make command. When unset, a file named 'configurationCache.log' is stored at the path specified by the 'makefile.extensionOutputFolder' setting.
	"makefile.configurationCachePath": "",

	// The user defined makefile configurations
	"makefile.configurations": [],

	// Automatically configure Makefile project directories after relevant operations, like change build configuration or makefile target
	"makefile.configureAfterCommand": true,

	// Automatically configure Makefile project directories when any relevant makefiles and/or settings are changed
	"makefile.configureOnEdit": true,

	// Automatically configure Makefile project directories when they are opened
	"makefile.configureOnOpen": null,

	// Various global debugger settings
	"makefile.defaultLaunchConfiguration": null,

	// Arguments to pass to the dry-run make invocation
	"makefile.dryrunSwitches": [
		"--always-make",
		"--keep-going",
		"--print-directory"
	],

	// Names of compiler tools to be excluded from the extension known list
	"makefile.excludeCompilerNames": [],

	// The path to an output file storing all content from the Makefile output channel. Defaults to the value of the 'makefile.extensionOutputFolder' setting.
	"makefile.extensionLog": "",

	// The path to various output files produced by the extension. Defaults to the VS Code workspace storage location.
	"makefile.extensionOutputFolder": "",

	// Don't analyze directory changing commands like cd, push, pop.
	"makefile.ignoreDirectoryCommands": true,

	// The user defined launch (debug/run) configurations
	"makefile.launchConfigurations": [],

	// The logging level for the makefile tools extension
	"makefile.loggingLevel": "Normal",

	// The folder path to be passed to make via the switch -C
	"makefile.makeDirectory": "",

	// The path to the makefile of the project
	"makefile.makefilePath": "",

	// The path to the make tool
	"makefile.makePath": "make",

	// Modify this setting to control the visibility setting in the Makefile Project Outline panel.
	"makefile.panel.visibility": null,

	// Display only the phony targets
	"makefile.phonyOnlyTargets": false,

	// Arguments to pass to the post-configure script
	"makefile.postConfigureArgs": [],

	// The path to the script that needs to be run at least once after configure
	"makefile.postConfigureScript": null,

	// Arguments to pass to the pre-configure script
	"makefile.preConfigureArgs": [],

	// The path to the script that needs to be run at least once before configure
	"makefile.preConfigureScript": null,

	// Commands that are safe to perform command substitution with
	"makefile.safeCommands": [],

	// Save opened files before building or configuring
	"makefile.saveBeforeBuildOrConfigure": true,

	// When enabled, the construct command will execute again on the next hole after a value has been chosen.
	"ocaml.commands.construct.recursiveCalls": true,

	// When enabled, list values that can fill a typed hole after navigating to it.
	"ocaml.commands.typedHoles.constructAfterNavigate": false,

	// Enable/Disable clearing of the output channel before showing a new result.
	"ocaml.commands.typeSelection.alwaysClearOutputChannel": false,

	// Enable/Disable type of selection results to appear in a dedicated output channel in the side panel.
	"ocaml.commands.typeSelection.outputChannelResults": true,

	// Controls whether dune tasks should be automatically detected.
	"ocaml.dune.autoDetect": true,

	// The REPL arguments that the extension uses
	"ocaml.repl.args": null,

	// The path of the REPL that the extension uses
	"ocaml.repl.path": null,

	// Controls whether to use Utop for the REPL if it is installed in the current switch.
	"ocaml.repl.useUtop": true,

	// Determines where to find the sandbox for a given project
	"ocaml.sandbox": null,

	// Extra arguments to pass to ocamllsp.
	"ocaml.server.args": [],

	// Enable/Disable codelens
	"ocaml.server.codelens": true,

	// Enable/Disable dune diagnostics
	"ocaml.server.duneDiagnostics": true,

	// Enable/Disable extended hover
	"ocaml.server.extendedHover": false,

	// Extra environment variables that will be passed to OCaml LSP executable. Useful for debugging purposes mostly.
	"ocaml.server.extraEnv": null,

	// Enable/Disable syntax documentation
	"ocaml.server.syntaxDocumentation": false,

	// The path of the shell that the sandbox terminal uses on Linux
	"ocaml.terminal.shell.linux": null,

	// The path of the shell that the sandbox terminal uses on macOS
	"ocaml.terminal.shell.osx": null,

	// The path of the shell that the sandbox terminal uses on Windows
	"ocaml.terminal.shell.windows": null,

	// The command line arguments that the sandbox terminal uses on Linux
	"ocaml.terminal.shellArgs.linux": null,

	// The command line arguments that the sandbox terminal uses on macOS
	"ocaml.terminal.shellArgs.osx": null,

	// The command line arguments that the sandbox terminal uses on Window
	"ocaml.terminal.shellArgs.windows": null,

	// Controls the logging output of the language server. Valid settings are `off`, `messages`, or `verbose`.
	"ocaml.trace.server": "off",

	// Controls whether to use ocaml-env (if available) for opam commands from OCaml for Windows.
	"ocaml.useOcamlEnv": true,

	// The default option for Active Environment selection is `Save To File`. The `Save To Local Memory` option will save the changes to the `Active Environment` in local memory
	"thunder-client.activeEnvironmentSelection": "Save To File",

	// Auto Run `cURL` request after import. If disabled, the `cURL` request will not be executed after import
	"thunder-client.autoRunCurl": false,

	// List of ssl certificates for hosts
	"thunder-client.certificates": [],

	// Automatically send `Content-Type` header when body is sent in request, If disabled, the `Content-Type` header will not be sent
	"thunder-client.contentType": true,

	// [[Subscription required](https://www.thunderclient.com/pricing)] Enter full folder path to store requests data, `Suitable for storing all requests data in one fixed location`. Also supports home folder `$HOME/path`. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.customLocation": "",

	// Please enter Http Methods separated by comma e.g: `search,subscribe`. Close and Re-open Review View to see changes.
	"thunder-client.customMethods": "",

	// Provide values for Default Headers for the Request
	"thunder-client.defaultHeaders": [
		{
			"name": "Accept",
			"value": "*/*"
		},
		{
			"name": "User-Agent",
			"value": "Thunder Client (https://www.thunderclient.com)"
		}
	],

	// Please provide Default URL of the Request
	"thunder-client.defaultURL": "",

	// Thunder Client editor font size 
	//  - Use 0 to use default font size.
	//  - Use any other value to set custom font size.
	"thunder-client.editorFontSize": 0,

	// Thunder Client Request Body Editor environment variables highlight.
	"thunder-client.editorVariableHighlight": true,

	// Comma separated Host names to exclude from proxy e.g: `abc.com,xyz.com`
	"thunder-client.excludeProxyHostList": "",

	// Follow Redirects when running Requests
	"thunder-client.followRedirects": true,

	// The HTML Report Response Display Limit is in KB. The default is `100KB`. If set to `0KB`, the response will not be included in the report. If set to `-1`, responses will only be saved for `failed` requests.
	"thunder-client.htmlReportResponseLimit": 100,

	// The http library to use to send API requests.
	"thunder-client.httpLibrary": "got",

	// Http Version for making the request, default is HTTP/1.1
	"thunder-client.httpVersion": "HTTP/1.1",

	// Thunder Client UI Editors JSON format indentation, select 2 or 4 spaces, default is `2 spaces`
	"thunder-client.indentSize": 2,

	// Indent Size for JSON files generated by Thunder Client, default is `4 spaces`
	"thunder-client.jsonFileIndentSize": 4,

	// [[Subscription required](https://www.thunderclient.com/pricing)] Mutile root workspace name to use to save requests data. This value is automatically set by the extension when you open `project.code-workspace` file.
	"thunder-client.multiRootWorkspaceName": "",

	// Preview features can be tested by enabling this option.
	"thunder-client.previewFeatures": false,

	// Select the request view layout for `request/response` sections. Please `close` request tab and `re-open` to apply new layout
	"thunder-client.requestLayout": "Left/Right",

	// Request Timeout in milliseconds, 0 means no timeout
	"thunder-client.requestTimeout": 0,

	// Response Display Limit in MB, Default is 2MB
	"thunder-client.responseLimit": 2,

	// Restore last opened tabs on vscode reload (only applies to request views).
	"thunder-client.restoreTabs": false,

	// `Save Request` when Send button is clicked in Collections. If disabled, the request will be sent without saving. Use shortcut `ctrl/cmd + s` to save the request explicitly
	"thunder-client.saveRequestOnSend": true,

	// Save OAuth 2 token based on environment, So this will allow to save `different access tokens` for `dev & prod` environments
	"thunder-client.saveTokenPerEnvironment": false,

	// [[Subscription required](https://www.thunderclient.com/pricing)] Requests data will be saved and loaded automatically from current workspace folder, `Suitable for Teams with multiple projects`. The tests folder `thunder-tests` will be created at the root. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.saveToWorkspace": false,

	// Sidebar default active tab, default is `Activity`
	"thunder-client.sidebar.defaultTab": "Activity",

	// The default sidebar layout is `standard`. The `compact` layout will hide the request date section in `sidebar`
	"thunder-client.sidebar.layout": "standard",

	// Show Requests executed from collection in `Activity Tab`
	"thunder-client.sidebar.showActivityFromCollection": false,

	// Sidebar Collections tree indentation, `select 0` for default padding, `select 5 or 10` to add extra 5px or 10px padding
	"thunder-client.sidebar.treeIndentation": 0,

	// Please provide `Test Value` column width in `percentage`, The value should be between `10 to 50`. The default value is `30`
	"thunder-client.testValueColumnWidth": 30,

	// [[Subscription required](https://www.thunderclient.com/pricing)] Relative path to the current workspace folder, where you like to save tests data, `Save To Workspace` setting needs to be enabled first. The tests folder `thunder-tests` will be created here. for more details [visit here](https://docs.thunderclient.com/team)
	"thunder-client.workspaceRelativePath": "",

	// 
	"alive.enableDiagnostics": true,

	// Indentation Level
	"alive.format.indentWidth": 2,

	// Https url from which to download alive-lsp release
	"alive.lsp.downloadUrl": "https://api.github.com/repos/nobody-famous/alive-lsp/releases",

	// 
	"alive.lsp.install.path": "",

	// Host the LSP server is running on
	"alive.lsp.remote.host": null,

	// Port the LSP server is running on
	"alive.lsp.remote.port": null,

	// 
	"alive.lsp.startCommand": [
		"sbcl",
		"--eval",
		"(ql:quickload '(:bordeaux-threads :usocket :cl-json :flexi-streams))",
		"--eval",
		"(require :asdf)",
		"--eval",
		"(asdf:load-system :alive-lsp)",
		"--eval",
		"(alive/server:start)"
	],

	// String, or list of strings, to nest packages in the package tree view
	"alive.packageTree.separator": null,

	// directory for caching of parsed symbols, if the directory does not exists, it will be created, defaults to ${workspace}/.vscode/perl-lang. This should be one unqiue directory per project and an absolute path.
	"perl.cacheDir": null,

	// arguments for containerCmd. Varies depending on containerCmd.
	"perl.containerArgs": null,

	// If set Perl::LanguageServer can run inside a container. Options are: 'docker', 'docker-compose', 'podman', 'kubectl'
	"perl.containerCmd": null,

	// To start a new container, set to 'run', to execute inside an existing container set to 'exec'. Note: kubectl only supports 'exec'
	"perl.containerMode": "exec",

	// Image to start or container to exec inside or pod to use
	"perl.containerName": null,

	// port to use for connection between vscode and debug adapter inside Perl::LanguageServer. On a multi user system every user must use a different port.
	"perl.debugAdapterPort": 13603,

	// if debugAdapterPort is in use try ports from debugAdapterPort to debugAdapterPort + debugAdapterPortRange. Default 100.
	"perl.debugAdapterPortRange": 100,

	// if true, the LanguageServer will not cache the result of parsing source files on disk, so it can be used within readonly directories
	"perl.disableCache": false,

	// per default enviroment from vscode will be passed to debuggee, syntax check and perltidy. If set to true, no enviroment variables will be passed.
	"perl.disablePassEnv": null,

	// enable/disable this extension
	"perl.enable": true,

	// object with environment settings for command that starts the LanguageServer, e.g. can be used to set KUBECONFIG.
	"perl.env": null,

	// array for filtering perl file, defaults to *.pm|*.pl
	"perl.fileFilter": null,

	// directories to ignore, defaults to .vscode, .git, .svn
	"perl.ignoreDirs": null,

	// If set, log output is written to the given logfile, instead of displaying it in the vscode output pane. Log output is always appended so you are responsible for rotating the file.
	"perl.logFile": null,

	// Log level 0-2
	"perl.logLevel": 0,

	// mapping of local to remote paths
	"perl.pathMap": null,

	// defaults to perl
	"perl.perlCmd": null,

	// array with paths to add to perl library path. This setting is used by the syntax checker and for the debuggee and also for the LanguageServer itself. perl.perlInc should be absolute paths.
	"perl.perlInc": null,

	// if true, show also local variables in symbol view
	"perl.showLocalVars": false,

	// ip address of remote system
	"perl.sshAddr": null,

	// optional arguments for ssh
	"perl.sshArgs": null,

	// defaults to ssh on unix and plink on windows
	"perl.sshCmd": null,

	// optional, port for ssh to remote system
	"perl.sshPort": null,

	// user for ssh login
	"perl.sshUser": null,

	// path of the workspace root on remote system
	"perl.sshWorkspaceRoot": null,

	// Use -T for syntax check.
	"perl.useTaintForSyntaxCheck": false,

	// The maximum amount of keys in a dotted key to display during completion, 0 effectively disables key completions.
	"evenBetterToml.completion.maxKeys": 5,

	// Align consecutive comments after entries and items vertically. This applies to comments that are after entries or array items
	"evenBetterToml.formatter.alignComments": null,

	// Align entries vertically. Entries that have table headers, comments, or blank lines between them are not aligned.
	"evenBetterToml.formatter.alignEntries": null,

	// The maximum amount of consecutive blank lines allowed.
	"evenBetterToml.formatter.allowedBlankLines": null,

	// Automatically collapse arrays if they fit in one line.
	"evenBetterToml.formatter.arrayAutoCollapse": null,

	// Automatically expand arrays to multiple lines.
	"evenBetterToml.formatter.arrayAutoExpand": null,

	// Put trailing commas for multiline arrays.
	"evenBetterToml.formatter.arrayTrailingComma": null,

	// Target maximum column width after which arrays are expanded into new lines.
	"evenBetterToml.formatter.columnWidth": null,

	// Omit whitespace padding inside single-line arrays.
	"evenBetterToml.formatter.compactArrays": null,

	// Omit whitespace around `=`.
	"evenBetterToml.formatter.compactEntries": null,

	// Omit whitespace padding inside inline tables.
	"evenBetterToml.formatter.compactInlineTables": null,

	// Use CRLF line endings.
	"evenBetterToml.formatter.crlf": null,

	// Indent entries under tables.
	"evenBetterToml.formatter.indentEntries": null,

	// Indentation to use, should be tabs or spaces but technically could be anything.
	"evenBetterToml.formatter.indentString": null,

	// Indent subtables if they come in order.
	"evenBetterToml.formatter.indentTables": null,

	// Expand values inside in line tables.
	"evenBetterToml.formatter.inlineTableExpand": null,

	// Alphabetically reorder array values that are not separated by blank lines.
	"evenBetterToml.formatter.reorderArrays": null,

	// Alphabetically reorder inline tables.
	"evenBetterToml.formatter.reorderInlineTables": null,

	// Alphabetically reorder keys that are not separated by blank lines.
	"evenBetterToml.formatter.reorderKeys": null,

	// Add trailing newline to the source.
	"evenBetterToml.formatter.trailingNewline": null,

	// Array of Taplo rules in JSON format, see [Configuration File - Rules](https://taplo.tamasfe.dev/configuration/file.html#rules). The rules given here are appended to existing rules from config files, if any. There is no conversion done, all object keys must be snake_case, including formatting rules.
	"evenBetterToml.rules": [],

	// Additional document and schema associations. 
	// 
	//  The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. Overlapping patterns result in undefined behaviour and either matching schema can be used. 
	// 
	//  The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://taplo.tamasfe.dev/configuration#visual-studio-code).
	"evenBetterToml.schema.associations": {},

	// The amount of seconds after which cached catalogs and schemas expire and will be attempted to be fetched again.
	"evenBetterToml.schema.cache.diskExpiration": 600,

	// The amount of seconds after which schemas will be invalidated from memory. 
	// **NOTE**: setting too low values will cause performance issues and validation of some schemas will fail.
	"evenBetterToml.schema.cache.memoryExpiration": 60,

	// A list of URLs to schema catalogs where schemas and associations can be fetched from
	"evenBetterToml.schema.catalogs": [
		"https://www.schemastore.org/api/json/catalog.json"
	],

	// Enable completion and validation based on JSON schemas.
	"evenBetterToml.schema.enabled": true,

	// Whether to show clickable links for keys in the editor.
	"evenBetterToml.schema.links": false,

	// Enable semantic tokens for inline table and array keys.
	"evenBetterToml.semanticTokens": false,

	// Whether to enable semantic tokens for tables and arrays.
	"evenBetterToml.syntax.semanticTokens": true,

	// Use the bundled taplo language server. If set to `false`, the `taplo` executable must be found in PATH or must be set in `evenBetterToml.taplo.path`.
	"evenBetterToml.taplo.bundled": true,

	// Whether to enable the usage of a Taplo configuration file.
	"evenBetterToml.taplo.configFile.enabled": true,

	// An absolute, or workspace relative path to the Taplo configuration file.
	"evenBetterToml.taplo.configFile.path": null,

	// Environment variables for Taplo.
	"evenBetterToml.taplo.environment": {},

	// Additional arguments for Taplo. Has no effect for the bundled LSP.
	"evenBetterToml.taplo.extraArgs": [],

	// An absolute path to the `taplo` executable. `evenBetterToml.taplo.bundled` needs to be set to `false` for this to have any effect.
	"evenBetterToml.taplo.path": null,

	// Logging level for console
	"intellicodeApiExamples.loggingLevel": "INFO",

	// Enable API Usage Examples for Python files
	"intellicodeApiExamples.python.enabled": true,

	// Enable API Usage Examples for Typescript/Javascript files
	"intellicodeApiExamples.typescript.enabled": true,

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Allow to run tasks in parallel, each running will create a new terminal. This configuration will override `gradle.reuseTerminals` and always create new task terminals when running or debugging a task.
	"gradle.allowParallelRun": false,

	// Controls whether Gradle tasks should be automatically detected
	"gradle.autoDetect": "on",

	// Show extra debug information in the output panel
	"gradle.debug": false,

	// Disable the warning confirm messages when performing batch actions
	"gradle.disableConfirmations": false,

	// Focus the task in the explorer when running a task
	"gradle.focusTaskInExplorer": true,

	// This setting will be removed in the future since the extension can automatically get debug tasks, for clean options, please see `gradle.javaDebug.cleanOutput`.
	// Java debug options
	"gradle.javaDebug": {
		"tasks": [
			"run",
			"runBoot",
			"test",
			"intTest",
			"integration"
		]
	},

	// Clean the task output cache before debugging
	"gradle.javaDebug.cleanOutput": true,

	// Discover Gradle projects in nested sub-directories
	"gradle.nestedProjects": false,

	// Default method of opening newly created project.
	"gradle.projectOpenBehaviour": "Interactive",

	// Reuse task terminals behaviour, will be overridden to `off` if `gradle.allowParallelRun` is true.
	//  - task: Use a dedicated terminal for a specific task. The terminal is not shared with other tasks.
	//  - off: Create a new terminal when a task is executed.
	//  - all: Share the terminal with other tasks.
	"gradle.reuseTerminals": "task",

	// Show stopped daemons in the Gradle Daemons view
	"gradle.showStoppedDaemons": false,

	// Whether to use build server to synchronize Gradle project. It will replace the original Buildship to import the Gradle when enabled.
	"java.gradle.buildServer.enabled": "on",

	// Controls when the build output should open.
	//  - neverOpen: Never automatically open build output.
	//  - openOnBuildStart: Open the build output when the build starts.
	//  - openOnBuildFailure: Open the build output when the build fails.
	"java.gradle.buildServer.openBuildOutput": "openOnBuildFailure",

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// [Experimental]: Enable debugging support on the decompiled source code. Be aware that this feature may affect the loading speed of Call Stack Viewlet.
	"java.debug.settings.debugSupportOnDecompiledSource": "on",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Specifies the allowed locations where the exception breakpoint can break on. Wildcard is supported, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.allowClasses": [],

	// Specifies a set of exception types you want to break on, e.g. java.lang.NullPointerException. A specific exception type and its subclasses can be selected for caught exceptions, uncaught exceptions, or both can be selected.
	"java.debug.settings.exceptionBreakpoint.exceptionTypes": [],

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging.
	"java.debug.settings.hotCodeReplace": "manual",

	// Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.
	"java.debug.settings.jdwp.async": "auto",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Link Java Projects Explorer with the active editor
	"java.dependency.syncWithFolderExplorer": true,

	// When enabled, the explorer shows non-Java resources.
	"java.project.explorer.showNonJavaResources": true,

	// The output path of the exported jar. Leave it empty if you want to manually pick the output location.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Whether to send back detailed information from error logs for diagnostic purpose.
	"java.help.collectErrorLog": false,

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Beginner Tips page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests.
	"java.test.config": {},

	// Specify the name of the default test configuration.
	"java.test.defaultConfig": "",

	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Format of project node name shown in Maven explorer.
	"maven.explorer.projectName": "${project.name}",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

}