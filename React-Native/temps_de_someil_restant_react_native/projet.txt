Arborescence (profondeur max 4, sans node_modules) :
.
├── App.js
├── app.json
├── assets
│   ├── favicon.png
│   ├── nuages_1.jpg
│   └── Temps_de_someil_restant_1.png
├── builds
│   ├── application-cdd42c53-3702-4c04-9858-81e740e87e0f.apk
│   └── temps_de_someil_restant_react_native
│       ├── AndroidManifest.xml
│       ├── apktool.yml
│       ├── assets
│       │   ├── app.config
│       │   ├── dexopt
│       │   └── index.android.bundle
│       ├── kotlin
│       │   ├── annotation
│       │   ├── collections
│       │   ├── coroutines
│       │   ├── internal
│       │   ├── kotlin.kotlin_builtins
│       │   ├── ranges
│       │   └── reflect
│       ├── lib
│       │   ├── arm64-v8a
│       │   ├── armeabi-v7a
│       │   ├── x86
│       │   └── x86_64
│       ├── META-INF
│       │   └── services
│       ├── original
│       │   ├── AndroidManifest.xml
│       │   └── META-INF
│       ├── res
│       │   ├── anim
│       │   ├── animator
│       │   ├── color
│       │   ├── color-night
│       │   ├── color-v31
│       │   ├── drawable
│       │   ├── drawable-anydpi
│       │   ├── drawable-hdpi
│       │   ├── drawable-ldpi
│       │   ├── drawable-ldrtl-hdpi
│       │   ├── drawable-ldrtl-mdpi
│       │   ├── drawable-ldrtl-xhdpi
│       │   ├── drawable-ldrtl-xxhdpi
│       │   ├── drawable-ldrtl-xxxhdpi
│       │   ├── drawable-mdpi
│       │   ├── drawable-v29
│       │   ├── drawable-watch
│       │   ├── drawable-xhdpi
│       │   ├── drawable-xxhdpi
│       │   ├── drawable-xxxhdpi
│       │   ├── interpolator
│       │   ├── layout
│       │   ├── layout-land
│       │   ├── layout-sw600dp
│       │   ├── layout-v26
│       │   ├── layout-watch
│       │   ├── mipmap-anydpi-v26
│       │   ├── mipmap-hdpi
│       │   ├── mipmap-mdpi
│       │   ├── mipmap-xhdpi
│       │   ├── mipmap-xxhdpi
│       │   ├── mipmap-xxxhdpi
│       │   ├── raw
│       │   ├── values
│       │   ├── values-af
│       │   ├── values-am
│       │   ├── values-ar
│       │   ├── values-as
│       │   ├── values-az
│       │   ├── values-be
│       │   ├── values-b+es+419
│       │   ├── values-bg
│       │   ├── values-bn
│       │   ├── values-bs
│       │   ├── values-b+sr+Latn
│       │   ├── values-ca
│       │   ├── values-cs
│       │   ├── values-da
│       │   ├── values-de
│       │   ├── values-el
│       │   ├── values-en-rAU
│       │   ├── values-en-rCA
│       │   ├── values-en-rGB
│       │   ├── values-en-rIN
│       │   ├── values-en-rXC
│       │   ├── values-es
│       │   ├── values-es-rES
│       │   ├── values-es-rUS
│       │   ├── values-et
│       │   ├── values-eu
│       │   ├── values-fa
│       │   ├── values-fi
│       │   ├── values-fr
│       │   ├── values-fr-rCA
│       │   ├── values-gl
│       │   ├── values-gu
│       │   ├── values-h320dp-port
│       │   ├── values-h360dp-land
│       │   ├── values-h480dp-land
│       │   ├── values-h550dp-port
│       │   ├── values-h720dp
│       │   ├── values-hdpi
│       │   ├── values-hi
│       │   ├── values-hr
│       │   ├── values-hu
│       │   ├── values-hy
│       │   ├── values-in
│       │   ├── values-is
│       │   ├── values-it
│       │   ├── values-iw
│       │   ├── values-ja
│       │   ├── values-ka
│       │   ├── values-kk
│       │   ├── values-km
│       │   ├── values-kn
│       │   ├── values-ko
│       │   ├── values-ky
│       │   ├── values-land
│       │   ├── values-large
│       │   ├── values-ldrtl
│       │   ├── values-lo
│       │   ├── values-lt
│       │   ├── values-lv
│       │   ├── values-mk
│       │   ├── values-ml
│       │   ├── values-mn
│       │   ├── values-mr
│       │   ├── values-ms
│       │   ├── values-my
│       │   ├── values-nb
│       │   ├── values-ne
│       │   ├── values-night
│       │   ├── values-nl
│       │   ├── values-or
│       │   ├── values-pa
│       │   ├── values-pl
│       │   ├── values-port
│       │   ├── values-pt
│       │   ├── values-pt-rBR
│       │   ├── values-pt-rPT
│       │   ├── values-ro
│       │   ├── values-ru
│       │   ├── values-si
│       │   ├── values-sk
│       │   ├── values-sl
│       │   ├── values-small
│       │   ├── values-sq
│       │   ├── values-sr
│       │   ├── values-sv
│       │   ├── values-sw
│       │   ├── values-sw600dp
│       │   ├── values-ta
│       │   ├── values-te
│       │   ├── values-th
│       │   ├── values-tl
│       │   ├── values-tr
│       │   ├── values-uk
│       │   ├── values-ur
│       │   ├── values-uz
│       │   ├── values-v25
│       │   ├── values-v26
│       │   ├── values-v27
│       │   ├── values-v28
│       │   ├── values-v29
│       │   ├── values-v30
│       │   ├── values-v31
│       │   ├── values-v34
│       │   ├── values-vi
│       │   ├── values-w320dp-land
│       │   ├── values-w360dp-port
│       │   ├── values-w400dp-port
│       │   ├── values-w600dp-land
│       │   ├── values-watch
│       │   ├── values-xlarge
│       │   ├── values-zh-rCN
│       │   ├── values-zh-rHK
│       │   ├── values-zh-rTW
│       │   ├── values-zu
│       │   └── xml
│       ├── smali
│       │   ├── android
│       │   ├── androidx
│       │   ├── bolts
│       │   ├── co
│       │   ├── com
│       │   └── _COROUTINE
│       ├── smali_classes2
│       │   ├── com
│       │   ├── expo
│       │   ├── javax
│       │   ├── kotlin
│       │   ├── kotlinx
│       │   ├── okhttp3
│       │   ├── okio
│       │   └── org
│       └── unknown
│           ├── DebugProbesKt.bin
│           ├── kotlin-tooling-metadata.json
│           ├── okhttp3
│           └── org
├── eas.json
├── index.js
├── package.json
├── package-lock.json
├── projet.txt
├── src
│   ├── components
│   │   └── SleepCalculator.js
│   └── utils
│       └── time.js
└── yarn.lock

194 directories, 22 files



# ./App.js
import { StatusBar } from "expo-status-bar";
import { SafeAreaView, StyleSheet } from "react-native";
import SleepCalculator from "./src/components/SleepCalculator";

export default function App() {
	return (
		<SafeAreaView style={styles.container}>
			<SleepCalculator />
			<StatusBar style="auto" />
		</SafeAreaView>
	);
}

const styles = StyleSheet.create({
	container: { flex: 1 },
});

# ./App.js

# ./app.json
{
  "expo": {
    "name": "temps_de_someil_restant_react_native1.1",
    "slug": "temps_de_someil_restant_react_native1.1",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/assets/Temps_de_someil_restant_1.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/Temps_de_someil_restant_1.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/Temps_de_someil_restant_1.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true,
      "package": "com.hilnielbe.temps_de_someil_restant_react_native1.1"
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "extra": {
      "eas": {
        "projectId": "6ea38fa3-1fd3-4222-8f2a-3da473062433"
      }
    }
  }
}

# ./app.json

# ./builds/temps_de_someil_restant_react_native/unknown/kotlin-tooling-metadata.json
{
  "schemaVersion": "1.1.0",
  "buildSystem": "Gradle",
  "buildSystemVersion": "8.13",
  "buildPlugin": "org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper",
  "buildPluginVersion": "2.0.21",
  "projectSettings": {
    "isHmppEnabled": true,
    "isCompatibilityMetadataVariantEnabled": false,
    "isKPMEnabled": false
  },
  "projectTargets": [
    {
      "target": "org.jetbrains.kotlin.gradle.plugin.mpp.KotlinAndroidTarget",
      "platformType": "androidJvm",
      "extras": {
        "android": {
          "sourceCompatibility": "17",
          "targetCompatibility": "17"
        }
      }
    }
  ]
}
# ./builds/temps_de_someil_restant_react_native/unknown/kotlin-tooling-metadata.json

# ./eas.json
{
  "cli": {
    "version": ">= 16.17.0",
    "appVersionSource": "remote"
  },
  "build": {
		"development": {
			"developmentClient": true,
			"distribution": "internal"
		},
		"preview": {
			"distribution": "internal"
		},
		"production": {
			"autoIncrement": true,
			"android": {
				"buildType": "apk"
			},
			"distribution": "internal"
		}
  },
  "submit": {
    "production": {}
  }
}

# ./eas.json

# ./.expo/devices.json
{
  "devices": []
}

# ./.expo/devices.json

# ./index.js
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);

# ./index.js

# ./package.json
{
  "name": "temps_de_someil_restant_react_native",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/metro-runtime": "~5.0.4",
    "@react-native-community/datetimepicker": "8.4.1",
    "eas-cli": "^16.17.0",
    "expo": "~53.0.20",
    "expo-status-bar": "~2.2.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.5",
    "react-native-web": "^0.20.0",
    "expo-dev-client": "~5.2.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}

# ./package.json

# ./src/components/SleepCalculator.js
import React, { useCallback, useEffect, useState } from "react";
import { ImageBackground, Pressable, StyleSheet, Text, TextInput, View } from "react-native";

/* Helpers --------------------------------------------------------------- */
const clamp = (v, min, max) => Math.min(Math.max(v, min), max);
const two = (n) => String(n).padStart(2, "0");

export default function SleepCalculator() {
	/* 1 état par input (cours) : on stocke la valeur affichée */
	const [hour, setHour] = useState("06");
	const [minute, setMinute] = useState("30");

	/* temps restant */
	const [remain, setRemain] = useState({ h: 0, m: 0 });

	/* parsing sécurisé */
	const parsedHour = clamp(parseInt(hour, 10) || 0, 0, 23);
	const parsedMinute = clamp(parseInt(minute, 10) || 0, 0, 59);

	/* calcul du temps restant */
	const refresh = useCallback(() => {
		const now = new Date();
		const wake = new Date(now.getFullYear(), now.getMonth(), now.getDate(), parsedHour, parsedMinute, 0, 0);
		if (wake <= now) wake.setDate(wake.getDate() + 1);
		const diffMinutes = Math.round((wake - now) / 60000);
		setRemain({ h: Math.floor(diffMinutes / 60), m: diffMinutes % 60 });
	}, [parsedHour, parsedMinute]);

	/* recalcul automatique + toutes les minutes */
	useEffect(() => {
		refresh();
		const id = setInterval(refresh, 60_000);
		return () => clearInterval(id);
	}, [refresh]);

	/* Couleurs selon durée restante */
	const total = remain.h + remain.m / 60;
	const bg = total >= 8 ? "#198754" : total >= 6 ? "#ffc107" : total >= 3 ? "#dc3545" : "#0d0d0d";
	const fg = total < 3 ? "#ffffff" : "#000000";

	/* Handlers : mise à jour simple de l'état (cours) */
	const handleHourChange = (v) => {
		const clean = v.replace(/\D/g, "").slice(0, 2);
		setHour(clean);
	};
	const handleMinuteChange = (v) => {
		const clean = v.replace(/\D/g, "").slice(0, 2);
		setMinute(clean);
	};

	/* Normalisation visuelle au blur (ajout du padding + clamp) */
	const normalizeHour = () => setHour(two(parsedHour));
	const normalizeMinute = () => setMinute(two(parsedMinute));

	return (
		<ImageBackground source={require("../../assets/nuages_1.jpg")} style={styles.bg} resizeMode="cover">
			<View style={styles.center}>
				<Text style={styles.label}>Heure de réveil :</Text>

				<View style={styles.timeRow}>
					<TextInput style={styles.input} keyboardType="numeric" maxLength={2} value={hour} onChangeText={handleHourChange} onBlur={normalizeHour} placeholder="HH" textAlign="center" />
					<Text style={styles.colon}>:</Text>
					<TextInput
						style={styles.input}
						keyboardType="numeric"
						maxLength={2}
						value={minute}
						onChangeText={handleMinuteChange}
						onBlur={normalizeMinute}
						placeholder="MM"
						textAlign="center"
					/>
				</View>

				<View style={[styles.box, { backgroundColor: bg }]}>
					<Text style={[styles.boxText, { color: fg }]}>
						{two(remain.h)}:{two(remain.m)}
					</Text>
				</View>

				<Pressable style={styles.refreshButton} onPress={refresh}>
					<Text style={styles.refreshText}>🔁 Refresh</Text>
				</Pressable>
			</View>
		</ImageBackground>
	);
}

/* Styles ---------------------------------------------------------------- */
const styles = StyleSheet.create({
	bg: { flex: 1 },
	center: { flex: 1, alignItems: "center", justifyContent: "center" },

	label: { fontSize: 18, marginBottom: 8 },

	timeRow: { flexDirection: "row", alignItems: "center", marginBottom: 24 },
	input: {
		width: 60,
		height: 54,
		fontSize: 24,
		textAlign: "center",
		borderWidth: 1,
		borderColor: "#ccc",
		borderRadius: 6,
		backgroundColor: "#fff",
		marginHorizontal: 2,
	},
	colon: { fontSize: 24, fontWeight: "bold", marginHorizontal: 4 },

	box: {
		width: 200,
		height: 200,
		borderRadius: 12,
		alignItems: "center",
		justifyContent: "center",
	},
	boxText: { fontSize: 48, fontWeight: "bold" },
	refreshButton: {
		marginTop: 20,
		paddingVertical: 8,
		paddingHorizontal: 16,
		borderRadius: 6,
		backgroundColor: "#007bff",
	},
	refreshText: { color: "#fff", fontWeight: "bold", fontSize: 16, textAlign: "center" },
});

# ./src/components/SleepCalculator.js

# ./src/utils/time.js
// Calcule le nombre d'heures (virgule flottante) restantes avant l'heure de réveil.
export const hoursUntilWake = (wakeDate) => {
	const now = new Date();
	const wake = new Date(wakeDate); // clone

	if (wake <= now) {
		wake.setDate(wake.getDate() + 1); // réveil le lendemain si besoin
	}

	const diffMs = wake - now;
	return diffMs / (1000 * 60 * 60);
};

# ./src/utils/time.js


Liste des fichiers trouvés et concaténés :
./App.js
./app.json
./builds/temps_de_someil_restant_react_native/unknown/kotlin-tooling-metadata.json
./eas.json
./.expo/devices.json
./index.js
./package.json
./src/components/SleepCalculator.js
./src/utils/time.js

# ./package.json
{
  "name": "temps_de_someil_restant_react_native",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/metro-runtime": "~5.0.4",
    "@react-native-community/datetimepicker": "8.4.1",
    "eas-cli": "^16.17.0",
    "expo": "~53.0.20",
    "expo-status-bar": "~2.2.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.5",
    "react-native-web": "^0.20.0",
    "expo-dev-client": "~5.2.4"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}

# ./package.json

